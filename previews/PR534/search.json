[
  {
    "objectID": "user_guide/zmq_server.html",
    "href": "user_guide/zmq_server.html",
    "title": "Run wflow as a ZMQ Server",
    "section": "",
    "text": "It is possible to run wflow as a ZMQ Server, for example for the coupling to the OpenDA software for data-assimilation. The code for the wflow ZMQ Server is not part of the Wflow.jl package, and is located here.\n\n\n\n Back to top",
    "crumbs": [
      "User guide",
      "Integrations",
      "Run wflow as a ZMQ Server"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html",
    "href": "user_guide/toml_file.html",
    "title": "Simulation settings",
    "section": "",
    "text": "All model configuration and settings are passed through the .toml file, which contains all relevant settings, information about the model configuration, simulation period, input files, and parameters. The settings are provided in a TOML file. The settings file is structured in several sections, which are explained below. The file paths provided in this file are relative to the location of the TOML file, or to dir_input and dir_output if they are specified.",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#general-time-info",
    "href": "user_guide/toml_file.html#general-time-info",
    "title": "Simulation settings",
    "section": "General time info",
    "text": "General time info\nTime information is optional. When omitted, wflow will perform computations for each timestamp in the forcing netCDF file, except for the first forcing timestamp, which is considered equal to the initial conditions of the wflow model (state time). If you wish to calculate a subset of this time range, or a different timestep, you can specify a starttime, endtime and timestepsecs. The starttime is defined as the model state time. In the TOML file settings below, the starttime is 2000-01-01T00:00:00 (state time) and the first update (and output) of the wflow model is at 2000-01-02T00:00:00. The time_units optional information is used by the writer of the model, for model output in netCDF format. The calendar option allows you to calculate in one of the different CF conventions calendars provided by the CFTime.jl package, such as \"360_day\". This is useful if you want to calculate climate scenarios which are sometimes provided in these alternative calendars.\ncalendar = \"standard\"                           # optional, this is the default value\nstarttime = 2000-01-01T00:00:00                 # optional, default from forcing netCDF\nendtime = 2000-02-01T00:00:00                   # optional, default from forcing netCDF\ntime_units = \"days since 1900-01-01 00:00:00\"   # optional, this is the default value\ntimestepsecs = 86400                            # optional, default from forcing netCDF\ndir_input = \"data/input\"                        # optional, default is the path of the TOML\ndir_output = \"data/output\"                      # optional, default is the path of the TOML",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#logging",
    "href": "user_guide/toml_file.html#logging",
    "title": "Simulation settings",
    "section": "Logging",
    "text": "Logging\nWflow prints logging messages at various levels such as debug, info, and error. These messages are sent to both the terminal and a log file. Note that logging to a file is only part of the Wflow.run(tomlpath::AbstractString) method. If you want to debug an issue, it can be helpful to set loglevel = \"debug\" in the TOML. To avoid flooding the screen, debug messages are only sent to the log file. The following settings will affect the logging:\nsilent = false          # optional, default is \"false\"\nloglevel = \"debug\"      # optional, default is \"info\"\npath_log = \"log.txt\"    # optional, default is \"log.txt\"\nfews_run = false        # optional, default value is false\nsilent avoids logging to the terminal, and only writes to the log file. loglevel controls which levels are filtered out; for instance, the default setting \"info\" does not print any debug-level messages. Note that for finer control, you can also pass an integer log level. For details, see Julia’s Logging documentation. path_log sets the desired output path for the log file. For information on fews_run, see Run from Delft-FEWS.",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#model-section",
    "href": "user_guide/toml_file.html#model-section",
    "title": "Simulation settings",
    "section": "Model section",
    "text": "Model section\nModel-specific settings can be included in the model section of the TOML file.\n[model]\ntype = \"sbm\"                        # one of (\"sbm\" or \"sbm_gwf)\nmasswasting = false                 # include lateral snow transport in the model, default is false\nsnow = false                        # include snow modelling, default is false\nreinit = true                       # cold (reinit = true) or warm state (reinit = false), default is true\nreservoirs = false                  # include reservoir modelling, default is false\nkin_wave_iteration = false          # enable kinematic wave iterations in the model, default is false\nthicknesslayers = [100, 300, 800]   # specific SBM setting: for each soil layer, a thickness [mm] is specified\nmin_streamorder_river = 5           # minimum stream order to delineate subbasins for river domain, default is 6 (for multi-threading computing purposes)\nmin_streamorder_land = 4            # minimum stream order to delineate subbasins for land domain, default is 5 (for multi-threading computing purposes)",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#state-options",
    "href": "user_guide/toml_file.html#state-options",
    "title": "Simulation settings",
    "section": "State options",
    "text": "State options\nThe state section in the TOML file provides information about the location of input and output states of the model. This section is mostly relevant if the model needs to start with a “warm” state (i.e. based on the results of a previous simulation). The example below shows how to save the output states of the current simulation, so it can be used to initialize another model in the future. Details on the settings required to start a model with a warm state can be found in the additional model options. If it is not required to store the outstates of the current simulation, the entire state section can be removed.\n[state]\npath_input = \"instates-moselle.nc\"\npath_output = \"outstates-moselle.nc\"\n\n[state.vertical]\nsatwaterdepth = \"satwaterdepth\"\nsnow = \"snow\"\ntsoil = \"tsoil\"\nustorelayerdepth = \"ustorelayerdepth\"\nsnowwater = \"snowwater\"\ncanopystorage = \"canopystorage\"\n\n[state.lateral.river]\nq = \"q_river\"\nh = \"h_river\"\nh_av = \"h_av_river\"\n\n[state.lateral.river.reservoir]\nvolume = \"volume_reservoir\"\n\n[state.lateral.subsurface]\nssf = \"ssf\"\n\n[state.lateral.land]\nq = \"q_land\"\nh = \"h_land\"\nh_av = \"h_av_land\"",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#input-section",
    "href": "user_guide/toml_file.html#input-section",
    "title": "Simulation settings",
    "section": "Input section",
    "text": "Input section\nThe input section of the TOML file contains information about the input forcing and model parameters files (in netCDF format). Forcing is applied to the vertical component of the model, and needs to be mapped to the external netCDF variable name. forcing lists the internal model forcing parameters, and these are mapped to the external netCDF variables listed under the section [input.vertical]. It is possible to provide cyclic parameters to the model (minimum time step of 1 day). In the example below, the internal vertical.leaf_area_index model parameter is mapped to the external netCDF variable “LAI” variable. Cyclic time inputs of parameters can be different (e.g., daily or monthly). The time dimension name of these cylic input parameters in the model parameter netCDF file should start with “time”. If a model parameter is not mapped, a default value will be used, if available.\n[input]\n# use \"forcing-year-*.nc\" if forcing files are split in time\npath_forcing = \"forcing-moselle.nc\"    # Location of the forcing data\npath_static = \"staticmaps-moselle.nc\"  # Location of the static data\n\n# these are not directly part of the model\ngauges = \"wflow_gauges\"\nldd = \"wflow_ldd\"\nriver_location = \"wflow_river\"\nsubcatchment = \"wflow_subcatch\"\n\n# specify the internal IDs of the parameters which vary over time\n# the external name mapping needs to be below together with the other mappings\nforcing = [\n\"vertical.precipitation\",\n\"vertical.temperature\",\n\"vertical.potential_evaporation\",\n]\n\ncyclic = [\"vertical.leaf_area_index\"]\n\n[input.vertical]    # Map internal model variable/parameter names to variable names in the netCDF files\naltitude = \"wflow_dem\"\nc = \"c\"\ncf_soil = \"cf_soil\"\ncfmax = \"Cfmax\"\ne_r = \"EoverR\"\ninfiltcappath = \"InfiltCapPath\"\ninfiltcapsoil = \"InfiltCapSoil\"\nkext = \"Kext\"\nkv_0 = \"KsatVer\"\nleaf_area_index = \"LAI\"             # Cyclic variable\nm = \"M\"\nmaxleakage = \"MaxLeakage\"\npathfrac = \"PathFrac\"\npotential_evaporation = \"PET\"       # Forcing variable\nprecipitation = \"P\"                 # Forcing variable\nrootdistpar = \"rootdistpar\"\nrootingdepth = \"RootingDepth\"\nsoilminthickness = \"SoilMinThickness\"\nsoilthickness = \"SoilThickness\"\nspecific_leaf = \"Sl\"\nstorage_wood = \"Swood\"\ntemperature = \"TEMP\"                # Forcing variable\ntt = \"TT\"\ntti = \"TTI\"\nttm = \"TTM\"\nw_soil = \"wflow_soil\"\nwater_holding_capacity = \"WHC\"\nwaterfrac = \"WaterFrac\"\ntheta_r = \"thetaR\"\ntheta_s = \"thetaS\"\n\n[input.lateral.river]\nlength = \"wflow_riverlength\"\nn = \"N_River\"\nslope = \"RiverSlope\"\nwidth = \"wflow_riverwidth\"\n\n[input.lateral.subsurface]\nksathorfrac = \"KsatHorFrac\"\n\n[input.lateral.land]\nn = \"N\"\nslope = \"Slope\"",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#output-netcdf-section",
    "href": "user_guide/toml_file.html#output-netcdf-section",
    "title": "Simulation settings",
    "section": "Output netCDF section",
    "text": "Output netCDF section\n\nGrid data\nThis optional section of the TOML file specifies the output netCDF file for writing gridded model output. It includes a mapping between internal model parameter components and external netCDF variables.\nTo limit the size of the resulting netCDF file, file compression can be enabled. Compression increases computational time but can significantly reduce the size of the netCDF file. Set the compressionlevel variable to a value between 0 and 9. A setting of 0 means no compression, while values between 1 and 9 indicate increasing levels of compression (1: least compression, minimal run-time impact, 9: highest compression, maximum run-time impact). If file size is a concern, we recommend using a value of 1, as higher compression levels generally have a limited effect on file size.\n[output]\npath = \"output_moselle.nc\"         # Location of the output file\ncompressionlevel = 1               # Compression level (default 0)\n\n[output.vertical]   # Mapping of names between internal model components and external netCDF variables\nsatwaterdepth = \"satwaterdepth\"\nsnow = \"snow\"\ntsoil = \"tsoil\"\nustorelayerdepth = \"ustorelayerdepth\"\nsnowwater = \"snowwater\"\ncanopystorage = \"canopystorage\"\n\n[output.lateral.river]\nq = \"q_river\"\nh = \"h_river\"\n\n[output.lateral.river.reservoir]\nvolume = \"volume_reservoir\"\n\n[output.lateral.subsurface]\nssf = \"ssf\"\n\n[output.lateral.land]\nq = \"q_land\"\nh = \"h_land\"\n\n\nScalar data\nIn addition to gridded data, scalar data can also be written to a netCDF file. Below is an example that shows how to write scalar data to the file “output_scalar_moselle.nc”. For each netCDF variable, a name (external variable name) and a parameter (internal model parameter) are required. A reducer can be specified to apply to the model output. See more details in the Output CSV section section. If a map is provided to extract data for specific locations (e.g. gauges) or areas (e.g. subcatchment), the netCDF location names are extracted from these maps. For a specific location (grid cell) a location is required. For layered model parameters and variables that have an extra layer dimension and are part of the vertical sbm concept, an internal layer index can be specified (an example is provided below). Similarly, for model parameters and variables that have an extra dimension classes and are part of the vertical FLEXTopo concept, the class name can be specified. If multiple layers or classes are desired, this can be specified in separate [[netcdf.variable]] entries. Note that the additional dimension should be specified when wflow is integrated with Delft-FEWS, for netCDF scalar data an extra dimension is not allowed by the importNetcdfActivity of the Delft-FEWS General Adapter. In the section Output CSV section, similar functionality is available for CSV. For integration with Delft-FEWS, it is recommended to write scalar data to netCDF format, as the General Adapter of Delft-FEWS can directly ingest data from netCDF files. For more information, see Run from Delft-FEWS.\n[netcdf]\npath = \"output_scalar_moselle.nc\"  # Location of the results\n\n[[netcdf.variable]] # Extract the values of lateral.river.q using the gauges map, and assign it with the name 'Q' as a variable in the netCDF file\nname = \"Q\"\nmap = \"gauges\"\nparameter = \"lateral.river.q\"\n\n[[netcdf.variable]] # Using coordinates to extract temperature\ncoordinate.x = 6.255\ncoordinate.y = 50.012\nname = \"vwc_layer2_bycoord\"\nlocation = \"vwc_bycoord\"\nparameter = \"vertical.vwc\"\nlayer = 2\n\n[[netcdf.variable]] # Using indices to extract temperature\nlocation = \"temp_byindex\"\nname = \"temp_index\"\nindex.x = 100\nindex.y = 264\nparameter = \"vertical.temperature\"",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#output-csv-section",
    "href": "user_guide/toml_file.html#output-csv-section",
    "title": "Simulation settings",
    "section": "Output CSV section",
    "text": "Output CSV section\nModel output can also be written to a CSV file. Below is an example that writes model output to the file “output_moselle.csv”. For each CSV column, a header and parameter (internal model parameter) are required. A reducer can be specified to apply to the model output, with the following available reducers:\n\nmaximum\nminimum\nmean\nmedian\nsum\nfirst\nlast\nonly\n\nwith only as the default. To extract data for a specific location (grid cell), the index of the vector, the coordinates coordinate.x and coordinate.y, or the x and y indices of the 2D array (index.x and index.y) can be provided. Additionally, a map can be provided to extract data for certain locations (e.g. gauges) or areas (e.g. subcatchment). In this case, a single entry can lead to multiple columns in the CSV file, which will be of the form header_id, e.g. Q_20, for a gauge with integer ID 20. For layered model parameters and variables that have an extra dimension layer and are part of the vertical sbm concept an internal layer index (see also example below) should be specified. For model parameters and variables that have an extra dimension classes and are part of the vertical FLEXTopo concept, it is possible to specify the class name. If multiple layers or classes are desired, this can be specified in separate [[csv.column]] entries.\nThe double brackets in [[csv.column]] follow TOML syntax, indicating that it is part of a list. You can specify as many entries as you want.\n[csv]\npath = \"output_moselle.csv\"\n\n[[csv.column]]\nheader = \"Q\"\nparameter = \"lateral.river.q\"\nreducer = \"maximum\"\n\n[[csv.column]]\nheader = \"volume\"\nindex = 1\nparameter = \"lateral.river.reservoir.volume\"\n\n[[csv.column]]\ncoordinate.x = 6.255\ncoordinate.y = 50.012\nheader = \"temp_bycoord\"\nparameter = \"vertical.temperature\"\n\n[[csv.column]]\ncoordinate.x = 6.255\ncoordinate.y = 50.012\nheader = \"vwc_layer2_bycoord\"\nparameter = \"vertical.vwc\"\nlayer = 2\n\n[[csv.column]]\nheader = \"temp_byindex\"\nindex.x = 100\nindex.y = 264\nparameter = \"vertical.temperature\"\n\n[[csv.column]]\nheader = \"Q\"\nmap = \"gauges\"\nparameter = \"lateral.river.q\"\n\n[[csv.column]]\nheader = \"recharge\"\nmap = \"subcatchment\"\nparameter = \"vertical.recharge\"\nreducer = \"mean\"",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#modify-parameters",
    "href": "user_guide/toml_file.html#modify-parameters",
    "title": "Simulation settings",
    "section": "Modify parameters",
    "text": "Modify parameters\nIt is possible to modify model parameters and forcing through the TOML file. Two options to modify input parameters are available:\n\nSet an input parameter (static) to a uniform value.\nModify an input parameter (cyclic and static) or forcing variable using a scale factor and offset.\n\nFor example, to set the input parameter cfmax to an uniform value of 2.5:\n[input.vertical]\nwater_holding_capacity = \"WHC\"\nwaterfrac = \"WaterFrac\"\ncfmax.value = 2.5\nFor input parameters with an extra dimension (e.g. layer or classes), one uniform value can be provided or a list of values that matches the length of the additional dimension. For example, a list of values can be provided for input parameter c as follows:\n[input.vertical]\nwater_holding_capacity = \"WHC\"\nwaterfrac = \"WaterFrac\"\nc.value = [10.5, 11.25, 9.5, 7.0]\nTo change the forcing variable precipitation with a scale factor of 1.5 and an offset of 0.5:\n[input.vertical.precipitation]\nnetcdf.variable.name = \"P\"\nscale = 1.5\noffset = 0.5\nFor input parameters with an extra dimension, it is also possible to modify multiple indices simultaneously with different scale and offset values. In the example below, the external netCDF variable c is modified at layer index 1 and 2, with a scale factor of 2.0 and 1.5 respectively, and an offset of 0.0 for both indices:\n[input.vertical.c]\nnetcdf.variable.name = \"c\"\nscale = [2.0, 1.5]\noffset = [0.0, 0.0]\nlayer = [1, 2]",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/toml_file.html#fixed-forcing-values",
    "href": "user_guide/toml_file.html#fixed-forcing-values",
    "title": "Simulation settings",
    "section": "Fixed forcing values",
    "text": "Fixed forcing values\nIt is possible to set fixed values for forcing parameters through the TOML file. For example, to set temperature to a fixed value of 10 \\degreeC, the complete forcing list is required:\nforcing = [\n  \"vertical.precipitation\",\n  \"vertical.temperature\",\n  \"vertical.potential_evaporation\",\n]\n\n[input.vertical.temperature]\nvalue = 10\nNote that the mapping to the external netCDF variable listed under the [input.vertical] section needs to be removed or commented out:\n[input.vertical]\npotential_evaporation = \"PET\" # forcing\n# temperature = \"TEMP\" # forcing\nprecipitation = \"P\" # forcing",
    "crumbs": [
      "User guide",
      "Simulation settings"
    ]
  },
  {
    "objectID": "user_guide/output.html",
    "href": "user_guide/output.html",
    "title": "Handling model output",
    "section": "",
    "text": "After running the model example from the previous step 4, the model results can be found in data/output_moselle_simple.csv.\nIf required, it is also possible to output netCDF files as output, by modifying the TOML file. An example is shown below:\n# Spatial output\n[output]\npath = \"data/output.nc\"\n\n[output.lateral.river]\nq_av = \"q_river\"\n\n[output.lateral.land]\nq = \"q_land\"\nh = \"h_land\"\n\n# Scalar output (mapped to the specified map)\n[netcdf]\npath = \"data/output_scalar.nc\"\n\n[[netcdf.variable]]\nname = \"Q\"\nmap = \"gauges\"\nparameter = \"lateral.river.q_av\"\n\n[[netcdf.variable]]\nname = \"prec\"\nmap = \"subcatchment\"\nparameter = \"vertical.precipitation\"\nreducer = \"mean\"\nUsing your own preferred programming language, the model output files can be easily read and visualized.\n\n\n\n Back to top",
    "crumbs": [
      "User guide",
      "Handling model output"
    ]
  },
  {
    "objectID": "user_guide/model_config.html",
    "href": "user_guide/model_config.html",
    "title": "Different model configurations",
    "section": "",
    "text": "[model]\nsnow = true\nmasswasting = true\nglacier = true\n\n[input.vertical]\ntt = \"TT\"\ntti = \"TTI\"\nttm = \"TTM\"\nwater_holding_capacity = \"WHC\"\nglacierstore = \"wflow_glacierstore\"\nglacierfrac = \"wflow_glacierfrac\"\ng_cfmax = \"G_Cfmax\"\ng_ttm = \"G_TT\"\ng_sifrac = \"G_SIfrac\"\n\n[state.vertical]\nsnow = \"snow\"\ntsoil = \"tsoil\"\nsnowwater = \"snowwater\"\nglacierstorage = \"glacierstorage\"",
    "crumbs": [
      "User guide",
      "Supported options",
      "Different model configurations"
    ]
  },
  {
    "objectID": "user_guide/model_config.html#enabling-snow-and-glacier-processes",
    "href": "user_guide/model_config.html#enabling-snow-and-glacier-processes",
    "title": "Different model configurations",
    "section": "",
    "text": "[model]\nsnow = true\nmasswasting = true\nglacier = true\n\n[input.vertical]\ntt = \"TT\"\ntti = \"TTI\"\nttm = \"TTM\"\nwater_holding_capacity = \"WHC\"\nglacierstore = \"wflow_glacierstore\"\nglacierfrac = \"wflow_glacierfrac\"\ng_cfmax = \"G_Cfmax\"\ng_ttm = \"G_TT\"\ng_sifrac = \"G_SIfrac\"\n\n[state.vertical]\nsnow = \"snow\"\ntsoil = \"tsoil\"\nsnowwater = \"snowwater\"\nglacierstorage = \"glacierstorage\"",
    "crumbs": [
      "User guide",
      "Supported options",
      "Different model configurations"
    ]
  },
  {
    "objectID": "user_guide/model_config.html#enabling-reservoirs",
    "href": "user_guide/model_config.html#enabling-reservoirs",
    "title": "Different model configurations",
    "section": "Enabling reservoirs",
    "text": "Enabling reservoirs\n[model]\nreservoirs = true\n\n[input.lateral.river.reservoir]\narea = \"ResSimpleArea\"\nareas = \"wflow_reservoirareas\"\ndemand = \"ResDemand\"\nlocs = \"wflow_reservoirlocs\"\nmaxrelease = \"ResMaxRelease\"\nmaxvolume = \"ResMaxVolume\"\ntargetfullfrac = \"ResTargetFullFrac\"\ntargetminfrac = \"ResTargetMinFrac\"\n\n[state.lateral.river.reservoir]\nvolume = \"volume_reservoir\"",
    "crumbs": [
      "User guide",
      "Supported options",
      "Different model configurations"
    ]
  },
  {
    "objectID": "user_guide/model_config.html#enabling-lakes",
    "href": "user_guide/model_config.html#enabling-lakes",
    "title": "Different model configurations",
    "section": "Enabling lakes",
    "text": "Enabling lakes\n[model]\nlakes = true\n\n[input.lateral.river.lake]\narea = \"lake_area\"\nareas = \"wflow_lakeareas\"\nb = \"lake_b\"\ne = \"lake_e\"\nlocs = \"wflow_lakelocs\"\noutflowfunc = \"lake_outflowfunc\"\nstorfunc  = \"lake_storfunc\"\nthreshold  = \"lake_threshold\"\nwaterlevel = \"lake_waterlevel\"\n\n[state.lateral.river.lake]\nwaterlevel = \"waterlevel_lake\"",
    "crumbs": [
      "User guide",
      "Supported options",
      "Different model configurations"
    ]
  },
  {
    "objectID": "user_guide/model_config.html#enabling-floodplain-routing",
    "href": "user_guide/model_config.html#enabling-floodplain-routing",
    "title": "Different model configurations",
    "section": "Enabling floodplain routing",
    "text": "Enabling floodplain routing\nAs part of the local inertial model for river flow.\n\n1D floodplains\n[model]\nfloodplain_1d = true\n\n[input.lateral.river.floodplain]\nvolume = \"floodplain_volume\"\nn = \"floodplain_n\"\n\n[state.lateral.river.floodplain]\nq = \"q_floodplain\"\nh = \"h_floodplain\"\n\n\n2D floodplains\n[model]\nland_routing = \"local-inertial\"\n\n[input.lateral.river]\nbankfull_elevation = \"hydrodem_avg_D4\"\n\n[input.lateral.land]\nelevation = \"hydrodem_avg_D4\"\n\n[state.lateral.land]\nqx = \"qx_land\"\nqy = \"qy_land\"",
    "crumbs": [
      "User guide",
      "Supported options",
      "Different model configurations"
    ]
  },
  {
    "objectID": "user_guide/model_config.html#enabling-water-demand-and-allocation",
    "href": "user_guide/model_config.html#enabling-water-demand-and-allocation",
    "title": "Different model configurations",
    "section": "Enabling water demand and allocation",
    "text": "Enabling water demand and allocation\nThe model types sbm and sbm_gwf support water demand and allocation computations, in combination with the kinematic wave and local inertial runoff routing scheme for river and overland flow.\n# example of water demand and allocation input parameters as cyclic data\n[input]\ncyclic = [\"vertical.domestic.demand_gross\", \"vertical.domestic.demand_net\",\n\"vertical.industry.demand_gross\", \"vertical.industry.demand_net\",\n\"vertical.livestock.demand_gross\", \"vertical.livestock.demand_net\",\n\"vertical.paddy.irrigation_trigger\", \"vertical.nonpaddy.irrigation_trigger\",]\n\n[model.water_demand]\ndomestic = true     # optional, default is \"false\"\nindustry = true     # optional, default is \"false\"\nlivestock = true    # optional, default is \"false\"\npaddy = true        # optional, default is \"false\"\nnonpaddy = true     # optional, default is \"false\"\n\n[input.vertical.allocation]\nareas = \"allocation_areas\"\nfrac_sw_used = \"SurfaceWaterFrac\"\n\n[input.vertical.domestic]\ndemand_gross = \"dom_gross\"\ndemand_net = \"dom_net\"\n\n[input.vertical.industry]\ndemand_gross = \"ind_gross\"\ndemand_net = \"ind_net\"\n\n[input.vertical.livestock]\ndemand_gross = \"lsk_gross\"\ndemand_net = \"lsk_net\"\n\n[input.vertical.paddy]\nirrigation_areas = \"paddy_irrigation_areas\"\nirrigation_trigger = \"irrigation_trigger\"\n\n[input.vertical.nonpaddy]\nirrigation_areas = \"nonpaddy_irrigation_areas\"\nirrigation_trigger = \"irrigation_trigger\"\n\n# required if paddy is set to \"true\"\n[state.vertical.paddy]\nh = \"h_paddy\"",
    "crumbs": [
      "User guide",
      "Supported options",
      "Different model configurations"
    ]
  },
  {
    "objectID": "user_guide/fews.html",
    "href": "user_guide/fews.html",
    "title": "Run from Delft-FEWS",
    "section": "",
    "text": "Wflow integrates easily as part of an operational system by linking to the Delft-FEWS platform. Delft-FEWS integrates data and models, and is for example used in many active flood forecasting systems around the world.\nThis can be done without a model adapter that provides the interface between Delft-FEWS and an external model (or module). This is possible because time information in the TOML configuration file is optional and Delft-FEWS can import and export netCDF files. When time information is left out from the TOML configuration file, the starttime, endtime and timestepsecs (timestep) of the run is extracted from the netCDF forcing file by wflow.\nTo indicate that a wflow model runs from Delft-FEWS, the following setting needs to be specified in the main section of the TOML configuration file:\nfews_run = true  # optional, default value is false\nThis ensures that wflow offsets the time handling, to meet the expectations of Delft-FEWS.\nIt also uses a different format for the log file such that each log message takes up only one line. That meets the General Adapter logFile expectations, which then can get parsed with these Delft-FEWS log parsing settings:\n&lt;logFile&gt;\n    &lt;file&gt;log.txt&lt;/file&gt;\n    &lt;errorLinePattern &gt;* [Error] *&lt;/errorLinePattern &gt;\n    &lt;warningLinePattern&gt;* [Warn] *&lt;/warningLinePattern&gt;\n    &lt;infoLinePattern&gt;* [Info] *&lt;/infoLinePattern&gt;\n    &lt;debugLinePattern &gt;* [Debug] *&lt;/debugLinePattern &gt;\n&lt;/logFile&gt;\n\n\n\n Back to top",
    "crumbs": [
      "User guide",
      "Integrations",
      "Run from Delft-FEWS"
    ]
  },
  {
    "objectID": "user_guide/bmi.html",
    "href": "user_guide/bmi.html",
    "title": "Basic Model Interface (BMI)",
    "section": "",
    "text": "The Community Surface Dynamics Modeling System (CSMDS) has developed the Basic Model Interface (BMI). BMI consists of a set of standard control and query functions that can be added by a developer to the model code and makes a model both easier to learn and easier to couple with other software elements.\nFor more information see also: http://csdms.colorado.edu/wiki/BMI_Description\nCSDMS provides specifications for the languages C, C++, Fortran and Python. Wflow, written in the Julia programming language, makes use of the following Julia specification, based on BMI 2.0 version.\nFor the BMI implementation of wflow all grids are defined as unstructured grids, including the special cases scalar and points. While the input (forcing and model parameters) is structured (uniform rectilinear), internally wflow works with one dimensional arrays based on the active grid cells of the 2D model domain.",
    "crumbs": [
      "User guide",
      "Integrations",
      "Basic Model Interface (BMI)"
    ]
  },
  {
    "objectID": "user_guide/bmi.html#introduction",
    "href": "user_guide/bmi.html#introduction",
    "title": "Basic Model Interface (BMI)",
    "section": "",
    "text": "The Community Surface Dynamics Modeling System (CSMDS) has developed the Basic Model Interface (BMI). BMI consists of a set of standard control and query functions that can be added by a developer to the model code and makes a model both easier to learn and easier to couple with other software elements.\nFor more information see also: http://csdms.colorado.edu/wiki/BMI_Description\nCSDMS provides specifications for the languages C, C++, Fortran and Python. Wflow, written in the Julia programming language, makes use of the following Julia specification, based on BMI 2.0 version.\nFor the BMI implementation of wflow all grids are defined as unstructured grids, including the special cases scalar and points. While the input (forcing and model parameters) is structured (uniform rectilinear), internally wflow works with one dimensional arrays based on the active grid cells of the 2D model domain.",
    "crumbs": [
      "User guide",
      "Integrations",
      "Basic Model Interface (BMI)"
    ]
  },
  {
    "objectID": "user_guide/bmi.html#configuration",
    "href": "user_guide/bmi.html#configuration",
    "title": "Basic Model Interface (BMI)",
    "section": "Configuration",
    "text": "Configuration\nThe variables that wflow can exchange through BMI are based on the different model components and these components should be listed under the API section of the TOML configuration file of the model type. Below an example of this API section, that lists the vertical component and different lateral components:\n[API]\ncomponents = [\n  \"vertical\",\n  \"lateral.subsurface\",\n  \"lateral.land\",\n  \"lateral.river\",\n  \"lateral.river.reservoir\"\n]\nSee also:\nWflow.BMI.initialize\nWflow.BMI.get_input_var_names\nVariables with a third dimension, for example layer as part of the vertical SBM concept, are exposed as two-dimensional grids through the wflow BMI implementation. For these variables the index of this third dimension is required, by adding [k] to the variable name (k refers to the index of the third dimension). For example, the variable vertical.vwc[1] refers to the first soil layer of the vertical SBM concept.",
    "crumbs": [
      "User guide",
      "Integrations",
      "Basic Model Interface (BMI)"
    ]
  },
  {
    "objectID": "user_guide/bmi.html#couple-to-a-groundwater-model",
    "href": "user_guide/bmi.html#couple-to-a-groundwater-model",
    "title": "Basic Model Interface (BMI)",
    "section": "Couple to a groundwater model",
    "text": "Couple to a groundwater model\nFor the coupling of wflow_sbm (SBM + kinematic wave) with a groundwater model (e.g. MODFLOW) it is possible to run: - wflow_sbm in parts from the BMI, and - to switch off the lateral subsurface flow component of wflow_sbm.\nThe lateral subsurface component of wflow_sbm is not initialized by wflow when the [input.lateral.subsurface] part of the TOML file is not included. Then from the BMI it is possible to run first the recharge part of SBM:\nmodel = BMI.update(model, run=\"sbm_until_recharge\")\nand to exchange recharge and for example river waterlevels to the groundwater model. After the groundwater model update, and the exchange of groundwater head and for example drain and river flux to wflow_sbm, the SBM part that mainly determines exfiltration of water from the unsaturated store, and the kinematic wave for river - and overland flow can be run as follows:\nmodel = BMI.update(model, run=\"sbm_after_subsurfaceflow\")\nSee also:\nWflow.BMI.update",
    "crumbs": [
      "User guide",
      "Integrations",
      "Basic Model Interface (BMI)"
    ]
  },
  {
    "objectID": "model_docs/vertical/sediment.html",
    "href": "model_docs/vertical/sediment.html",
    "title": "Sediment",
    "section": "",
    "text": "Over the land, soil erosion, also called soil loss, is closely linked to the water cycle. The main processes governing sediment generation are splash erosion from rain droplets, and sheet and rill erosion from the shear stress caused by overland flow. The intensity of soil erosion by rain or ﬂow depends on the land and soil characteristics such as slope, land use or soil type. Once soil is eroded, the detached particles can be transported downslope by overland ﬂow. Along the transport pathways, soil particles can also be deposited due to a low flow velocity, a change of topography in depressions, footslopes or valley bottoms, and/or can be filtered and stopped by a change in vegetation such as ﬁeld boundaries.\nThe inland part of the sediment gathers these different processes, separated in a vertical structure for the soil loss and lateral structure for the transport in overland flow.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Sediment"
    ]
  },
  {
    "objectID": "model_docs/vertical/sediment.html#soil-erosion",
    "href": "model_docs/vertical/sediment.html#soil-erosion",
    "title": "Sediment",
    "section": "Soil Erosion",
    "text": "Soil Erosion\nThe first process to consider in sediment dynamics is the generation of sediments by land erosion. The main processes behind soil loss are rainfall erosion and overland flow erosion. In order to model such processes at a fine time and space scale, physics-based models such as ANSWERS and EUROSEM were chosen here.\nThe choice of rainfall erosion method is set up in the model section of the TOML:\n[model]\nrainerosmethod = \"answers\" # Rainfall erosion equation: [\"answers\", \"eurosem\"]\n\nRainfall erosion\nIn wflow_sediment, rainfall erosion can both be modelled using EUROSEM or ANSWERS equation. The main difference between the models is that EUROSEM uses a more physics-based approach based on the kinetic energy of the rain drops impacting the soil (Morgan et al, 1998), while ANSWERS is more empirical and uses parameters from the USLE model (Beasley et al, 1991).\nIn EUROSEM, rainfall erosion is modelled according to rainfall intensity and its kinetic energy when it reaches the soil according to equations developed by Brandt (1990). As the intensity of the rain kinetic energy depends on the length of the fall, rainfall intercepted by vegetation will then be reduced compared to direct throughfall. The kinetic energy of direct throughfall is estimated by (Morgan et al, 1998): \\[\n   \\subtext{\\mathrm{KE}}{direct} = 8.95 + 8.44\\,\\log_{10}(R_i)\n\\]\nwhere \\(\\SIb{\\subtext{\\mathrm{KE}}{direct}}{J m^{-2} mm^{-1}}\\) is the kinetic energy of direct throughfall and \\(\\SIb{R_i}{mm h^{-1}}\\) is rainfall intensity. If the rainfall is intercepted by vegetation and falls as leaf drainage, its kinetic energy is then reduced according to (Brandt, 1990): \\[\n   \\subtext{\\mathrm{KE}}{leaf} = 15.8\\,\\sqrt{H_p} - 5.87\n\\] where \\(\\SIb{\\subtext{\\mathrm{KE}}{leaf}}{J m^{-2} mm^{-1}}\\) is kinetic energy of leaf drainage and \\(\\SIb{H_p}{m}\\) is the effective canopy height (half of plant height). Canopy height can be derived from the global map from Simard & al. (2011) or by user input depending on the land use.\nKinetic energies from both direct throughfall and leaf drainage are then multiplied by the respective depths of direct throughfall and leaf drainage (mm) and added to get the total rainfall kinetic energy \\(\\mathrm{KE}\\). The soil detached by rainfall \\(\\SIb{D_R}{g m^{-2}}\\) is then: \\[\n   D_R = k\\,\\mathrm{KE}\\,e^{-\\varphi h}\n\\] where \\(\\SIb{k}{g J^{-1}}\\) is an index of the detachability of the soil, \\(\\SIb{\\mathrm{KE}}{J\nm^{-2}}\\) is the total rainfall kinetic energy, \\(\\SIb{h}{m}\\) is the surface runoff depth on the soil and \\(\\varphi\\) is an exponent varying between \\(0.9\\) and \\(3.1\\) used to reduce rainfall impact if the soil is already covered by water. As a simplification, Torri (1987) has shown that a value of \\(2.0\\) for \\(\\varphi\\) is representative enough for a wide range of soil conditions. The detachability of the soil \\(k\\) depends on the soil texture (proportion of clay, silt and sand content) and corresponding values are defined in EUROSEM user guide (Morgan et al, 1998). As a simplification, in wflow_sediment, the mean value of the detachability shown in the table below are used. Soil texture can for example be derived from the topsoil clay and silt content from SoilGrids (Hengl et al, 2017).\n\nMean detachability of soil depending on its texture (Morgan et al, 1998).\n\n\nTexture (USDA system)\nMean detachability \\(\\SIb{k}{g J^{-1}}\\)\n\n\n\n\nClay\n2.0\n\n\nClay Loam\n1.7\n\n\nSilt\n1.2\n\n\nSilt Loam\n1.5\n\n\nLoam\n2.0\n\n\nSandy Loam\n2.6\n\n\nLoamy Sand\n3.0\n\n\nFine Sand\n3.5\n\n\nSand\n1.9\n\n\n\nRainfall erosion is handled differently in ANSWERS. There, the impacts of vegetation and soil properties are handled through the USLE coefficients in the equation (Beasley et al, 1991): \\[\n   D_R = 0.108 \\, \\subtext{C}{USLE} \\, \\subtext{K}{USLE} \\, A_i \\, R_i^2\n\\] where \\(\\SIb{D_R}{kg min^{-1}}\\) is the soil detachment by rainfall, \\(\\subtext{C}{USLE}\\) is the soil cover-management factor from the USLE equation, \\(\\subtext{K}{USLE}\\) is the soil erodibility factor from the USLE equation, \\(\\SIb{A_i}{m^2}\\) is the area of the cell and \\(\\SIb{R_i}{mm\\;min^{-1}}\\) is the rainfall intensity. There are several methods available to estimate the \\(C\\) and \\(K\\) factors from the USLE. They can come from user input maps, for example maps resulting from Panagos & al.’s recent studies for Europe (Panagos et al, 2015) (Ballabio et al, 2016). To get an estimate of the \\(C\\) factor globally, the other method is to estimate \\(C\\) values for the different land use type in from global land cover maps (e.g. GlobCover). An example is given for the global land cover map GlobCover, summed up in the table below, the values come from a literature study including Panagos et al.’s review (2015), Gericke & al. (2015), Mansoor & al. (2013), Chadli et al. (2016), de Vente et al. (2009), Borrelli et al. (2014), Yang et al. (2003) and Bosco et al. (2015).\nThe other methods to estimate the USLE \\(K\\) factor are to use either topsoil composition or topsoil geometric mean diameter. \\(K\\) estimation from topsoil composition is estimated with the equation developed in the EPIC model (Williams et al, 1983): \\[\n\\begin{gathered}\n   \\subtext{K}{USLE} = \\left[ 0.2 + 0.3\\exp\\left(-0.0256\\;\\mathrm{SAN}\\frac{(1-\\mathrm{SIL})}{100}\\right) \\right]\n   \\left(\\frac{\\mathrm{SIL}}{\\mathrm{CLA}+\\mathrm{SIL}}\\right)^{0.3} \\\\\n   \\left(1-\\frac{0.25\\;\\mathrm{OC}}{\\mathrm{OC}+e^{3.72-2.95\\;\\mathrm{OC}}}\\right)\\left(1-\\frac{0.75\\;\\mathrm{SN}}{\\mathrm{SN}+e^{-5.51+22.9\\;\\mathrm{SN}}}\\right)\n\\end{gathered}\n\\] where \\(\\SIb{\\mathrm{CLA}}{\\%}\\), \\(\\SIb{\\mathrm{SIL}}{\\%}\\), \\(\\SIb{\\mathrm{SAN}}{\\%}\\) are respectively the clay, silt and sand fractions of the topsoil, \\(\\SIb{OC}{\\%}\\) is the topsoil organic carbon content and \\(\\mathrm{SN} = 1-\\mathrm{SAN}/100\\). These soil parameters can be derived for example from the SoilGrids dataset. The \\(K\\) factor can also be estimated from the soil mean geometric diameter using the formulation from the RUSLE guide by Renard & al. (1997): \\[\n   \\subtext{K}{USLE} = 0.0034 + 0.0405\\exp\\left(-\\dfrac{1}{2}\\left(\\dfrac{\\log_{10}(D_g)+1.659}{0.7101}\\right)^2\\right)\n\\] where \\(D_g\\) is the soil geometric mean diameter (mm) estimated from topsoil clay, silt, sand fraction.\n\nEstimation of USLE C factor per Globcover land use type\n\n\n\n\n\n\n\nGlobCover Value\nGlobcover label\n\\(\\subtext{C}{USLE}\\)\n\n\n\n\n11\nPost-flooding or irrigated croplands (or aquatic)\n0.2\n\n\n14\nRainfed croplands\n0.35\n\n\n20\nMosaic cropland (50-70%) vegetation (grassland/shrubland/forest) (20-50%)\n0.27\n\n\n30\nMosaic vegetation (grassland/shrubland/forest) (50-70%) / cropland (20-50%)\n0.25\n\n\n40\nClosed to open (&gt;15%) broadleaved evergreen or semi-deciduous forest (&gt;5m)\n0.0065\n\n\n50\nClosed (&gt;40%) broadleaved deciduous forest (&gt;5m)\n0.001\n\n\n60\nOpen (15-40%) broadleaved deciduous forest/woodland (&gt;5m)\n0.01\n\n\n70\nClosed (&gt;40%) needleleaved evergreen forest (&gt;5m)\n0.001\n\n\n90\nOpen (15-40%) needleleaved deciduous or evergreen forest (&gt;5m)\n0.01\n\n\n100\nClosed to open (&gt;15%) mixed broadleaved and needleleaved forest (&gt;5m)\n0.02\n\n\n110\nMosaic forest or shrubland (50-70%) / grassland (20-50%)\n0.015\n\n\n120\nMosaic grassland (50-70%) / forest or shrubland (20-50%)\n0.03\n\n\n130\nClosed to open (&gt;15%) (broadleaved or needleleaved, evergreen or deciduous) shrubland (&lt;5m)\n0.035\n\n\n140\nClosed to open (&gt;15%) herbaceous vegetation (grassland, savannas or lichens/mosses)\n0.05\n\n\n150\nSparse (&lt;15%) vegetation\n0.35\n\n\n160\nClosed to open (&gt;15%) broadleaved forest regularly flooded (semi-permanently or temporarily) - Fresh or brackish water\n0.001\n\n\n170\nClosed (&gt;40%) broadleaved forest or shrubland permanently flooded - Saline or brackish water\n0.0005\n\n\n180\nClosed to open (&gt;15%) grassland or woody vegetation on regularly flooded or waterlogged soil - Fresh, brackish or saline water\n0.04\n\n\n190\nArtificial surfaces and associated areas (Urban areas &gt;50%)\n0.0\n\n\n200\nBare areas\n0.0\n\n\n210\nWater bodies\n0.0\n\n\n220\nPermanent snow and ice\n0.0\n\n\n230\nNo data (burnt areas, clouds,…)\n0.0\n\n\n\n\n\nOverland flow erosion\nOverland flow (or surface runoff) erosion is induced by the strength of the shear stress of the surface water on the soil. As in rainfall erosion, the effect of the flow shear stress can be reduced by the soil vegetation or by the soil properties. In wflow_sediment, soil detachment by overland flow is modelled as in ANSWERS with (Beasley et al, 1991): \\[\n   D_G = 0.90 \\, \\subtext{C}{USLE} \\, \\subtext{K}{USLE} \\, A_i \\, S \\, q\n\\] where \\(\\SIb{D_F}{kg\\;min^{-1}}\\) is soil detachment by flow, \\(\\subtext{C}{USLE}\\) and \\(\\subtext{K}{USLE}\\) are the USLE cover and soil erodibility factors, \\(\\SIb{A_i}{m^2}\\) is the cell area, \\(S\\) is the slope gradient and \\(\\SIb{q}{m^2 min^{-1}}\\) is the overland flow rate per unit width. The USLE \\(C\\) and \\(K\\) factors can be estimated with the same methods as for rainfall erosion and here the slope gradient is obtained from the sinus rather than the tangent of the slope angle.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Sediment"
    ]
  },
  {
    "objectID": "model_docs/vertical/sediment.html#delivery-to-the-river-system",
    "href": "model_docs/vertical/sediment.html#delivery-to-the-river-system",
    "title": "Sediment",
    "section": "Delivery to the river system",
    "text": "Delivery to the river system\nOnce soil is detached, it can be transported by overland flow and reach the river system. This process is described in Sediment Flux in overland flow.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Sediment"
    ]
  },
  {
    "objectID": "model_docs/vertical/sediment.html#references",
    "href": "model_docs/vertical/sediment.html#references",
    "title": "Sediment",
    "section": "References",
    "text": "References\n\nD.B Beasley and L.F Huggins. ANSWERS - Users Manual. Technical report, EPA, 1991.\nP. Borrelli, M. Märker, P. Panagos, and B. Schütt. Modeling soil erosion and river sediment yield for an intermountain drainage basin of the Central Apennines, Italy. Catena, 114:45-58,\n\n10.1016/j.catena.2013.10.007\n\nC. Bosco, D. De Rigo, O. Dewitte, J. Poesen, and P. Panagos. Modelling soil erosion at European scale: Towards harmonization and reproducibility. Natural Hazards and Earth System Sciences, 15(2):225-245, 2015. 10.5194/nhess-15-225-2015\nC.J Brandt. Simulation of the size distribution and erosivity of raindrops and throughfall drops. Earth Surface Processes and Landforms, 15(8):687-698, dec 1990.\nK. Chadli. Estimation of soil loss using RUSLE model for Sebou watershed (Morocco). Modeling Earth Systems and Environment, 2(2):51, 2016. 10.1007/s40808-016-0105-y\nG R Foster. Modeling the erosion process. Hydrologic modeling of small watersheds, pages 295-380, 1982.\nA. Gericke. Soil loss estimation and empirical relationships for sediment delivery ratios of European river catchments. International Journal of River Basin Management, 2015. 10.1080/15715124.2014.1003302\nL.D.K. Mansoor, M.D. Matlock, E.C. Cummings, and L.L. Nalley. Quantifying and mapping multiple ecosystem services change in West Africa. Agriculture, Ecosystems and Environment, 165:6-18, 2013. 10.1016/j.agee.2012.12.001\nQ Morgan, J.N Smith, R.E Govers, G Poesen, J.W.A Auerswald, K Chisci, G Torri, D Styczen, and M E Folly. The European soil erosion model (EUROSEM): documentation and user guide. Technical report, 1998.\nS.L Neitsch, J.G Arnold, J.R Kiniry, and J.R Williams. SWAT Theoretical Documentation Version\n\nTexas Water Resources Institute, pages 1-647, 2011. 10.1016/j.scitotenv.2015.11.063\n\nP. Panagos, P. Borrelli, K. Meusburger, C. Alewell, E. Lugato, and L. Montanarella. Estimating the soil erosion cover-management factor at the European scale. Land Use Policy, 48:38-50, 2015. 10.1016/j.landusepol.2015.05.021\nK Renard, Gr Foster, Ga Weesies, Dk McCool, and Dc Yoder. Predicting soil erosion by water: a guide to conservation planning with the Revised Universal Soil Loss Equation (RUSLE). Washington, 1997.\nD. Torri, M. Sfalanga, and M. Del Sette. Splash detachment: Runoff depth and soil cohesion. Catena, 14(1-3):149-155, 1987. 10.1016/S0341-8162(87)80013-9\nJ. de Vente, J. Poesen, G. Govers, and C. Boix-Fayos. The implications of data selection for regional erosion and sediment yield modelling. Earth Surface Processes and Landforms, 34(15):1994-2007, 2009. 10.1002/esp.1884\nG. Verstraeten and J. Poesen. Estimating trap efficiency of small reservoirs and ponds: methods and implications for the assessment of sediment yield. Progress in Physical Geography, 24(2):219-251, 2000. 10.1177/030913330002400204\nO. Vigiak, A. Malago, F. Bouraoui, M. Vanmaercke, and J. Poesen. Adapting SWAT hillslope erosion model to predict sediment concentrations and yields in large Basins. Science of the Total Environment, 538:855-875, 2015. 10.1016/j.scitotenv.2015.08.095\nJ.R. Williams, K.G. Renard, and P.T. Dyke. EPIC A new method for assessing erosion’s effect on soil productivity. Journal of Soil and Water Conservation, 38(5):381-383, 1983.\nD. Yang, S. Kanae, T. Oki, T. Koike, and K. Musiake. Global potential soil erosion with reference to land use and climate changes. Hydrological Processes, 17(14):2913-2928, 2003. 10.1002/hyp.1441",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Sediment"
    ]
  },
  {
    "objectID": "model_docs/parameters_vertical.html",
    "href": "model_docs/parameters_vertical.html",
    "title": "Vertical concepts",
    "section": "",
    "text": "The Table below shows the parameters (fields) of struct SBM, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF), and can be listed in the TOML configuration file under [input.vertical], to map the internal model parameter to the external netCDF variable. For some input parameters the parameter listed under [input.vertical] is not equal to the internal model parameter, these are listed in the Table below between parentheses after the internal model parameter. For example, internal model parameter sl is mapped as follows in the TOML file to the external netCDF variable Sl:\n[input.vertical]\nspecific_leaf = \"Sl\"\nDifferent vertical hydraulic conductivity depth profiles: exponential (default), exponential_constant, layered and layered_exponential can be provided through the TOML file. Below an example for the exponential_constant profile:\n[input.vertical]\nksat_profile = \"exponential_constant\"\nFor the exponential profile the input parameters kv_0 and f are used. For the exponential_constant profile kv_0 and f are used, and z_exp is required as input. For the layered profile, input parameter kv is used, and for the layered_exponential profile kv is used and z_layered is required as input.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\ncfmax\ndegree-day factor\nmm ᵒC\\(^{-1}\\) Δt\\(^{-1}\\)\n3.75653 mm ᵒC\\(^{-1}\\) day\\(^{-1}\\)\n\n\ntt\nthreshold temperature for snowfall\nᵒC\n0.0\n\n\ntti\nthreshold temperature interval length\nᵒC\n1.0\n\n\nttm\nthreshold temperature for snowmelt\nᵒC\n0.0\n\n\nwhc\nwater holding capacity as fraction of current snow pack\n-\n0.1\n\n\nw_soil\nsoil temperature smooth factor\n-\n0.1125\n\n\ncf_soil\ncontrols soil infiltration reduction factor when soil is frozen\n-\n0.038\n\n\ng_ttm\nthreshold temperature for glacier melt\nᵒC\n0.0\n\n\ng_cfmax\nDegree-day factor for glacier\nmm ᵒC\\(^{-1}\\) Δt\\(^{-1}\\)\n3.0 mm ᵒC\\(^{-1}\\) day\\(^{-1}\\)\n\n\ng_sifrac\nfraction of the snowpack on top of the glacier converted into ice\nΔt\\(^{-1}\\)\n0.001 day\\(^{-1}\\)\n\n\nglacierfrac\nfraction covered by a glacier\n-\n0.0\n\n\nglacierstore\nwater within the glacier\nmm\n5500.0\n\n\ntheta_s\nsaturated water content (porosity)\n-\n0.6\n\n\ntheta_r\nresidual water content\n-\n0.01\n\n\nkv_0\nVertical hydraulic conductivity at soil surface\nmm Δt\\(^{-1}\\)\n3000.0 mm day\\(^{-1}\\)\n\n\nkv\nVertical hydraulic conductivity per soil layer\nmm Δt\\(^{-1}\\)\n1000.0 mm day\\(^{-1}\\)\n\n\nf\nscaling parameter (controls exponential decline of kv_0)\nmm\\(^{-1}\\)\n0.001\n\n\nz_exp\nDepth from soil surface for which exponential decline of kv_0 is valid\nmm\n-\n\n\nz_layered\nDepth from soil surface for which layered profile (of layered_exponential) is valid\nmm\n-\n\n\nhb\nair entry pressure of soil (Brooks-Corey)\ncm\n-10.0\n\n\nsoilthickness\nsoil thickness\nmm\n2000.0\n\n\ninfiltcappath\ninfiltration capacity of the compacted areas\nmm Δt\\(^{-1}\\)\n10.0 mm day\\(^{-1}\\)\n\n\ninfiltcapsoil\nsoil infiltration capacity\nmm Δt\\(^{-1}\\)\n100.0 mm day\\(^{-1}\\)\n\n\nmaxleakage\nmaximum leakage from saturated zone\nmm Δt\\(^{-1}\\)\n0.0 mm day\\(^{-1}\\)\n\n\nc\nBrooks-Corey power coefficient for each soil layer\n-\n10.0\n\n\nkvfrac\nmultiplication factor applied to kv_z (vertical flow)\n-\n1.0\n\n\nwaterfrac\nfraction of open water (excluding rivers)\n-\n0.0\n\n\npathfrac\nfraction of compacted area\n-\n0.01\n\n\nrootingdepth\nrooting depth\nmm\n750.0\n\n\nrootfraction\nfraction of the root length density in each soil layer\n-\n-\n\n\nh1\nsoil water pressure head h1 of the root water uptake reduction function (Feddes)\ncm\n0.0 cm\n\n\nh2\nsoil water pressure head h2 of the root water uptake reduction function (Feddes)\ncm\n-100.0 cm\n\n\nh3_high\nsoil water pressure head h3_high of the root water uptake reduction function (Feddes)\ncm\n-400.0 cm\n\n\nh3_low\nsoil water pressure head h3_low of the root water uptake reduction function (Feddes)\ncm\n-1000.0 cm\n\n\nh4\nsoil water pressure head h4 of the root water uptake reduction function (Feddes)\ncm\n-15849.0 cm\n\n\nalpha_h1\nroot water uptake reduction at soil water pressure head h1 (0.0 or 1.0)\n-\n1.0\n\n\nrootdistpar\ncontrols how roots are linked to water table\n-\n-500.0\n\n\ncap_hmax\nwater depth beyond which capillary flux ceases\nmm\n2000.0\n\n\ncap_n\ncoefficient controlling capillary rise\n-\n2.0\n\n\nkc\ncrop coefficient Kc\n-\n1.0\n\n\nsl (specific_leaf)\nspecific leaf storage\nmm\n-\n\n\nswood (storage_wood)\nstorage woody part of vegetation\nmm\n-\n\n\nkext\nextinction coefficient (to calculate canopy gap fraction)\n-\n-\n\n\ncmax\nmaximum canopy storage\nmm\n1.0\n\n\ne_r (eoverr)\nGash interception model parameter\n-\n0.1\n\n\ncanopygapfraction\ncanopy gap fraction\n-\n0.1\n\n\ndt\nmodel time step\ns\n-\n\n\nmaxlayers\nmaximum number of soil layers\n-\n-\n\n\nn\nnumber of grid cells\n-\n-\n\n\nnlayers\nnumber of soil layers\n-\n-\n\n\nn_unsatlayers\nnumber of unsaturated soil layers\n-\n-\n\n\nnlayers_kv\nnumber of soil layers with vertical hydraulic conductivity value kv\n-\n-\n\n\nriverfrac\nfraction of river\n-\n-\n\n\nact_thickl\nthickness of soil layers\nmm\n-\n\n\nsumlayers\ncumulative sum of soil layers thickness, starting at soil surface\nmm\n-\n\n\nstemflow\nstemflow\nmm Δt\\(^{-1}\\)\n-\n\n\nthroughfall\nthroughfall\nmm Δt\\(^{-1}\\)\n-\n\n\nustorelayerdepth\namount of water in the unsaturated store, per layer\nmm\n-\n\n\nsatwaterdepth\nsaturated store\nmm\n-\n\n\nzi\npseudo-water table depth (top of the saturated zone)\nmm\n-\n\n\nsoilwatercapacity\nsoilwater capacity\nmm\n-\n\n\ncanopystorage\ncanopy storage\nmm\n-\n\n\nprecipitation\nprecipitation\nmm Δt\\(^{-1}\\)\n-\n\n\ntemperature\ntemperature\nᵒC\n-\n\n\npotential_evaporation\npotential reference evapotranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\npottrans\ninterception subtracted from potential evapotranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\ntranspiration\ntranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\nae_ustore\nactual evaporation from unsaturated store\nmm Δt\\(^{-1}\\)\n-\n\n\ninterception\ninterception loss by evaporation\nmm Δt\\(^{-1}\\)\n-\n\n\nsoilevap\ntotal soil evaporation from unsaturated and saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nsoilevapsat\nsoil evaporation from saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nactcapflux\nactual capillary rise\nmm Δt\\(^{-1}\\)\n-\n\n\nactevapsat\nactual transpiration from saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nactevap\ntotal actual evapotranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\nrunoff_river\nrunoff from river based on riverfrac\nmm Δt\\(^{-1}\\)\n-\n\n\nrunoff_land\nrunoff from land based on waterfrac\nmm Δt\\(^{-1}\\)\n-\n\n\nae_openw_l\nactual evaporation from open water (land)\nmm Δt\\(^{-1}\\)\n-\n\n\nae_openw_r\nactual evaporation from river\nmm Δt\\(^{-1}\\)\n-\n\n\nnet_runoff_river\nnet runoff from river (runoff_river - ae_openw_r)\nmm Δt\\(^{-1}\\)\n-\n\n\navail_forinfilt\nwater available for infiltration\nmm Δt\\(^{-1}\\)\n-\n\n\nactinfilt\nactual infiltration into the unsaturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\nactinfiltsoil\nactual infiltration into non-compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\nactinfiltpath\nactual infiltration into compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\ninfiltsoilpath\ninfiltration into the unsaturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\ninfiltexcess\ninfiltration excess water\nmm Δt\\(^{-1}\\)\n-\n\n\nexcesswater\nwater that cannot infiltrate due to saturated soil (saturation excess)\nmm Δt\\(^{-1}\\)\n-\n\n\nexfiltsatwater\nwater exfiltrating during saturation excess conditions\nmm Δt\\(^{-1}\\)\n-\n\n\nexfiltustore\nwater exfiltrating from unsaturated store because of change in water table\nmm Δt\\(^{-1}\\)\n-\n\n\nexcesswatersoil\nexcess water for non-compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\nexcesswaterpath\nexcess water for compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\nrunoff\ntotal surface runoff from infiltration and saturation excess\nmm Δt\\(^{-1}\\)\n-\n\n\nnet_runoff\nnet surface runoff (runoff - ae_openw_l)\nmm Δt\\(^{-1}\\)\n-\n\n\nvwc\nvolumetric water content per soil layer (including theta_r and saturated zone)\n-\n-\n\n\nvwc_perc\nvolumetric water content per soil layer (including theta_r and saturated zone)\n%\n-\n\n\nrootstore\nroot water storage in unsaturated and saturated zone (excluding theta_r)\nmm\n-\n\n\nvwc_root\nvolumetric water content in root zone (including theta_r and saturated zone)\n-\n-\n\n\nvwc_percroot\nvolumetric water content in root zone (including theta_r and saturated zone)\n%\n-\n\n\nustoredepth\ntotal amount of available water in the unsaturated zone\nmm\n-\n\n\ntransfer\ndownward flux from unsaturated to saturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\nrecharge\nnet recharge to saturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\nactleakage\nactual leakage from saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nsnow\nsnow storage\nmm\n-\n\n\nsnowwater\nliquid water content in the snow pack\nmm\n-\n\n\nrainfallplusmelt\nsnowmelt + precipitation as rainfall\nmm Δt\\(^{-1}\\)\n-\n\n\ntsoil\ntop soil temperature\nᵒC\n-\n\n\nleaf_area_index\nleaf area index\nm\\(^2\\) m\\(^{-2}\\)\n-\n\n\nwaterlevel_land\nwater level land\nmm\n-\n\n\nwaterlevel_river\nwater level river\nmm\n-\n\n\ntotal_storage\ntotal water storage (excluding floodplains, lakes and reservoirs)\nmm\n-\n\n\npaddy\noptional paddy (rice) fields of type Paddy (water demand and irrigation)\n-\n-\n\n\nnonpaddy\noptional non-paddy fields of type NonPaddy (water demand and irrigation)\n-\n-\n\n\ndomestic\noptional domestic water demand of type NonIrrigationDemand\n-\n-\n\n\nlivestock\noptional livestock water demand of type NonIrrigationDemand\n-\n-\n\n\nindustry\noptional industry water demand of type NonIrrigationDemand\n-\n-\n\n\nallocation\noptional water allocation of type AllocationLand\n-\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Vertical concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_vertical.html#sbm",
    "href": "model_docs/parameters_vertical.html#sbm",
    "title": "Vertical concepts",
    "section": "",
    "text": "The Table below shows the parameters (fields) of struct SBM, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF), and can be listed in the TOML configuration file under [input.vertical], to map the internal model parameter to the external netCDF variable. For some input parameters the parameter listed under [input.vertical] is not equal to the internal model parameter, these are listed in the Table below between parentheses after the internal model parameter. For example, internal model parameter sl is mapped as follows in the TOML file to the external netCDF variable Sl:\n[input.vertical]\nspecific_leaf = \"Sl\"\nDifferent vertical hydraulic conductivity depth profiles: exponential (default), exponential_constant, layered and layered_exponential can be provided through the TOML file. Below an example for the exponential_constant profile:\n[input.vertical]\nksat_profile = \"exponential_constant\"\nFor the exponential profile the input parameters kv_0 and f are used. For the exponential_constant profile kv_0 and f are used, and z_exp is required as input. For the layered profile, input parameter kv is used, and for the layered_exponential profile kv is used and z_layered is required as input.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\ncfmax\ndegree-day factor\nmm ᵒC\\(^{-1}\\) Δt\\(^{-1}\\)\n3.75653 mm ᵒC\\(^{-1}\\) day\\(^{-1}\\)\n\n\ntt\nthreshold temperature for snowfall\nᵒC\n0.0\n\n\ntti\nthreshold temperature interval length\nᵒC\n1.0\n\n\nttm\nthreshold temperature for snowmelt\nᵒC\n0.0\n\n\nwhc\nwater holding capacity as fraction of current snow pack\n-\n0.1\n\n\nw_soil\nsoil temperature smooth factor\n-\n0.1125\n\n\ncf_soil\ncontrols soil infiltration reduction factor when soil is frozen\n-\n0.038\n\n\ng_ttm\nthreshold temperature for glacier melt\nᵒC\n0.0\n\n\ng_cfmax\nDegree-day factor for glacier\nmm ᵒC\\(^{-1}\\) Δt\\(^{-1}\\)\n3.0 mm ᵒC\\(^{-1}\\) day\\(^{-1}\\)\n\n\ng_sifrac\nfraction of the snowpack on top of the glacier converted into ice\nΔt\\(^{-1}\\)\n0.001 day\\(^{-1}\\)\n\n\nglacierfrac\nfraction covered by a glacier\n-\n0.0\n\n\nglacierstore\nwater within the glacier\nmm\n5500.0\n\n\ntheta_s\nsaturated water content (porosity)\n-\n0.6\n\n\ntheta_r\nresidual water content\n-\n0.01\n\n\nkv_0\nVertical hydraulic conductivity at soil surface\nmm Δt\\(^{-1}\\)\n3000.0 mm day\\(^{-1}\\)\n\n\nkv\nVertical hydraulic conductivity per soil layer\nmm Δt\\(^{-1}\\)\n1000.0 mm day\\(^{-1}\\)\n\n\nf\nscaling parameter (controls exponential decline of kv_0)\nmm\\(^{-1}\\)\n0.001\n\n\nz_exp\nDepth from soil surface for which exponential decline of kv_0 is valid\nmm\n-\n\n\nz_layered\nDepth from soil surface for which layered profile (of layered_exponential) is valid\nmm\n-\n\n\nhb\nair entry pressure of soil (Brooks-Corey)\ncm\n-10.0\n\n\nsoilthickness\nsoil thickness\nmm\n2000.0\n\n\ninfiltcappath\ninfiltration capacity of the compacted areas\nmm Δt\\(^{-1}\\)\n10.0 mm day\\(^{-1}\\)\n\n\ninfiltcapsoil\nsoil infiltration capacity\nmm Δt\\(^{-1}\\)\n100.0 mm day\\(^{-1}\\)\n\n\nmaxleakage\nmaximum leakage from saturated zone\nmm Δt\\(^{-1}\\)\n0.0 mm day\\(^{-1}\\)\n\n\nc\nBrooks-Corey power coefficient for each soil layer\n-\n10.0\n\n\nkvfrac\nmultiplication factor applied to kv_z (vertical flow)\n-\n1.0\n\n\nwaterfrac\nfraction of open water (excluding rivers)\n-\n0.0\n\n\npathfrac\nfraction of compacted area\n-\n0.01\n\n\nrootingdepth\nrooting depth\nmm\n750.0\n\n\nrootfraction\nfraction of the root length density in each soil layer\n-\n-\n\n\nh1\nsoil water pressure head h1 of the root water uptake reduction function (Feddes)\ncm\n0.0 cm\n\n\nh2\nsoil water pressure head h2 of the root water uptake reduction function (Feddes)\ncm\n-100.0 cm\n\n\nh3_high\nsoil water pressure head h3_high of the root water uptake reduction function (Feddes)\ncm\n-400.0 cm\n\n\nh3_low\nsoil water pressure head h3_low of the root water uptake reduction function (Feddes)\ncm\n-1000.0 cm\n\n\nh4\nsoil water pressure head h4 of the root water uptake reduction function (Feddes)\ncm\n-15849.0 cm\n\n\nalpha_h1\nroot water uptake reduction at soil water pressure head h1 (0.0 or 1.0)\n-\n1.0\n\n\nrootdistpar\ncontrols how roots are linked to water table\n-\n-500.0\n\n\ncap_hmax\nwater depth beyond which capillary flux ceases\nmm\n2000.0\n\n\ncap_n\ncoefficient controlling capillary rise\n-\n2.0\n\n\nkc\ncrop coefficient Kc\n-\n1.0\n\n\nsl (specific_leaf)\nspecific leaf storage\nmm\n-\n\n\nswood (storage_wood)\nstorage woody part of vegetation\nmm\n-\n\n\nkext\nextinction coefficient (to calculate canopy gap fraction)\n-\n-\n\n\ncmax\nmaximum canopy storage\nmm\n1.0\n\n\ne_r (eoverr)\nGash interception model parameter\n-\n0.1\n\n\ncanopygapfraction\ncanopy gap fraction\n-\n0.1\n\n\ndt\nmodel time step\ns\n-\n\n\nmaxlayers\nmaximum number of soil layers\n-\n-\n\n\nn\nnumber of grid cells\n-\n-\n\n\nnlayers\nnumber of soil layers\n-\n-\n\n\nn_unsatlayers\nnumber of unsaturated soil layers\n-\n-\n\n\nnlayers_kv\nnumber of soil layers with vertical hydraulic conductivity value kv\n-\n-\n\n\nriverfrac\nfraction of river\n-\n-\n\n\nact_thickl\nthickness of soil layers\nmm\n-\n\n\nsumlayers\ncumulative sum of soil layers thickness, starting at soil surface\nmm\n-\n\n\nstemflow\nstemflow\nmm Δt\\(^{-1}\\)\n-\n\n\nthroughfall\nthroughfall\nmm Δt\\(^{-1}\\)\n-\n\n\nustorelayerdepth\namount of water in the unsaturated store, per layer\nmm\n-\n\n\nsatwaterdepth\nsaturated store\nmm\n-\n\n\nzi\npseudo-water table depth (top of the saturated zone)\nmm\n-\n\n\nsoilwatercapacity\nsoilwater capacity\nmm\n-\n\n\ncanopystorage\ncanopy storage\nmm\n-\n\n\nprecipitation\nprecipitation\nmm Δt\\(^{-1}\\)\n-\n\n\ntemperature\ntemperature\nᵒC\n-\n\n\npotential_evaporation\npotential reference evapotranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\npottrans\ninterception subtracted from potential evapotranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\ntranspiration\ntranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\nae_ustore\nactual evaporation from unsaturated store\nmm Δt\\(^{-1}\\)\n-\n\n\ninterception\ninterception loss by evaporation\nmm Δt\\(^{-1}\\)\n-\n\n\nsoilevap\ntotal soil evaporation from unsaturated and saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nsoilevapsat\nsoil evaporation from saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nactcapflux\nactual capillary rise\nmm Δt\\(^{-1}\\)\n-\n\n\nactevapsat\nactual transpiration from saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nactevap\ntotal actual evapotranspiration\nmm Δt\\(^{-1}\\)\n-\n\n\nrunoff_river\nrunoff from river based on riverfrac\nmm Δt\\(^{-1}\\)\n-\n\n\nrunoff_land\nrunoff from land based on waterfrac\nmm Δt\\(^{-1}\\)\n-\n\n\nae_openw_l\nactual evaporation from open water (land)\nmm Δt\\(^{-1}\\)\n-\n\n\nae_openw_r\nactual evaporation from river\nmm Δt\\(^{-1}\\)\n-\n\n\nnet_runoff_river\nnet runoff from river (runoff_river - ae_openw_r)\nmm Δt\\(^{-1}\\)\n-\n\n\navail_forinfilt\nwater available for infiltration\nmm Δt\\(^{-1}\\)\n-\n\n\nactinfilt\nactual infiltration into the unsaturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\nactinfiltsoil\nactual infiltration into non-compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\nactinfiltpath\nactual infiltration into compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\ninfiltsoilpath\ninfiltration into the unsaturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\ninfiltexcess\ninfiltration excess water\nmm Δt\\(^{-1}\\)\n-\n\n\nexcesswater\nwater that cannot infiltrate due to saturated soil (saturation excess)\nmm Δt\\(^{-1}\\)\n-\n\n\nexfiltsatwater\nwater exfiltrating during saturation excess conditions\nmm Δt\\(^{-1}\\)\n-\n\n\nexfiltustore\nwater exfiltrating from unsaturated store because of change in water table\nmm Δt\\(^{-1}\\)\n-\n\n\nexcesswatersoil\nexcess water for non-compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\nexcesswaterpath\nexcess water for compacted fraction\nmm Δt\\(^{-1}\\)\n-\n\n\nrunoff\ntotal surface runoff from infiltration and saturation excess\nmm Δt\\(^{-1}\\)\n-\n\n\nnet_runoff\nnet surface runoff (runoff - ae_openw_l)\nmm Δt\\(^{-1}\\)\n-\n\n\nvwc\nvolumetric water content per soil layer (including theta_r and saturated zone)\n-\n-\n\n\nvwc_perc\nvolumetric water content per soil layer (including theta_r and saturated zone)\n%\n-\n\n\nrootstore\nroot water storage in unsaturated and saturated zone (excluding theta_r)\nmm\n-\n\n\nvwc_root\nvolumetric water content in root zone (including theta_r and saturated zone)\n-\n-\n\n\nvwc_percroot\nvolumetric water content in root zone (including theta_r and saturated zone)\n%\n-\n\n\nustoredepth\ntotal amount of available water in the unsaturated zone\nmm\n-\n\n\ntransfer\ndownward flux from unsaturated to saturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\nrecharge\nnet recharge to saturated zone\nmm Δt\\(^{-1}\\)\n-\n\n\nactleakage\nactual leakage from saturated store\nmm Δt\\(^{-1}\\)\n-\n\n\nsnow\nsnow storage\nmm\n-\n\n\nsnowwater\nliquid water content in the snow pack\nmm\n-\n\n\nrainfallplusmelt\nsnowmelt + precipitation as rainfall\nmm Δt\\(^{-1}\\)\n-\n\n\ntsoil\ntop soil temperature\nᵒC\n-\n\n\nleaf_area_index\nleaf area index\nm\\(^2\\) m\\(^{-2}\\)\n-\n\n\nwaterlevel_land\nwater level land\nmm\n-\n\n\nwaterlevel_river\nwater level river\nmm\n-\n\n\ntotal_storage\ntotal water storage (excluding floodplains, lakes and reservoirs)\nmm\n-\n\n\npaddy\noptional paddy (rice) fields of type Paddy (water demand and irrigation)\n-\n-\n\n\nnonpaddy\noptional non-paddy fields of type NonPaddy (water demand and irrigation)\n-\n-\n\n\ndomestic\noptional domestic water demand of type NonIrrigationDemand\n-\n-\n\n\nlivestock\noptional livestock water demand of type NonIrrigationDemand\n-\n-\n\n\nindustry\noptional industry water demand of type NonIrrigationDemand\n-\n-\n\n\nallocation\noptional water allocation of type AllocationLand\n-\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Vertical concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_vertical.html#water-demand-and-allocation",
    "href": "model_docs/parameters_vertical.html#water-demand-and-allocation",
    "title": "Vertical concepts",
    "section": "Water demand and allocation",
    "text": "Water demand and allocation\n\nPaddy\nThe Table below shows the parameters (fields) of struct Paddy, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF), and can be listed in the TOML configuration file under [input.vertical.paddy], to map the internal model parameter to the external netCDF variable.\n\n\n\n\n\n\n\n\n\nparameter\ndescription\nunit\ndefault\n\n\n\n\ndemand_gross\nirrigation gross demand\nmm Δt\\(^{-1}\\)\n-\n\n\nirrigation_efficiency\nirrigation efficiency\n-\n-\n\n\nmaximum_irrigation_rate\nmaximum irrigation rate\nmm Δt\\(^{-1}\\)\n25.0 mm day\\(^{-1}\\)\n\n\nirrigation_areas\nirrigation areas\n-\n-\n\n\nirrigation_trigger\nirrigation on or off (boolean)\n-\n-\n\n\nh_min\nminimum required water depth in the irrigated paddy fields\nmm\n20.0\n\n\nh_opt\noptimal water depth in the irrigated paddy fields\nmm\n50.0\n\n\nh_max\nwater depth when paddy field starts spilling water (overflow)\nmm\n80.0\n\n\nh\nactual water depth in paddy field\nmm\n-\n\n\n\n\n\nNon-paddy\nThe Table below shows the parameters (fields) of struct NonPaddy, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF), and can be listed in the TOML configuration file under [input.vertical.nonpaddy], to map the internal model parameter to the external netCDF variable.\n\n\n\n\n\n\n\n\n\nparameter\ndescription\nunit\ndefault\n\n\n\n\ndemand_gross\nirrigation gross demand\nmm Δt\\(^{-1}\\)\n-\n\n\nirrigation_efficiency\nirrigation efficiency\n-\n-\n\n\nmaximum_irrigation_rate\nmaximum irrigation rate\nmm Δt\\(^{-1}\\)\n25.0 mm day\\(^{-1}\\)\n\n\nirrigation_areas\nirrigation areas\n-\n-\n\n\nirrigation_trigger\nirrigation on or off (boolean)\n-\n-\n\n\n\n\n\nNon-irrigation (industry, domestic and livestock)\nThe Table below shows the parameters (fields) of struct NonIrrigationDemand, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF). These parameters can be listed for the sectors industry, domestic and livestock, in the TOML configuration file under [input.vertical.industry], [input.vertical.domestic] and [input.vertical.livestock], to map the internal model parameter to the external netCDF variable.\n\n\n\n\n\n\n\n\n\nparameter\ndescription\nunit\ndefault\n\n\n\n\ndemand_gross\ngross industry water demand\nmm Δt\\(^{-1}\\)\n0.0\n\n\ndemand_net\nnet industry water demand\nmm Δt\\(^{-1}\\)\n0.0\n\n\nreturnflow_fraction\nreturn flow fraction\n-\n-\n\n\nreturnflow\nreturn flow\nmm Δt\\(^{-1}\\)\n-\n\n\n\n\n\nWater allocation land\nThe Table below shows the parameters (fields) of struct AllocationLand, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF), and can be listed in the TOML configuration file under [input.vertical.allocation], to map the internal model parameter to the external netCDF variable.\n\n\n\n\n\n\n\n\n\nparameter\ndescription\nunit\ndefault\n\n\n\n\nirri_demand_gross\nirrigation gross demand\nmm Δt\\(^{-1}\\)\n-\n\n\nnonirri_demand_gross\nnon-irrigation gross demand\nmm Δt\\(^{-1}\\)\n-\n\n\ntotal_gross_demand\ntotal gross demand\nmm Δt\\(^{-1}\\)\n-\n\n\nfrac_sw_used\nfraction surface water used\n-\n1.0\n\n\nareas\nallocation areas\n-\n1\n\n\nsurfacewater_demand\ndemand from surface water\nmm Δt\\(^{-1}\\)\n-\n\n\nsurfacewater_alloc\nallocation from surface water\nmm Δt\\(^{-1}\\)\n-\n\n\nact_groundwater_abst\nactual groundwater abstraction\nmm Δt\\(^{-1}\\)\n-\n\n\nact_groundwater_abst_vol\nactual groundwater abstraction\nm\\(^3\\) Δt\\(^{-1}\\)\n-\n\n\navailable_groundwater\navailable groundwater\nm\\(^3\\)\n-\n\n\ngroundwater_demand\ngroundwater_demand\nmm Δt\\(^{-1}\\)\n-\n\n\ngroundwater_alloc\nallocation from groundwater\nmm Δt\\(^{-1}\\)\n-\n\n\nirri_alloc\nallocated water for irrigation\nmm Δt\\(^{-1}\\)\n-\n\n\nnonirri_alloc\nallocated water for non-irrigation\nmm Δt\\(^{-1}\\)\n-\n\n\ntotal_alloc\ntotal allocated water\nmm Δt\\(^{-1}\\)\n-\n\n\nnonirri_returnflow\nreturn flow from non-irrigation\nmm Δt\\(^{-1}\\)\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Vertical concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_vertical.html#sediment",
    "href": "model_docs/parameters_vertical.html#sediment",
    "title": "Vertical concepts",
    "section": "Sediment",
    "text": "Sediment\nThe Table below shows external parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.vertical]. These external parameters are not part of struct LandSediment, but used to calculate parameters of struct LandSediment.\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\npclay\npercentage clay\n%\n0.1\n\n\npsilt\npercentage silt\n%\n0.1\n\n\nresareas\nreservoir coverage\n-\n-\n\n\nlakeareas\nlake coverage\n-\n-\n\n\n\nThe Table below shows the parameters (fields) of struct LandSediment, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF), and can be listed in the TOML configuration file under [input.vertical], to map the internal model parameter to the external netCDF variable. For some input parameters the parameter listed under [input.vertical] is not equal to the internal model parameter, these are listed in the Table below between parentheses after the internal model parameter. For example, internal model parameter sl is mapped as follows in the TOML file to the external netCDF variable Sl:\n[input.vertical]\nspecific_leaf = \"Sl\"\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\ncanopyheight\ncanopy height\nm\n3.0\n\n\nerosk\ncoefficient for EUROSEM rainfall erosion\n-\n0.6\n\n\nerosspl\nexponent for EUROSEM rainfall erosion\n-\n2.0\n\n\nerosov\ncoefficient for ANSWERS overland flow erosion\n-\n0.9\n\n\npathfrac\nfraction of impervious area per grid cell\n-\n0.01\n\n\nslope\nland slope\n-\n0.01\n\n\nusleC\nUSLE crop management factor\n-\n0.01\n\n\nusleK\nUSLE soil erodibility factor\n-\n0.1\n\n\nsl (specific_leaf)\nspecific leaf storage\nmm\n-\n\n\nswood (storage_wood)\nstorage woody part of vegetation\nmm\n-\n\n\nkext\nextinction coefficient (to calculate canopy gap fraction)\n-\n-\n\n\ncmax\nmaximum canopy storage\nmm\n1.0\n\n\ncanopygapfraction\ncanopy gap fraction\n-\n0.1\n\n\ndmclay\nmedian diameter particle size class clay\nµm\n2.0\n\n\ndmsilt\nmedian diameter particle size class silt\nµm\n10.0\n\n\ndmsand\nmedian diameter particle size class sand\nµm\n200.0\n\n\ndmsagg\nmedian diameter particle size class small aggregates\nµm\n30.0\n\n\ndmlagg\nmedian diameter particle size class large aggregates\nµm\n500.0\n\n\nrhos (rhosed)\ndensity of sediment\nkg m\\(^{-3}1\\)\n2650.0\n\n\nn\nnumber of cells\n-\n-\n\n\nyl\nlength of cells in y direction\nm\n-\n\n\nxl\nlength of cells in x direction\nm\n-\n\n\nriverfrac\nfraction of river\n-\n-\n\n\nwbcover\nwaterbody coverage\n-\n-\n\n\nh_land\ndepth of overland flow\nm\n-\n\n\ninterception\ncanopy interception\nmm Δt\\(^{-1}\\)\n-\n\n\nprecipitation\nprecipitation\nmm Δt\\(^{-1}\\)\n-\n\n\nq_land\noverland flow\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nsedspl\nsediment eroded by rainfall\nton Δt\\(^{-1}\\)\n-\n\n\nsedov\nsediment eroded by overland flow\nton Δt\\(^{-1}\\)\n-\n\n\nsoilloss\ntotal eroded soil\nton Δt\\(^{-1}\\)\n-\n\n\nerosclay\neroded soil for particle class clay\nton Δt\\(^{-1}\\)\n-\n\n\nerossilt\neroded soil for particle class silt\nton Δt\\(^{-1}\\)\n-\n\n\nerossand\neroded soil for particle class sand\nton Δt\\(^{-1}\\)\n-\n\n\nerossagg\neroded soil for particle class small aggregates\nton Δt\\(^{-1}\\)\n-\n\n\neroslagg\neroded soil for particle class large aggregates\nton Δt\\(^{-1}\\)\n-\n\n\nleaf_area_index\nleaf area index\nm\\(^2\\) m\\(^{-2}\\)\n-\n\n\ndl\ndrain length\nm\n-\n\n\ndw\nflow width\nm\n-\n\n\ncGovers\nGovers transport capacity coefficient\n-\n-\n\n\nnGovers\nGovers transport capacity coefficient\n-\n-\n\n\nD50\nmedian particle diameter of the topsoil\nmm\n-\n\n\nfclay\nfraction of particle class clay\n-\n-\n\n\nfsilt\nfraction of particle class silt\n-\n-\n\n\nfsand\nfraction of particle class sand\n-\n-\n\n\nfsagg\nfraction of particle class small aggregates\n-\n-\n\n\nflagg\nfraction of particle class large aggregates\n-\n-\n\n\nrivcell\nriver cells\n-\n-\n\n\nTCsed\ntotal transport capacity of overland flow\nton Δt\\(^{-1}\\)\n-\n\n\nTCclay\ntransport capacity of overland flow for particle class clay\nton Δt\\(^{-1}\\)\n-\n\n\nTCsilt\ntransport capacity of overland flow for particle class silt\nton Δt\\(^{-1}\\)\n-\n\n\nTCsand\ntransport capacity of overland flow for particle class sand\nton Δt\\(^{-1}\\)\n-\n\n\nTCsagg\ntransport capacity of overland flow for particle class small aggregates\nton Δt\\(^{-1}\\)\n-\n\n\nTClagg\ntransport capacity of overland flow for particle class large aggregates\nton Δt\\(^{-1}\\)\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Vertical concepts"
    ]
  },
  {
    "objectID": "model_docs/model_configurations.html",
    "href": "model_docs/model_configurations.html",
    "title": "Model configurations",
    "section": "",
    "text": "There are several model configurations supported by wflow. These model configurations require slightly different input requirements, yet the general structure is similar for each model. A wflow model configuration consists of a vertical SBM concept in combination with lateral concepts that control how water is routed for example over the land or river domain. For the wflow_sbm model different model configurations are possible. The following model configurations are supported in wflow:\nBelow, some explanation will be given on how to prepare a basic wflow_sbm model. Example data for other model configurations is provided in the section with sample data.",
    "crumbs": [
      "Model documentation",
      "Model configurations"
    ]
  },
  {
    "objectID": "model_docs/model_configurations.html#wflow_sbm",
    "href": "model_docs/model_configurations.html#wflow_sbm",
    "title": "Model configurations",
    "section": "wflow_sbm",
    "text": "wflow_sbm\nWflow_sbm represents hydrological models derived from the CQflow model (Köhler et al., 2006) that have the SBM vertical concept in common, but can have different lateral concepts that control how water is routed for example over the land or river domain. The soil part of SBM is largely based on the Topog_SBM model but has had considerable changes over time. Topog_SBM is specifically designed to simulate fast runoff processes in small catchments while the wflow_sbm model can be applied more widely. The main differences are for the vertical concept SBM of wflow_sbm:\n\nThe unsaturated zone can be split-up in different layers\nThe addition of evapotranspiration losses\nThe addition of a capillary rise\nThe addition of water demand and allocation\n\nThe water demand and allocation computations are supported by the wflow_sbm model configurations:\n\nSBM + Kinematic wave\nSBM + Groundwater flow\nSBM + Local inertial river\nSBM + Local inertial river (1D) and land (2D)\n\nThe vertical SBM concept is explained in more detail in the following section SBM vertical concept.\nTopog_SBM uses an element network based on contour lines and trajectories for water routing. Wflow_sbm models differ in how the lateral components river, land, and subsurface are solved. Below the different wflow_sbm model configurations are described.\n\nSBM + Kinematic wave\nFor the lateral components of this wflow_sbm model water is routed over a D8 network, and the kinematic wave approach is used for river, overland and lateral subsurface flow. This is described in more detail in the section Kinematic wave.\nAn overview of the different processes and fluxes in the wflow_sbm model with the kinematic wave approach for river, overland and lateral subsurface flow:\n\n\n\nConceptual overview of the wflow_sbm model\n\n\nBelow the mapping for this wflow_sbm model (type sbm) to the vertical SBM concept (instance of struct SBM) and the different lateral concepts is presented. For an explanation about the type parameters between curly braces after the struct name see the section on the model parameters.\nvertical =&gt; struct SBM{T,N,M}\nlateral.subsurface =&gt; struct LateralSSF{T}\nlateral.land =&gt; struct SurfaceFlow{T,R,L}\nlateral.river =&gt; struct SurfaceFlow{T,R,L}\nlateral.river.lake =&gt; struct NaturalLake{T} # optional\nlateral.river.reservoir =&gt; struct SimpleReservoir{T} # optional\n\n\nSBM + Groundwater flow\nFor river and overland flow the kinematic wave approach over a D8 network is used for this wflow_sbm model. For the subsurface domain, an unconfined aquifer with groundwater flow in four directions (adjacent cells) is used. This is described in more detail in the section Groundwater flow.\n[model]\ntype = \"sbm_gwf\"\n\n[input.lateral.subsurface]\nksathorfrac = \"KsatHorFrac\"\nconductivity = \"conductivity\"\nspecific_yield = \"specific_yield\"\nexfiltration_conductance = \"exfilt_cond\"\ninfiltration_conductance = \"infilt_cond\"\nriver_bottom = \"river_bottom\"\nconductivity_profile = \"exponential\"\ngwf_f.value = 3.0\nBelow the mapping for this wflow_sbm model (type sbm_gwf) to the vertical SBM concept (instance of struct SBM) and the different lateral concepts. For an explanation about the type parameters between curly braces after the struct name see the section on model parameters.\nvertical =&gt; struct SBM{T,N,M}\nlateral.subsurface.flow =&gt; struct GroundwaterFlow{A, B}\nlateral.subsurface.recharge =&gt; struct Recharge{T} &lt;: AquiferBoundaryCondition\nlateral.subsurface.river =&gt; struct River{T} &lt;: AquiferBoundaryCondition\nlateral.subsurface.drain =&gt; struct Drainage{T} &lt;: AquiferBoundaryCondition # optional\nlateral.land =&gt; struct SurfaceFlow{T,R,L}\nlateral.river =&gt; struct SurfaceFlow{T,R,L}\nlateral.river.lake =&gt; struct NaturalLake{T} # optional\nlateral.river.reservoir =&gt; struct SimpleReservoir{T} # optional\n\n\nSBM + Local inertial river\nBy default the model types sbm and sbm_gwf use the kinematic wave approach for river flow. There is also the option to use the local inertial model for river flow with an optional 1D floodplain schematization (routing is done separately for the river channel and floodplain), by providing the following in the TOML file:\n[model]\nriver_routing = \"local-inertial\"    # optional, default is \"kinematic-wave\"\nfloodplain_1d = true                # optional, default is false\nOnly the mapping for the river component changes, as shown below. For an explanation about the type parameters between curly braces after the struct name see the section on the model parameters.\nlateral.river =&gt; struct ShallowWaterRiver{T,R,L}\n\n\nSBM + Local inertial river (1D) and land (2D)\nBy default the model types sbm and sbm_gwf use the kinematic wave approach for river and overland flow. There is also the option to use the local inertial model for 1D river and 2D overland flow, by providing the following in the TOML file:\n[model]\nriver_routing = \"local-inertial\"\nland_routing = \"local-inertial\"\nThe mapping for the river and land component changes, as shown below. For an explanation about the type parameters between curly braces after the struct name see the section on the model parameters.\nlateral.river =&gt; struct ShallowWaterRiver{T,R,L}\nlateral.land =&gt; struct ShallowWaterLand{T}\nThe local inertial approach is described in more detail in the section Local inertial model.",
    "crumbs": [
      "Model documentation",
      "Model configurations"
    ]
  },
  {
    "objectID": "model_docs/model_configurations.html#wflow_sediment",
    "href": "model_docs/model_configurations.html#wflow_sediment",
    "title": "Model configurations",
    "section": "wflow_sediment",
    "text": "wflow_sediment\nThe processes and fate of many particles and pollutants impacting water quality at the catchment level are intricately linked to the processes governing sediment dynamics. Both nutrients such as phosphorus, carbon or other pollutants such as metals are influenced by sediment properties in processes such as mobilization, flocculation or deposition. To better assert and model water quality in inland systems, a better comprehension and modelling of sediment sources and fate in the river is needed at a spatial and time scale relevant to such issues.\nThe wflow_sediment model was developed to answer such issues. It is a distributed physics-based model, based on the distributed hydrologic wflow_sbm model. It is able to simulate both land and in-stream processes, and relies on available global datasets, parameter estimation and small calibration effort.\nIn order to model the exports of terrestrial sediment to the coast through the Land Ocean Aquatic Continuum or LOAC (inland waters network such as streams, lakes…), two different modelling parts were considered. The first part, called the inland sediment model, is the modelling and estimation of soil loss and sediment yield to the river system by land erosion, separated into vertical Soil Erosion processes and lateral Sediment Flux in overland flow. The second part, called the River Sediment Model is the transport and processes of the sediment in the river system. The two parts together constitute the wflow_sediment model.\nOverview of the concepts of the wflow_sediment model: \n\nConfiguration\nAs sediment generation and transport processes are linked to the hydrology and water flows, the inputs to the wflow_sediment model come directly from a hydrological model. The required dynamic inputs to run wflow_sediment are:\n\nPrecipitation (can also come from the hydrological forcing data),\nLand runoff (overland flow) from the kinematic wave,\nRiver runoff from the kinematic wave,\nLand water level in the kinematic wave,\nRiver water level in the kinematic wave,\nRainfall interception by the vegetation.\n\nThese inputs can be obtained from wflow_sbm or from other sources.\nModel outputs can be saved for both the inland and the instream part of the model. Some examples are listed below.\n[output.vertical]\n# Soil splash erosion [ton]\nsedspl = \"sedspl\"\n# Soil erosion by overland flow [ton]\nsedov = \"sedov\"\n# Total soil loss [ton]\nsoilloss = \"soilloss\"\n# Total transport capacity of overland flow [ton]\nTCsed = \"TCsed\"\n# Transport capacity per particle class (clay) [ton]\nTCclay = \"TCclay\"\n\n[output.lateral.land]\n# Total (or per particle class) sediment flux in overland flow [ton]\nolsed = \"olsed\"\nolclay = \"olclay\"\n# Total (or per particle class) sediment yield to the river [ton]\ninlandsed = \"inlandsed\"\ninlandclay = \"inlandclay\"\n\n[output.lateral.river]\n# Total sediment concentration in the river (suspended + bed load) [kg/m3]\nSedconc = \"Sedconc\"\n# Suspended load [kg/m3]\nSSconc = \"SSconc\"\n# Bed load [kg/m3]\nBedconc = \"Bedconc\"",
    "crumbs": [
      "Model documentation",
      "Model configurations"
    ]
  },
  {
    "objectID": "model_docs/model_configurations.html#references",
    "href": "model_docs/model_configurations.html#references",
    "title": "Model configurations",
    "section": "References",
    "text": "References\n\nKöhler, L., Mulligan, M., Schellekens, J., Schmid, S., Tobón, C., 2006, Hydrological impacts of converting tropical montane cloud forest to pasture, with initial reference to northern Costa Rica. Final Technical Report DFID‐FRP Project No. R799.",
    "crumbs": [
      "Model documentation",
      "Model configurations"
    ]
  },
  {
    "objectID": "model_docs/lateral/sediment_flux.html",
    "href": "model_docs/lateral/sediment_flux.html",
    "title": "Sediment flux",
    "section": "",
    "text": "Both the inland and river sediment model take into account sediment flux or transport of sediment in water, either in overland flow or in the stream flow. These two transport are distinguished in two different structures.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Sediment flux"
    ]
  },
  {
    "objectID": "model_docs/lateral/sediment_flux.html#inland-sediment-model",
    "href": "model_docs/lateral/sediment_flux.html#inland-sediment-model",
    "title": "Sediment flux",
    "section": "Inland Sediment Model",
    "text": "Inland Sediment Model\n\nSediment Flux in overland flow\nOnce the amount of soil detached by both rainfall and overland flow has been estimated, it has then to be routed and delivered to the river network. Inland routing in sediment models is usually done by comparing the amount of detached sediment with the transport capacity of the flow, which is the maximum amount of sediment that the flow can carry downslope. There are several existing formulas available in the literature. For a wide range of slopes and for overland flow, the Govers equation (1990) seems the most appropriate choice (Hessel et al, 2007). However, as the wflow_sediment model was developed to be linked to water quality issues, the Yalin transport equation was chosen as it can handle particle differentiation (Govers equation can still be used if wflow_sediment is used to only model inland processes with no particle differentiation). For land cells, wflow_sediment assumes that erosion can mobilize 5 classes of sediment:\n\nClay (mean diameter of \\(\\SI{2}{\\mu m}\\))\nSilt (mean diameter of \\(\\SI{10}{\\mu m}\\))\nSand (mean diameter of \\(\\SI{200}{\\mu m}\\))\nSmall aggregates (mean diameter of \\(\\SI{30}{\\mu m}\\))\nLarge aggregates (mean diameter of \\(\\SI{50}{\\mu m}\\)).\n\n$$\n\\[\\begin{gathered}\n   \\mathrm{PSA} = \\mathrm{SAN} (1-\\mathrm{CLA})^{2.4} \\\\\n   \\mathrm{PSI} = 0.13\\mathrm{SIL}\\\\\n   \\mathrm{PCL} = 0.20\\mathrm{CLA} \\\\\n\n   \\mathrm{SAG} =\n   \\begin{align*}\n      \\begin{cases}\n         2.0\\mathrm{CLA} &\\text{ if }\\quad \\mathrm{CLA} &lt; 0.25 \\\\\n         0.28(\\mathrm{CLA}-0.25)+0.5 &\\text{ if }\\quad 0.25 \\leq \\mathrm{CLA} \\leq 0.5 \\\\\n         0.57 &\\text{ if }\\quad \\mathrm{CLA} &gt; 0.5\n      \\end{cases}\n   \\end{align*} \\\\\n\n   \\mathrm{LAG} = 1 - \\mathrm{PSA} - \\mathrm{PSI} - \\mathrm{PCL} - \\mathrm{SAG}\n\\end{gathered}\\]\n$$\nwhere \\(\\mathrm{CLA}\\), \\(\\mathrm{SIL}\\) and \\(\\mathrm{SAN}\\) are the primary clay, silt, sand fractions of the topsoil and \\(\\mathrm{PCL}\\), \\(\\mathrm{PSI}\\), \\(\\mathrm{PSA}\\), \\(\\mathrm{SAG}\\) and \\(\\mathrm{LAG}\\) are the clay, silt, sand, small and large aggregates fractions of the detached sediment respectively. The transport capacity of the flow using Yalin’s equation with particle differentiation, developed by Foster (1982), is: \\[\n   \\mathrm{TC}_i = (P_e)_i  (S_g)_i \\, \\rho_w \\,  g \\, d_i  V_*\n\\] where \\(\\mathrm{TC}_i\\) is the transport capacity of the flow for the particle class \\(i\\), \\((P_e)_i\\) is the effective number of particles of class \\(i\\), \\(\\SIb{(S_g)_i}{kg m^{-3}}\\) is the specific gravity for the particle class \\(i\\), \\(\\SIb{\\rho_w}{kg m^{-3}}\\) is the mass density of the fluid, \\(\\SIb{g}{m s^{-2}}\\) is the acceleration due to gravity, \\(\\SIb{d_i}{m}\\) is the diameter of the particle of class \\(i\\) and \\(V_* = \\SIb{(g R S)^{0.5}}{m s^{-1}}\\) is the shear velocity of the flow with \\(S\\) the slope gradient and \\(\\SIb{R}{m}\\) the hydraulic radius of the flow. The detached sediment are then routed down slope until the river network using the accucapacityflux, accupacitystate functions depending on the transport capacity from Yalin.\nThe choice of transport capacity method for the overland flow is set up in the model section of the TOML:\n[model]\nlandtransportmethod = \"yalinpart\" # Overland flow transport capacity method: [\"yalinpart\", \"govers\", \"yalin\"]\nNote that the “govers” and “yalin” equations can only assess total transport capacity of the flow and can therefore not be used in combination with the river part of the sediment model.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Sediment flux"
    ]
  },
  {
    "objectID": "model_docs/lateral/sediment_flux.html#river-sediment-model",
    "href": "model_docs/lateral/sediment_flux.html#river-sediment-model",
    "title": "Sediment flux",
    "section": "River Sediment Model",
    "text": "River Sediment Model\nSediment dynamics in rivers can be described by the same three processes on land: erosion, deposition and transport. The difference is that channel ﬂow is much higher, deeper and permanent compared to overland ﬂow. In channels, erosion is the direct removal of sediments from the river bed or bank (lateral erosion). Sediments are transported in the river either by rolling, sliding and silting (bed load transport) or via turbulent flow in the higher water column (suspended load transport). The type of transport is determined by the river bed shear stress. As sediment particles have a higher density than water, they can also be deposited on the river bed according to their settling velocity compared to the ﬂow velocity. In addition to regular deposition in the river, lakes, reservoirs and floodplains represents additional major sediment settling pools.\nComplete models of sediment dynamics based on hydrology and not on hydraulics or hydrodynamics are much rarer than for soil loss and inland dynamics. The simpler models such as the SWAT default sediment river model uses again the transport capacity of the ﬂow to determine if there is erosion or deposition (Neitsch et al., 2011). A more physics-based approach (Partheniades, 1965) to determine river erosion is used by Liu et al. (2018) and in the new SWAT’s approach developed by Narasimhan et al. (2017). For wﬂow_sediment, the new physics-based model of SWAT was chosen for transport and erosion as it enables the use of parameter estimation for erosion of bed and bank of the channel and separates the suspended from the bed loads.\n\n\n\nOverview of the different processes for a river cell in wflow_sediment.\n\n\nRunning the river model is an option of the wflow_sediment model and is enabled using the TOML file. By default it is false:\n[model]\nrunrivermodel = true\n\nSediment inputs in a river cell\nThe first part of the river model assesses how much detached sediment are in the river cell at the beginning of the timestep \\(t\\). Sources of detached sediment are sediments coming from land erosion, estimated with the soil loss part of wflow_sediment model, the sediment coming from upstream river cells and the detached sediment that were left in the cell at the end of the previous timestep (t-1): \\[\n   (\\subtext{\\mathrm{sed}}{in})_t = (\\subtext{\\mathrm{sed}}{land})_t + \\mathrm{upstream}\\left[(\\subtext{\\text{sed}}{out})_{t-1}\\right] + (\\subtext{\\text{sed}}{riv})_{t-1}\n\\]\n\n\nRiver transport and erosion\nOnce the amount of sediment inputs at the beginning of the timestep is known, the model then estimates transport, and river erosion if there is a deficit of sediments. Transport in the river system is estimated via a transport capacity formula. There are several transport capacity formulas available in wflow_sediment, some requiring calibration and some not. Choosing a transport capacity equation depends on the river characteristics (some equation are more suited for narrow or wider rivers), and on the reliability of the required river parameters (such as slope, width or mean particle diameter of the river channel). Several river transport capacity are available and the choice is set up in the model section of the TOML:\n[model]\nrivtransportmethod = \"bagnold\" # River flow transport capacity method: [\"bagnold\", \"engelund\", \"yang\", \"kodatie\", \"molinas\"]\nSimplified Bagnold\nOriginally more valid for intermediate to large rivers, this simplified version of the Bagnold equation relates sediment transport to flow velocity with two simple calibration parameters (Neitsch et al, 2011): \\[\nC_{\\max} = \\subtext{c}{sp}  \\left( \\dfrac{\\mathrm{prf} Q}{h W} \\right)^{\\subtext{\\mathrm{sp}}{exp}}\n\\]\nwhere \\(\\SIb{C_{\\max}}{kg L^{-1}}\\) (or \\(\\SIb{}{ton m^{-1}}\\)) is the sediment concentration, \\(\\SIb{Q}{m^3 s^{-1}}\\) is the surface runoff in the river cell, \\(\\SIb{h}{m}\\) is the river water level, \\(\\SIb{W}{m}\\) is the river width and \\(\\subtext{c}{sp}\\), \\(\\mathrm{prf}\\) and \\(\\subtext{\\mathrm{sp}}{exp}\\) are calibration parameters. The \\(\\mathrm{prf}\\) coefficient is usually used to deduce the peak velocity of the flow, but for simplification in wflow_sediment, the equation was simplified to only get two parameters to calibrate: \\(\\subtext{\\mathrm{sp}}{exp}\\) and \\(\\subtext{c}{Bagnold} = \\subtext{c}{sp} \\,\n\\mathrm{prf}^{\\subtext{\\mathrm{sp}}{exp}}\\). The coefficient \\(\\subtext{\\mathrm{sp}}{exp}\\) usually varies between \\(1\\) and \\(2\\) while \\(\\mathrm{prf}\\) and \\(\\subtext{c}{sp}\\) have a wider range of variation. The table below summarizes ranges and values of the three Bagnold coefficients used by other studies:\n\nRange of the simplified Bagnold coefficients (and calibrated value)\n\n\n\n\n\n\n\n\n\nStudy\nRiver\n\\(\\mathrm{prf}\\) range\n\\(\\subtext{c}{sp}\\) range\n\\(\\subtext{\\mathrm{sp}}{exp}\\) range\n\n\n\n\nVigiak 2015\nDanube\n0.5-2 (/)\n0.0001-0.01 (0.003-0.006)\n1-2 (1.4)\n\n\nVigiak 2017\nDanube\n/\n0.0001-0.01 (0.0015)\n1-2 (1.4)\n\n\nAbbaspour 2007\nThur (CH)\n0.2-0.25 (/)\n0.001-0.002 (/)\n0.35-1.47 (/)\n\n\nOeurng 2011\nSave (FR)\n0-2 (0.58)\n0.0001-0.01 (0.01)\n1-2 (2)\n\n\n\nEngelund and Hansen This transport capacity is not present in SWAT but used in many models such as Delft3D-WAQ, Engelund and Hansen calculates the total sediment load as (Engelund and Hansen, 1967): \\[\n   C_w = 0.05 \\left( \\dfrac{\\rho_{s}}{\\rho_{s} - \\rho} \\right) \\left( \\dfrac{u S}{\\sqrt{\\left( \\dfrac{\\rho_{s}}{\\rho_{s} - \\rho} \\right) g  D_{50}}} \\right) \\theta^{1/2}\n\\] where \\(C_w\\) is the sediment concentration by weight, \\(\\SIb{\\rho}{g m^{-3}}\\) and \\(\\SIb{\\rho_{s}}{g m^{-3}}\\) are the fluid and sediment density (here respectively equal to \\(\\SI{1000}{g m^{-3}}\\) and \\(\\SI{2650}{g\nm^{-3}}\\)), \\(\\SIb{u}{m s^{-1}}\\) is the water mean velocity, \\(S\\) is the river slope, \\(g\\) is the acceleration due to gravity, \\(\\SIb{D_{50}}{m}\\) is the river mean diameter and \\(\\theta\\) is the Shields parameter.\nKodatie Kodatie (1999) developed the power relationships from Posada (1995) using field data and linear optimization so that they would be applicable for a wider range of riverbed sediment size. The resulting equation, for a rectangular channel, is (Neitsch et al, 2011): \\[\n   C_{\\max} = \\left( \\dfrac{a u^{b} h^{c} S^{d}}{\\subtext{V}{in}} \\right)  W\n\\] where \\(\\SIb{\\subtext{V}{in}}{m^3}\\) in the volume of water entering the river cell during the timestep and \\(a\\), \\(b\\), \\(c\\) and \\(d\\) are coefficients depending on the riverbed sediment size. Values of these coefficients are summarized in the table below.\n\nRange of the simplified Bagnold coefficients (and calibrated value)\n\n\n\n\n\n\n\n\n\nRiver sediment diameter\na\nb\nc\nd\n\n\n\n\n\\(D_{50} \\leq \\SI{0.05}{mm}\\)\n281.4\n2.622\n0.182\n0\n\n\n\\(\\SI{0.05}{mm} &lt; D_{50} \\leq \\SI{0.25}{mm}\\)\n2 829.6\n3.646\n0.406\n0.412\n\n\n\\(\\SI{0.25}{mm} &lt; D_{50} \\leq \\SI{2.0}{mm}\\)\n2 123.4\n3.300\n0.468\n0.613\n\n\n\\(D_{50} &gt; \\SI{2.0}{mm}\\)\n431 884.8\n1.000\n1.000\n2.000\n\n\n\nYang Yang (1996) developed a set of two equations giving transport of sediments for sand-bed or gravel-bed rivers. The sand equation (\\(D_{50} &lt; \\SI{2.0}{mm}\\)) is: \\[\n   \\log\\left(C_{ppm}\\right) = 5.435 - 0.286\\log\\left(\\frac{\\omega_{s,50}D_{50}}{\\nu}\\right)-0.457\\log\\left(\\frac{u_*}{\\omega_{s,50}}\\right) \\\\\n   +\\left(1.799-0.409\\log\\left(\\frac{\\omega_{s,50}D_{50}}{\\nu}\\right)-0.314\\log\\left(\\frac{u_*}{\\omega_{s,50}}\\right)\\right)\\log\\left(\\frac{uS}{\\omega_{s,50}}-\\frac{u_{cr}S}{\\omega_{s,50}}\\right)\n\\] And the gravel equation (\\(\\SI{2.0}{mm} \\leq D_{50} &lt; \\SI{10.0}{mm}\\)) is: \\[\n   \\log\\left(C_{ppm}\\right) = 6.681 - 0.633\\log\\left(\\frac{\\omega_{s,50}D_{50}}{\\nu}\\right)-4.816\\log\\left(\\frac{u_*}{\\omega_{s,50}}\\right) \\\\\n   +\\left(2.784-0.305\\log\\left(\\frac{\\omega_{s,50}D_{50}}{\\nu}\\right)-0.282\\log\\left(\\frac{u_*}{\\omega_{s,50}}\\right)\\right)\\log\\left(\\frac{uS}{\\omega_{s,50}}-\\frac{u_{cr}S}{\\omega_{s,50}}\\right)\n\\] where \\(C_{ppm}\\) is sediment concentration in parts per million by weight, \\(\\SIb{\\omega_{s,50}}{m s^{-1}}\\) is the settling velocity of a particle with the median riverbed diameter estimated with Stokes, \\(\\SIb{\\nu}{m^2 s^{-1}}\\) is the kinematic viscosity of the fluid, \\(\\SIb{u_*}{m s^{-1}}\\) is the shear velocity where \\(u_* = \\sqrt{gR_{H}S}\\) with \\(R_{H}\\) the hydraulic radius of the river and \\(\\SIb{u_{cr}}{m s^{-1}}\\) is the critical velocity (equation can be found in Hessel, 2007).\nMolinas and Wu The Molinas and Wu (2001) transport equation was developed for large sand-bed rivers based on the universal stream power \\(\\psi\\). The corresponding equation is (Neitsch et al, 2011): \\[\n   C_{w} = \\dfrac{1430 (0.86+\\sqrt{\\psi}) \\psi^{1.5}}{0.016+\\psi} 10^{-6}\n\\] where \\(\\psi\\) is the universal stream power given by: \\[\n   \\psi = \\dfrac{\\psi^{3}}{\\left(\\dfrac{\\rho_{s}}{\\rho}-1\\right) g h \\omega_{s,50}  \\left[ \\log_{10}\\left(\\dfrac{h}{D_{50}}\\right)\\right]^{2}}\n\\]\nOnce the maximum concentration \\(C_{\\max}\\) is established with one of the above transport formula, the model then determines if there is erosion of the river bed and bank. In order to do that, the difference \\(sed_{ex}\\) between the maximum amount of sediment estimated with transport (\\(\\mathrm{sed}_{\\max} = C_{\\max} \\subtext{V}{in}\\)) and the sediment inputs to the river cell (\\(\\subtext{\\mathrm{sed}}{in}\\) calculated above) is calculated. If too much sediment is coming in and \\(\\subtext{\\mathrm{sed}}{ex}\\) is negative, then there is no river bed and bank erosion. And if the river has not reach its maximum transport capacity, then erosion of the river happens.\nFirst, the sediments stored in the cell from deposition in previous timesteps \\(\\subtext{\\mathrm{sed}}{stor}\\) are eroded from clay to gravel. If this amount is not enough to cover \\(\\subtext{\\mathrm{sed}}{ex}\\), then erosion of the local river bed and bank material starts.\nInstead of just setting river erosion amount to just cover the remaining difference \\(\\subtext{\\mathrm{sed}}{exeff}\\) between \\(\\subtext{\\mathrm{sed}}{ex}\\) and \\(\\subtext{\\mathrm{sed}}{stor}\\), actual erosion potential is adjusted using river characteristics and is separated between the bed and bank of the river using the physics-based approach of Knight (1984).\nThe bed and bank of the river are supposed to only be able to erode a maximum amount of their material E_{R,\\mathrm{bed}} for the bed and E_{R,\\mathrm{bank}} for the river bank. For a rectangular channel, assuming it is meandering and thus only one bank is prone to erosion, they are calculated from the equations (Neitsch et al, 2011): \\[\n\\begin{gathered}\n   E_{R,\\mathrm{bed}} = k_{d,\\mathrm{bed}} \\left( \\tau_{e,\\mathrm{bed}} - \\tau_{cr,\\mathrm{bed}} \\right) 10^{-6}  L  W  \\rho_{b, \\mathrm{bed}}  \\Delta t \\\\\n   E_{R,\\mathrm{bank}} = k_{d,\\mathrm{bank}} \\left( \\tau_{e,\\mathrm{bank}} - \\tau_{cr,\\mathrm{bank}} \\right) 10^{-6} L h \\rho_{b, \\mathrm{bank}}  \\Delta t\n\\end{gathered}\n\\] where \\(\\SIb{E_R}{ton}\\) is the potential bed/bank erosion rates, \\(\\SIb{k_d}{cm^3 N^{-1},\ns^{-1}}\\) is the erodibility of the bed/bank material, \\(\\SIb{\\tau_e}{N m^{-2}}\\) is the effective shear stress from the flow on the bed/bank, \\(\\SIb{\\tau_{cr}}{N m^{-2}}\\) is the critical shear stress for erosion to happen, \\(\\SIb{L}{m}\\), \\(\\SIb{W}{m}\\) and \\(\\SIb{h}{m}\\) are the channel length, width and water height, \\(\\SIb{\\rho_{b}}{g cm^{-3}}\\) is the bulk density of the bed/bank of the river and \\(\\SIb{\\Delta t}{s}\\) is the model timestep.\nIn wflow_sediment, the erodibility of the bed/bank are approximated using the formula from Hanson and Simon (2001): \\[\n   k_d=0.2 \\tau_{cr}^{-0.5}\n\\] Normally erodibilities are evaluated using jet test in the field and there are several reviews and some adjustments possible to this equation (Simon et al, 2011). However, to avoid too heavy calibration and for the scale considered, this equation is supposed to be efficient enough. The critical shear stress \\(\\tau_{cr}\\) is evaluated differently for the bed and bank. For the bed, the most common formula from Shields initiation of movement is used. For the bank, a more recent approach from Julian and Torres (2006) is used : \\[\n   \\tau_{cr,\\mathrm{bank}} = (0.1+0.1779 SC+0.0028 SC^{2}-2.34 10^{-5}  SC^{3}) C_{ch}\n\\] where \\(SC\\) is the percent clay and silt content of the river bank and \\(C_{ch}\\) is a coefficient taking into account the positive impact of vegetation on erosion reduction. This coefficient is then dependent on the land use and classical values are shown in the table below. These values where then adapted for use with the GlobCover land use map. Percent of clay and silt (along with sand and gravel) for the channel is estimated from the river median particle diameter assuming the same values as SWAT shown in the table below. Median particle diameter is here estimated depending on the Strahler river order. The higher the order, the smaller the diameter is. As the median diameter is only used in wflow_sediment for the estimation of the river bed/bank sediment composition, this supposition should be enough. Actual refined data or calibration may however be needed if the median diameter is also required for the transport formula. In a similar way, the bulk densities of river bed and bank are also just assumed to be of respectively \\(\\SI{1.5}{g cm^{-3}}\\) and \\(\\SI{1.4}{g cm^{-3}}\\).\n\nClassical values of the channel cover vegetation coefficient (Julian and Torres, 2006)\n\n\nBank vegetation\n\\(C_{ch}\\)\n\n\n\n\nNone\n1.00\n\n\nGrassy\n1.97\n\n\nSparse trees\n5.40\n\n\nDense trees\n19.20\n\n\n\n\nComposition of the river bed/bank depending on the median diameter \\(\\SIb{d_{50}}{\\mu m}\\) (Neitsch et al, 2011)\n\n\nSediment Fraction\n\\(\\leq\\) 5\n5 to 50\n50 to 2000\n\\(&gt;\\) 2000\n\n\n\n\nSand\n0.15\n0.15\n0.65\n0.15\n\n\nSilt\n0.15\n0.65\n0.15\n0.15\n\n\nClay\n0.65\n0.15\n0.15\n0.05\n\n\nGravel\n0.05\n0.05\n0.05\n0.65\n\n\n\nThen, the repartition of the flow shear stress is refined into the effective shear stress and the bed and bank of the river using the equations developed by Knight (1984) for a rectangular channel: \\[\n\\begin{gathered}\n   \\tau_{e,\\mathrm{bed}} = \\rho g R_{H} S  \\left(1 - \\dfrac{SF_{\\mathrm{bank}}}{100}\\right) \\left(1+\\dfrac{2h}{W}\\right) \\\\\n   \\tau_{e,\\mathrm{bank}} = \\rho g R_{H} S  \\left( SF_{\\mathrm{bank}}\\right)  \\left(1+\\dfrac{W}{2h}\\right)\n\\end{gathered}\n\\] where \\(\\rho g\\) is the fluid specific weight (\\(\\SI{9800}{N m^{-3}}\\) for water), \\(\\SIb{R_H}{m}\\) is the hydraulic radius of the channel, \\(\\SIb{h}{m}\\) and \\(\\SIb{W}{m}\\) are the water level and river width. \\(SF_{\\mathrm{bank}}\\) is the proportion of shear stress acting on the bank (%) and is estimated from (Knight, 1984): \\[\n   \\mathrm{SF}_{\\mathrm{bank}} = \\exp \\left( -3.230 \\log_{10}\\left(\\dfrac{W}{h}+3\\right)+6.146 \\right)\n\\] Finally the relative erosion potential of the bank and bed of the river is calculated by: \\[\n\\begin{gathered}\n   \\mathrm{RTE}_{\\mathrm{bed}} = \\dfrac{E_{R,\\mathrm{bed}}}{E_{R,\\mathrm{bed}}+E_{R,\\mathrm{bank}}} \\\\\n   \\mathrm{RTE}_{\\mathrm{bank}} = 1 - RTE_{\\mathrm{bed}}\n\\end{gathered}\n\\] And the final actual eroded amount for the bed and bank is the maximum between \\(\\mathrm{RTE}\n\\subtext{\\mathrm{sed}}{exeff}\\) and the erosion potential \\(E_R\\). Total eroded amount of sediment \\(\\subtext{\\mathrm{sed}}{erod}\\) is then the sum of the eroded sediment coming from the storage of previously deposited sediment and the river bed/bank erosion.\n\n\nRiver deposition\nAs sediments have a higher density than water, moving sediments in water can be deposited in the river bed. The deposition process depends on the mass of the sediment, but also on flow characteristics such as velocity. In wflow_sediment, as in SWAT, deposition is modelled with Einstein’s equation (Neitsch et al, 2011): \\[\n   \\subtext{P}{dep}=\\left(1-\\dfrac{1}{e^{x}}\\right)100\n\\] where \\(\\subtext{P}{dep}\\) is the percentage of sediments that is deposited on the river bed and x is a parameter calculated with: \\[\n   x = \\dfrac{1.055 L  \\omega_{s}}{u h}\n\\] where \\(\\SIb{L}{m}\\) and \\(\\SIb{h}{m}\\) are channel length and water height, \\(\\SIb{\\omega_s}{m\ns^{-1}}\\) is the particle settling velocity calculated with Stokes’ formula and \\(\\SIb{u}{m\ns^{-1}}\\) is the mean flow velocity. The calculated percentage is then subtracted from the amount of sediment input and eroded river sediment for each particle size class (\\(\\subtext{\\mathrm{sed}}{dep} = \\subtext{P}{dep}/100 (\\subtext{\\mathrm{sed}}{in} +\n\\subtext{\\mathrm{sed}}{erod})\\)). Resulting deposited sediment are then stored in the river bed and can be re-mobilized in future time steps by erosion.\n\n\nMass balance and sediment concentration\nFinally after estimating inputs, deposition and erosion with the transport capacity of the flow, the amount of sediment actually leaving the river cell to go downstream is estimated using: \\[\n   \\subtext{\\mathrm{sed}}{out} = (\\subtext{\\mathrm{sed}}{in} + \\subtext{\\mathrm{sed}}{erod} - \\subtext{\\mathrm{sed}}{dep}) \\dfrac{\\subtext{V}{out}}{V}\n\\]\nwhere \\(\\SIb{\\subtext{\\mathrm{sed}}{out}}{ton}\\) is the amount of sediment leaving the river cell (tons), \\(\\SIb{\\subtext{\\mathrm{sed}}{in}}{ton}\\) is the amount of sediment coming into the river cell (storage from previous timestep, land erosion and sediment flux from upstream river cells), \\(\\SIb{\\subtext{\\mathrm{sed}}{erod}}{ton}\\) is the amount of sediment coming from river erosion, \\(\\SIb{\\subtext{\\mathrm{sed}}{dep}}{ton}\\) is the amount of deposited sediments, \\(\\SIb{\\subtext{V}{out}}{m^3}\\) is the volume of water leaving the river cell (surface runoff \\(Q\\) times timestep \\(\\Delta t\\)) and \\(\\SIb{V}{m^3}\\) is the total volume of water in the river cell (\\(\\subtext{V}{out}\\) plus storage \\(h W L\\)).\nA mass balance is then used to calculate the amount of sediment remaining in the cell at the end of the timestep \\((\\subtext{\\mathrm{sed}}{riv})_t\\): \\[\n   (\\subtext{\\mathrm{sed}}{riv})_t = (\\subtext{\\mathrm{sed}}{riv})_{t-1} + (\\subtext{\\mathrm{sed}}{land})_t + \\mathrm{upstream}\\left[(\\subtext{\\mathrm{sed}}{out})_{t-1}\\right] + (\\subtext{\\mathrm{sed}}{erod})_t - (\\subtext{\\mathrm{sed}}{dep})_t - (\\subtext{\\mathrm{sed}}{out})_t\n\\]\n\n\nLake and reservoir modelling\nApart from land and river, the hydrologic wflow_sbm model also handles lakes and reservoirs modelling. In wflow_sbm, lakes and large reservoirs are modelled using a 1D bucket model at the cell corresponding to the outlet. For the other cells belonging to the lake/reservoir which are not the outlet, processes such as precipitation and evaporation are filtered out and shifted to the outlet cell. wflow_sediment handles the lakes and reservoirs in the same way. If a cell belongs to a lake/reservoir and is not the outlet then the model assumes that no erosion/deposition of sediments is happening and the sediments are only all transported to the lake/reservoir outlet. Once the sediments reach the outlet, then sediments are deposited in the lake/reservoir according to Camp’s model (1945) (Verstraeten et al, 2000): \\[\n   \\mathrm{TE} = \\dfrac{\\omega_s}{u_{cr,\\mathrm{res}}} = \\dfrac{\\subtext{A}{res}}{\\subtext{Q}{out,res}} \\omega_s\n\\]\nwhere \\(\\mathrm{TE}\\) is the trapping efficiency of the lake/reservoir (or the fraction of particles trapped), \\(\\SIb{\\omega_{s}}{m s^{-1}}\\) is the particle velocity from Stokes, \\(\\SIb{\\subtext{u}{cr,res}}{m s^{-1}}\\) is the reservoir’s critical settling velocity which is equal to the reservoir’s outflow \\(\\SIb{\\subtext{Q}{out,res}}{m^3 s^{-1}}\\) divided by the reservoir’s surface area \\(\\SIb{\\subtext{A}{res}}{m^2}\\).\nFor reservoirs, coarse sediment particles from the bed load are also assumed to be trapped by the dam structure. This adding trapping is taken into account with a reservoir trapping efficiency coefficient for large particles (between \\(0\\) and \\(1\\)). Depending on the type of the dam, all bed load particles are trapped (restrapefficiency = 1.0, for example for a gravity dam) or only partly (for example for run-of-the-river dams).\nLake and reservoir modelling is enabled in the model section of the TOML and require the extra following input arguments:\n[model]\ndoreservoir = true\ndolake = false\n\n[input.vertical]\n# Reservoir\nresareas = \"wflow_reservoirareas\"\n# Lake\nlakeareas = \"wflow_lakeareas\"\n\n[input.lateral.river]\n# Reservoir\nresarea = \"ResSimpleArea\"\nrestrapefficiency = \"ResTrapEff\"\nresareas = \"wflow_reservoirareas\"\nreslocs = \"wflow_reservoirlocs\"\n# Lake\nlakearea = \"LakeArea\"\nlakeareas = \"wflow_lakeareas\"\nlakelocs = \"wflow_lakelocs\"\nNote that in the inland part, lake and reservoir coverage are used to filter erosion and transport in overland flow.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Sediment flux"
    ]
  },
  {
    "objectID": "model_docs/lateral/sediment_flux.html#references",
    "href": "model_docs/lateral/sediment_flux.html#references",
    "title": "Sediment flux",
    "section": "References",
    "text": "References\n\nK.C. Abbaspour, J. Yang, I. Maximov, R. Siber, K. Bogner, J. Mieleitner, J. Zobrist, and R.Srinivasan. Modelling hydrology and water quality in the pre-alpine/alpine Thur watershed using SWAT. Journal of Hydrology, 333(2-4):413-430, 2007. 10.1016/j.jhydrol.2006.09.014\nP. Borrelli, M. Märker, P. Panagos, and B. Schütt. Modeling soil erosion and river sediment yield for an intermountain drainage basin of the Central Apennines, Italy. Catena, 114:45-58,\n\n10.1016/j.catena.2013.10.007\n\nF. Engelund and E. Hansen. A monograph on sediment transport in alluvial streams. Technical University of Denmark 0stervoldgade 10, Copenhagen K., 1967.\nG. Govers. Empirical relationships for the transport capacity of overland flow. IAHS Publication, (January 1990):45-63 ST, 1990.\nG.J Hanson and A Simon. Erodibility of cohesive streambeds in the loess area of the midwestern USA. Hydrological Processes, 15(May 1999):23-38, 2001.\nR Hessel and V Jetten. Suitability of transport equations in modelling soil erosion for a small Loess Plateau catchment. Engineering Geology, 91(1):56-71, 2007. 10.1016/j.enggeo.2006.12.013\nJ.P Julian, and R. Torres. Hydraulic erosion of cohesive riverbanks. Geomorphology, 76:193-206, 2006. 10.1016/j.geomorph.2005.11.003\nD.W. Knight, J.D. Demetriou, and M.E. Hamed. Boundary Shear in Smooth Rectangular Channels. J. Hydraul. Eng., 110(4):405-422, 1984. 10.1061/(ASCE)0733-9429(1987)113:1(120)\nS.L Neitsch, J.G Arnold, J.R Kiniry, and J.R Williams. SWAT Theoretical Documentation Version\n\nTexas Water Resources Institute, pages 1-647, 2011. 10.1016/j.scitotenv.2015.11.063\n\nC. Oeurng, S. Sauvage, and J.M. Sanchez-Perez. Assessment of hydrology, sediment and particulate organic carbon yield in a large agricultural catchment using the SWAT model. Journal of Hydrology, 401:145-153, 2011. 10.1016/j.hydrol.2011.02.017\nA. Simon, N. Pollen-Bankhead, and R.E Thomas. Development and application of a deterministic bank stability and toe erosion model for stream restoration. Geophysical Monograph Series, 194:453-474, 2011. 10.1029/2010GM001006\nG. Verstraeten and J. Poesen. Estimating trap efficiency of small reservoirs and ponds: methods and implications for the assessment of sediment yield. Progress in Physical Geography, 24(2):219-251, 2000. 10.1177/030913330002400204\nO. Vigiak, A. Malago, F. Bouraoui, M. Vanmaercke, and J. Poesen. Adapting SWAT hillslope erosion model to predict sediment concentrations and yields in large Basins. Science of the Total Environment, 538:855-875, 2015. 10.1016/j.scitotenv.2015.08.095\nO. Vigiak, A. Malago, F. Bouraoui, M. Vanmaercke, F. Obreja, J. Poesen, H. Habersack, J. Feher, and S. Groselj. Modelling sediment fluxes in the Danube River Basin with SWAT. Science of the Total Environment, 2017. 10.1016/j.scitotenv.2017.04.236",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Sediment flux"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html",
    "href": "model_docs/lateral/kinwave.html",
    "title": "Kinematic wave",
    "section": "",
    "text": "The main flow routing scheme available in Wflow.jl is the kinematic wave approach for channel and overland flow, assuming that water flow is mostly controlled by topography. The kinematic wave equations are (Chow, 1988):\n\\[\n\\begin{gathered}\n  \\dfrac{\\partial Q}{\\partial x} + \\dfrac{\\partial A}{\\partial t} = q,\\\\\n   A = \\alpha Q^{\\beta}.\n\\end{gathered}\n\\]\nThese equations can then be combined as a function of streamflow only:\n\\[\n    \\dfrac{\\partial Q}{\\partial x} + \\alpha \\beta Q^{\\beta - 1} \\dfrac{\\partial Q}{\\partial t} = q.\n\\]\nHere \\(\\SIb{Q}{m^3 s^{-1}}\\) is the surface runoff in the kinematic wave, \\(\\SIb{x}{m}\\) is the length of the runoff pathway, \\(\\SIb{A}{m}\\) is the cross-section area of the runoff pathway, \\(\\SIb{t}{s}\\) is the integration timestep and \\(\\alpha\\) and \\(\\beta\\) are unitless coefficients.\nThese equations are solved with a nonlinear scheme using Newton’s method and can also be iterated depending on the model space and time resolution. By default, the iterations are performed until a stable solution is reached (\\(\\epsilon &lt; 10^{-12}\\)). For larger models, the number of iterations can also be fixed for to a specific sub-timestep (in seconds) for both overland and channel flows to improve simulation time. To enable (fixed or not) iterations of the kinematic wave the following lines can be inserted in the TOML file of the model:\n[model]\n# Enable iterations of the kinematic wave\nkin_wave_iteration = true\n# Fixed sub-timestep for iterations of channel flow (river cells)\nkw_river_tstep = 900\n# Fixed sub-timestep for iterations of overland flow (land cells)\nkw_land_tstep = 3600\nThe \\(\\alpha\\) parameter of the kinematic wave is fixed. To estimate the wetted perimeter for the calculation of the \\(\\alpha\\) parameter a bankfull river depth map (default value is \\(\\SI{1.0}{m}\\)) for the river can be provided as follows:\n[input.lateral.river]\nbankfull_depth = \"wflow_riverdepth\"\nThe wetted perimeter of the river is based on half bankfull river depth. For the land part the wetted perimeter is based on the flow width.\nSimplified reservoir and lake models can be included as part of the river kinematic wave network.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#surface-routing",
    "href": "model_docs/lateral/kinwave.html#surface-routing",
    "title": "Kinematic wave",
    "section": "",
    "text": "The main flow routing scheme available in Wflow.jl is the kinematic wave approach for channel and overland flow, assuming that water flow is mostly controlled by topography. The kinematic wave equations are (Chow, 1988):\n\\[\n\\begin{gathered}\n  \\dfrac{\\partial Q}{\\partial x} + \\dfrac{\\partial A}{\\partial t} = q,\\\\\n   A = \\alpha Q^{\\beta}.\n\\end{gathered}\n\\]\nThese equations can then be combined as a function of streamflow only:\n\\[\n    \\dfrac{\\partial Q}{\\partial x} + \\alpha \\beta Q^{\\beta - 1} \\dfrac{\\partial Q}{\\partial t} = q.\n\\]\nHere \\(\\SIb{Q}{m^3 s^{-1}}\\) is the surface runoff in the kinematic wave, \\(\\SIb{x}{m}\\) is the length of the runoff pathway, \\(\\SIb{A}{m}\\) is the cross-section area of the runoff pathway, \\(\\SIb{t}{s}\\) is the integration timestep and \\(\\alpha\\) and \\(\\beta\\) are unitless coefficients.\nThese equations are solved with a nonlinear scheme using Newton’s method and can also be iterated depending on the model space and time resolution. By default, the iterations are performed until a stable solution is reached (\\(\\epsilon &lt; 10^{-12}\\)). For larger models, the number of iterations can also be fixed for to a specific sub-timestep (in seconds) for both overland and channel flows to improve simulation time. To enable (fixed or not) iterations of the kinematic wave the following lines can be inserted in the TOML file of the model:\n[model]\n# Enable iterations of the kinematic wave\nkin_wave_iteration = true\n# Fixed sub-timestep for iterations of channel flow (river cells)\nkw_river_tstep = 900\n# Fixed sub-timestep for iterations of overland flow (land cells)\nkw_land_tstep = 3600\nThe \\(\\alpha\\) parameter of the kinematic wave is fixed. To estimate the wetted perimeter for the calculation of the \\(\\alpha\\) parameter a bankfull river depth map (default value is \\(\\SI{1.0}{m}\\)) for the river can be provided as follows:\n[input.lateral.river]\nbankfull_depth = \"wflow_riverdepth\"\nThe wetted perimeter of the river is based on half bankfull river depth. For the land part the wetted perimeter is based on the flow width.\nSimplified reservoir and lake models can be included as part of the river kinematic wave network.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#inflow",
    "href": "model_docs/lateral/kinwave.html#inflow",
    "title": "Kinematic wave",
    "section": "Inflow",
    "text": "Inflow\nExternal water (supply/abstraction) inflow \\(\\SIb{}{m^3 s^{-1}}\\) can be added to the kinematic wave for surface water routing, as a cyclic parameter or as part of forcing (see also Input section).",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#abstractions",
    "href": "model_docs/lateral/kinwave.html#abstractions",
    "title": "Kinematic wave",
    "section": "Abstractions",
    "text": "Abstractions\nAbstractions from the river through the variable abstraction \\(\\SIb{}{m^3 s^{-1}}\\) are possible when water demand and allocation is computed. The variable abstraction is set from the water demand and allocation module each time step. The abstraction is divided by the length of the runoff pathway and subtracted from the lateral inflow of the kinematic wave routing scheme for river flow.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#subsurface-flow-routing",
    "href": "model_docs/lateral/kinwave.html#subsurface-flow-routing",
    "title": "Kinematic wave",
    "section": "Subsurface flow routing",
    "text": "Subsurface flow routing\nIn the SBM model the kinematic wave approach is used to route subsurface flow laterally. Different vertical hydraulic conductivity depth profiles are possible as part of the vertical SBM concept, and these profiles (after unit conversion) are also used to compute lateral subsurface flow. The following profiles (see SBM for a detailed description) are available: - exponential (default) - exponential_constant - layered - layered_exponential\nFor the profiles exponential and exponential_constant, the saturated store S is drained laterally by saturated downslope subsurface flow for a slope with width \\SIb{w}{m} according to:\n\\[\n    Q = K_0\\tan(\\beta)w\\begin{cases}\n    \\frac{1}{f}\\left(e^{-fz_i}-e^{-f\\subtext{z}{exp}}\\right) +\n    e^{-f\\subtext{z}{exp}}(z_t-\\subtext{z}{exp}) & \\text{if $z_i &lt; \\subtext{z}{exp}$}\\\\\n    \\\\\n    e^{-f\\subtext{z}{exp}}(z_t - z_i) & \\text{if $z_i \\ge \\subtext{z}{exp}$},\n    \\end{cases}\n\\]\nwhere \\(\\beta\\) is element slope angle, \\(\\SIb{Q}{m^3 d^{-1}}\\) is subsurface flow, \\(\\SIb{K_0}{m\nd^{-1}}\\) is the saturated hydraulic conductivity at the soil surface, \\(\\SIb{z_i}{m}\\) is the water table depth, \\(\\SIb{z_{t}}{m}\\) is the total soil depth, \\(\\SIb{f}{m^{-1}}\\) is a scaling parameter that controls the decrease of \\(K_0\\) with depth and \\(\\SIb{\\subtext{z}{exp}}{m}\\) is the depth from soil surface for which the exponential decline of \\(K_0\\) is valid. For the exponential profile, \\(\\subtext{z}{exp}\\) is equal to \\(z_t\\).\nCombining with the following continuity equation: \\[\n    (\\theta_s-\\theta_r)w\\frac{\\partial h}{\\partial t} = -\\frac{\\partial Q}{\\partial x} + wr\n\\]\nwhere \\(\\SIb{h}{m}\\) is the water table height, \\(\\SIb{x}{m}\\) is the distance downslope, and \\(\\SIb{r}{m d^{-1}}\\) is the net input rate to the saturated store. Substituting for \\(h\n(\\frac{\\partial Q}{\\partial h})\\), gives:\n\\[\n  \\frac{\\partial Q}{\\partial t} = -c\\frac{\\partial Q}{\\partial x} + cwr\n\\]\nwhere celerity \\(c\\) is calculated as follows: \\[\n    c = \\frac{K_0 \\tan(\\beta)}{\\theta_s-\\theta_r}\\begin{cases}\n    e^{-fz_i}\n    + e^{-f\\subtext{z}{exp}} & \\text{if $z_i &lt; \\subtext{z}{exp}$}\\\\\n    \\\\\n    e^{-f\\subtext{z}{exp}} & \\text{if $z_i \\ge \\subtext{z}{exp}$}.\n    \\end{cases}\n\\]\nFor the layered and layered_exponential profiles the equivalent horizontal hydraulic conductivity \\(\\SIb{K_h}{m d^{-1}}\\) is calculated for water table height \\(\\SIb{h = z_t-z_i}{m}\\) and lateral subsurface flow is calculated as follows:\n\\[\n  Q = K_h h \\tan(\\beta) w,\n\\]\nand celerity \\(c\\) is given by:\n\\[\n    c = \\frac{K_h \\tan(\\beta)}{\\theta_s-\\theta_r}.\n\\]\nThe kinematic wave equation for lateral subsurface flow is solved iteratively using Newton’s method.\n\n\n\n\n\n\nNote\n\n\n\nFor the lateral subsurface flow kinematic wave the model timestep is not adjusted. For certain model timestep and model grid size combinations this may result in loss of accuracy.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#multi-threading",
    "href": "model_docs/lateral/kinwave.html#multi-threading",
    "title": "Kinematic wave",
    "section": "Multi-Threading",
    "text": "Multi-Threading\nThe kinematic wave calculations for surface - and subsurface flow routing can be executed in parallel using multiple threads. In the model section of the TOML file, a minimum stream order can be provided to define subbasins for the river (default is 6) and land domain (default is 5). Subbasins are created at all confluences where each branch has a minimal stream order. Based on the subbasins a directed acyclic graph is created that controls the order of execution and which subbasins can run in parallel.\n[model]\nmin_streamorder_river = 5 # minimum stream order to delineate subbasins for river domain, default is 6\nmin_streamorder_land = 4  # minimum stream order to delineate subbasins for land domain, default is 5",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#subcatchment-flow",
    "href": "model_docs/lateral/kinwave.html#subcatchment-flow",
    "title": "Kinematic wave",
    "section": "Subcatchment flow",
    "text": "Subcatchment flow\nNormally the the kinematic wave is continuous throughout the model. By using the pits entry in the model and input sections of the TOML file all flow is at the subcatchment only (upstream of the pit locations, defined by the netCDF variable wflow_pits in the example below) and no flow is transferred from one subcatchment to another. This can be convenient when connecting the result of the model to a water allocation model such as Ribasim.\n[input]\n# these are not directly part of the model\npits = \"wflow_pits\"\n\n[model]\npits = true",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#limitations",
    "href": "model_docs/lateral/kinwave.html#limitations",
    "title": "Kinematic wave",
    "section": "Limitations",
    "text": "Limitations\nThe kinematic wave approach for channel, overland and lateral subsurface flow, assumes that the topography controls water flow mostly. This assumption holds for steep terrain, but in less steep terrain the hydraulic gradient is likely not equal to the surface slope (subsurface flow), or pressure differences and inertial momentum cannot be neglected (channel and overland flow). In addition, while the kinematic wave equations are solved with a nonlinear scheme using Newton’s method (Chow, 1988), other model equations are solved through a simple explicit scheme. In summary the following limitations apply:\n\nChannel flow, and to a lesser degree overland flow, may be unrealistic in terrain that is not steep, and where pressure forces and inertial momentum are important.\nThe lateral movement of subsurface flow may be very wrong in terrain that is not steep.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#external-inflows",
    "href": "model_docs/lateral/kinwave.html#external-inflows",
    "title": "Kinematic wave",
    "section": "External inflows",
    "text": "External inflows\nExternal inflows, for example water supply or abstractions, can be added to the kinematic wave via the inflow variable. For this, the user can supply a 2D map of the inflow, as a cyclic parameter or as part of forcing (see also Input section). These inflows are added or abstracted from the upstream inflow qin before running the kinematic wave to solve the impact on resulting q. In case of a negative inflow (abstractions), a minimum of zero is applied to the upstream flow qin.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/lateral/kinwave.html#references",
    "href": "model_docs/lateral/kinwave.html#references",
    "title": "Kinematic wave",
    "section": "References",
    "text": "References\n\nChow, V., Maidment, D. and Mays, L., 1988, Applied Hydrology. McGraw-Hill Book Company, New York.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Kinematic wave"
    ]
  },
  {
    "objectID": "model_docs/index.html",
    "href": "model_docs/index.html",
    "title": "About",
    "section": "",
    "text": "As opposed to the user guide, which describes the steps needed to build and apply a model in the software, this section explains the different model concepts that are available within the modelling framework of wflow. Descriptions are given regarding the model concepts with links to the original scientific papers which explain the concepts in more detail. The model parameters which influence the processes are also shown, using inline code blocks. An overview of all model parameters is also provided for easy reference, including their short names, long descriptions and their units (see parameters vertical concepts and parameters lateral concepts).",
    "crumbs": [
      "Model documentation",
      "About"
    ]
  },
  {
    "objectID": "model_docs/index.html#division-between-vertical-and-lateral",
    "href": "model_docs/index.html#division-between-vertical-and-lateral",
    "title": "About",
    "section": "Division between vertical and lateral",
    "text": "Division between vertical and lateral\nIn the documentation we talk of vertical and lateral concepts. These are components in the model that describe the vertical movement of water in each model grid cell and the lateral movement of water across grid cells.",
    "crumbs": [
      "Model documentation",
      "About"
    ]
  },
  {
    "objectID": "home/publications.html",
    "href": "home/publications.html",
    "title": "Publications",
    "section": "",
    "text": "For publications, please cite the following paper introducing Wflow.jl and describing the wflow_sbm concept, together with some case studies:\nvan Verseveld, W. J., Weerts, A. H., Visser, M., Buitink, J., Imhoff, R. O., Boisgontier, H., Bouaziz, L., Eilander, D., Hegnauer, M., ten Velden, C., and Russell, B., 2024. Wflow_sbm v0.7.3, a spatially distributed hydrological model: from global data to local applications. Geosci. Model Dev., 17, 3199–3234. https://doi.org/10.5194/gmd-17-3199-2024.\nTo cite a specific software version please use the DOI provided in the Zenodo badge , that points to the latest release. The DOIs of previous versions are also available at Zenodo. If you use a snapshot of the development (without a DOI) please cite as follows:\nvan Verseveld, Willem, Visser, Martijn, Buitink, Joost, Bouaziz, Laurène, Boisgontier, Hélène, Bootsma, Huite, Weerts, Albrecht, Baptista, Carlos Fernando, Pronk, Maarten, Eilander, Dirk, Hartgring, Sebastian, Dalmijn, Brendan, Hofer, Julian, Hegnauer, Mark, & Mendoza, Raul, (YEAR). Deltares/Wflow.jl: unstable-master. https://github.com/Deltares/Wflow.jl, obtained: DATE_OF_DOWNLOAD.",
    "crumbs": [
      "Home",
      "Publications"
    ]
  },
  {
    "objectID": "home/publications.html#citing-wflow",
    "href": "home/publications.html#citing-wflow",
    "title": "Publications",
    "section": "",
    "text": "For publications, please cite the following paper introducing Wflow.jl and describing the wflow_sbm concept, together with some case studies:\nvan Verseveld, W. J., Weerts, A. H., Visser, M., Buitink, J., Imhoff, R. O., Boisgontier, H., Bouaziz, L., Eilander, D., Hegnauer, M., ten Velden, C., and Russell, B., 2024. Wflow_sbm v0.7.3, a spatially distributed hydrological model: from global data to local applications. Geosci. Model Dev., 17, 3199–3234. https://doi.org/10.5194/gmd-17-3199-2024.\nTo cite a specific software version please use the DOI provided in the Zenodo badge , that points to the latest release. The DOIs of previous versions are also available at Zenodo. If you use a snapshot of the development (without a DOI) please cite as follows:\nvan Verseveld, Willem, Visser, Martijn, Buitink, Joost, Bouaziz, Laurène, Boisgontier, Hélène, Bootsma, Huite, Weerts, Albrecht, Baptista, Carlos Fernando, Pronk, Maarten, Eilander, Dirk, Hartgring, Sebastian, Dalmijn, Brendan, Hofer, Julian, Hegnauer, Mark, & Mendoza, Raul, (YEAR). Deltares/Wflow.jl: unstable-master. https://github.com/Deltares/Wflow.jl, obtained: DATE_OF_DOWNLOAD.",
    "crumbs": [
      "Home",
      "Publications"
    ]
  },
  {
    "objectID": "home/publications.html#publications-using-wflow",
    "href": "home/publications.html#publications-using-wflow",
    "title": "Publications",
    "section": "Publications using wflow",
    "text": "Publications using wflow\n\nPeer reviewed journal papers\nAerts, J. P. M., Hut, R. W., van de Giesen, N. C., Drost, N., van Verseveld, W. J., Weerts, A. H., and Hazenberg, P., 2022. Large-sample assessment of varying spatial resolution on the streamflow estimates of the wflow_sbm hydrological model. Hydrol. Earth Syst. Sci., 26, 4407–4430. https://doi.org/10.5194/hess-26-4407-2022.\nde Boer-Euser, T., Bouaziz, L., De Niel, J., Brauer, C., Dewals, B., Drogue, G., Fenicia, F., Grelier, B., Nossent, J., Pereira, F., Savenije, H., Thirel, G., Willems, P., 2017. Looking beyond general metrics for model comparison – lessons from an international model intercomparison study. Hydrol. Earth Syst. Sci. 21, 423–440. https://doi:10.5194/hess-21-423-2017.\nBouaziz, L.J.E., Fenicia, F., Thirel, G., de Boer-Euser, T., Buitink, J., Brauer, C.C., De Niel, J., Dewals, B.J., Drogue, G., Grelier, B., Melsen, L. A., Moustakas, S., Nossent, J., Pereira, F., Sprokkereef, E., Stam, J., Weerts, A.H., Willems, P., Savenije, H.H.G., Hrachowitz, M., 2021. Behind the scenes of streamflow model performance. Hydrol. Earth Syst. Sci., 25, 1069–1095. https://doi.org/10.5194/hess-25-1069-2021.\nBouaziz, L. J. E., Aalbers, E. E., Weerts, A. H., Hegnauer, M., Buiteveld, H., Lammersen, R., Stam, J., Sprokkereef, E., Savenije, H. H. G., and Hrachowitz, M., 2022. Ecosystem adaptation to climate change: the sensitivity of hydrological predictions to time-dynamic model parameters, Hydrol. Earth Syst. Sci., 26, 1295–1318. https://doi.org/10.5194/hess-26-1295-2022.\nBuskop, F.E., F. Sperna Weiland and B. van den Hurk, 2024. Amplifying exploration of regional climate risks: clustering future projections on regionally relevant impact drivers instead of emission scenarios, Environ. Res.: Climate, 3, 045030. https://iopscience.iop.org/article/10.1088/2752-5295/ad9f8f.\nCasson, D. R., Werner, M., Weerts, A., and Solomatine, D., 2018. Global re-analysis datasets to improve hydrological assessment and snow water equivalent estimation in a sub-Arctic watershed. Hydrol. Earth Syst. Sci., 22, 4685–4697. https://doi.org/10.5194/hess-22-4685-2018.\nDroppers, B., Rakovec, O., Avila, L., Azimi, S., Cortés-Torres N., De León Pérez, D., Imhoff, R., Francés, F., Kollet, S., Rigon, R., Weerts, A. & Samaniego, L, 2024. Multi-model hydrological reference dataset over continental Europe and an African basin. Sci Data, 11, 1009. https://doi.org/10.1038/s41597-024-03825-9.\nDroppers, B., Rakovec, O., Avila, L., Azimi, S., Cortés-Torres N., De León Pérez, D., Imhoff, R., Francés, F., Kollet, S., Rigon, R., Weerts, A. & Samaniego, L, 2024. Multi-model hydrological reference dataset over continental Europe and an African basin. Sci Data, 11, 1009. https://doi.org/10.1038/s41597-024-03825-9.\nEmerton, R.E., Stephens, E.M., Pappenberger, F., Pagano, T.C., Weerts, A.H., Wood, A.W., Salamon, P., Brown, J.D., Hjerdt, N., Donnelly, C., Baugh, C.A., Cloke, H.L., 2016. Continental and global scale flood forecasting systems. WIREs Water 3, 391–418. https://doi.org/10.1002/wat2.1137.\nGebremicael, T.G., Mohamed, Y.A., Van der Zaag, P., 2019. Attributing the hydrological impact of different land use types and their long-term dynamics through combining parsimonious hydrological modelling, alteration analysis and PLSR analysis. Science of The Total Environment, 660, 1155-1167, https://doi.org/10.1016/jscitotenv.2019.01.085.\nGiardino, A., Schrijvershof, R., Nederhoff, C.M., de Vroeg, H., Brière, C., Tonnon, P.-K., Caires, S., Walstra, D.J., Sosa, J., van Verseveld, W., Schellekens, J., Sloff, C.J., 2018. A quantitative assessment of human interventions and climate change on the West African sediment budget, Ocean & Coastal Management, 156, 249-265. https://doi.org/10.1016/j.ocecoaman.2017.11.008.\nHally, A., Caumont, O., Garrote, L., Richard, E., Weerts, A., Delogu, F., Fiori, E., Rebora, N., Parodi, A., Mihalović, A., Ivković, M., Dekić, L., van Verseveld, W., Nuissier, O., Ducrocq, V., D’Agostino, D., Galizia, A., Danovaro, E., Clematis, A., 2015. Hydrometeorological multi-model ensemble simulations of the 4 November 2011 flash flood event in Genoa, Italy, in the framework of the DRIHM project. Nat. Hazards Earth Syst. Sci. 15, 537–555. https://doi:10.5194/nhess-15-537-2015.\nHassaballah, K., Mohamed, Y., Uhlenbrook, S., and Biro, K., 2017. Analysis of streamflow response to land use and land cover changes using satellite data and hydrological modelling: case study of Dinder and Rahad tributaries of the Blue Nile (Ethiopia–Sudan), Hydrol. Earth Syst. Sci., 21, 5217–5242. https://doi.org/10.5194/hess-21-5217-2017.\nImhoff, R.O., Buitink, J., van Verseveld, W.J., Weerts, A.H., 2024. A fast high resolution distributed hydrological model for forecasting, climate scenarios and digital twin applications using wflow_sbm. Environmental Modelling & Software, 179, 106099. https://doi.org/10.1016/j.envsoft.2024.106099\nImhoff, R.O, van Verseveld, W.J., van Osnabrugge, B., Weerts, A.H., 2020. Scaling Point-Scale (Pedo)transfer Functions to Seamless Large-Domain Parameter Estimates for High-Resolution Distributed Hydrologic Modeling: An Example for the Rhine River. Water Resources Research, 56, e2019WR026807. https://doi.org/10.1029/2019WR026807.\nImhoff, R.O., van Verseveld, W., van Osnabrugge, B., Weerts, A.H., 2020. Ruimtelijk schaalbare hydrologische modelparameters uit open-source omgevingsdata: een voorbeeld voor de Rijn. Stromingen: vakblad voor hydrologen, 26(3), 19-36 https://edepot.wur.nl/540682.\nJeuken, A., Bouaziz, L., Corzo, G., Alfonso, L., 2016. Analyzing Needs for Climate Change Adaptation in the Magdalena River Basin in Colombia, in: Filho, W.L., Musa, H., Cavan, G., O’Hare, P., Seixas, J. (Eds.), Climate Change Adaptation, Resilience and Hazards, Climate Change Management. Springer International Publishing, pp. 329–344 https://doi.org/10.1007/978-3-319-39880-8.\nLópez López, P., Wanders, N., Schellekens, J., Renzullo, L.J., Sutanudjaja, E.H., Bierkens, M.F.P., 2016. Improved large-scale hydrological modelling through the assimilation of streamflow and downscaled satellite soil moisture observations. Hydrol. Earth Syst. Sci., 20, 3059–3076. https://doi.org/10.5194/hess-20-3059-2016.\nPranoto, B., Soekarno, H., Hartulistiyoso, E., Nur Aidi, M., Sutrisno, D., Pohan, D., Radhika, Sutejo, B., Heru Kuncoro, A., Nahib, I., 2024. Integrating Flood Early Warning System (FEWS) for Optimizing Small Hydropower Sites: A West Java Case Study. EVERGREEN Joint Journal of Novel Carbon Resource Sciences & Green Asia Strategy, 11, 3, 2691-2699. https://www.tj.kyushu-u.ac.jp/evergreen/contents/EG2024-11_3_content/pdf/p2691-2699.pdf\nRakovec, O., Weerts, A.H., Sumihar, J., Uijlenhoet, R., 2015. Operational aspects of asynchronous filtering for flood forecasting. Hydrol. Earth Syst. Sci., 19, 2911–2924, https://doi.org/10.5194/hess-19-2911-2015.\nRatri, D.N., A.H. Weerts, R. Muharsyah, K. Whan, A. Klein Tank, E. Aldrian, M. H. Hariadi, Calibration of ECMWF SEAS5 based streamflow forecast in Seasonal hydrological forecasting for Citarum river basin, West Java, Indonesia, Journal of Hydrology: Regional Studies,45,101305, https://doi.org/10.1016/j.ejrh.2022.101305.\nRusli, S.R., A.H. Weerts, A. Taufiq, V. Bense, 2021. Estimating water balance components and their uncertainty bounds in highly groundwater-dependent and data-scarce area: An example for the Upper Citarum basin, J. Hydrol. Regional Studies, https://doi.org/10.1016/j.ejrh.2021.100911.\nRusli, S.R., V.F. Bense, A. Taufiq, A.H. Weerts,2023. Quantifying basin-scale changes in groundwater storage using GRACE and one-way coupled hydrological and groundwater flow model in the data-scarce Bandung groundwater Basin, Indonesia, Groundwater for Sustainable Development,22, 100953, https://doi.org/10.1016/j.gsd.2023.100953.\nRusli, S.R., A.H. Weerts, S.M.T. Mustafa, D.E. Irawan, A. Taufiq, V.F. Bense, 2023. Quantifying aquifer interaction using numerical groundwater flow model evaluated by environmental water tracer data: Application to the data-scarce area of the Bandung groundwater basin, West Java, Indonesia, Journal of Hydrology: Regional Studies, 50, https://doi.org/10.1016/j.ejrh.2023.101585.\nRusli, S. R., Bense, V. F., Mustafa, S. M. T., and Weerts, A. H.,2024. The impact of future changes in climate variables and groundwater abstraction on basin-scale groundwater availability, Hydrol. Earth Syst. Sci., 28, 5107–5131, https://doi.org/10.5194/hess-28-5107-2024, https://doi.org/10.5194/hess-28-5107-2024.\nSchaller, N., Sillmann, J., Müller, M., Haarsma, R., Hazeleger, W., Hegdahl, T.J., Kelder, T., van den Oord, G., Weerts, A., Whan, K., 2020. The role of spatial and temporal model resolution in a flood event storyline approach in western Norway. Weather and Climate Extremes, doi: https://doi.org/10.1016/j.wace.2020.100259.\nSeizarwati, W. and M. Syahidah, 2021. Rainfall-Runoff Simulation for Water Availability Estimation in Small Island Using Distributed Hydrological Model wflow. IOP Conf. Ser.: Earth Environ. Sci., 930,012050, doi:10.1088/1755-1315/930/1/012050. https://iopscience.iop.org/article/10.1088/1755-1315/930/1/012050/pdf\nSperna Weiland, F.C., R.D. Visser, P. Greve, B. Bisselink, L. Brunner and A.H. Weerts, 2021. Estimating Regionalized Hydrological Impacts of Climate Change Over Europe by Performance-Based Weighting of CORDEX Projections, Frontiers of Water, https://doi.org/10.3389/frwa.2021.713537.\nTangdamrongsub, N., Steele-Dunne, S.C., Gunter, B.C., Ditmar, P.G., Weerts, A.H., 2015. Data assimilation of GRACE terrestrial water storage estimates into a regional hydrological model of the Rhine River basin. Hydrol. Earth Syst. Sci. 19, 2079–2100. https://doi:10.5194/hess-19-2079-2015.\nvan der Laan, E., P. Hazenberg, A.H. Weerts, 2024. Simulation of long-term storage dynamics of headwater reservoirs across the globe using public cloud computing infrastructure. Science of The Total Environment, 172678, https://doi.org/10.1016/j.scitotenv.2024.172678.\nPranoto, B., Soekarno, H., Hartulistiyoso, E., Nur Aidi, M., Sutrisno, D., Pohan, D., Radhika, Sutejo, B., Heru Kuncoro, A., Nahib, I., 2024. Integrating Flood Early Warning System (FEWS) for Optimizing Small Hydropower Sites: A West Java Case Study. EVERGREEN Joint Journal of Novel Carbon Resource Sciences & Green Asia Strategy, 11, 3, 2691-2699. https://www.tj.kyushu-u.ac.jp/evergreen/contents/EG2024-11_3_content/pdf/p2691-2699.pdf\nvan Osnabrugge, B., Weerts, A.H., Uijlenhoet, R., 2017. genRE: A method to extend gridded precipitation climatology data sets in near real-time for hydrological forecasting purposes. Water Resources Research, 53. https://doi.org/10.1002/2017WR021201.\nvan Osnabrugge, B., Uijlenhoet, R., Weerts, A., 2019. Contribution of potential evaporation forecasts to 10-day streamflow forecast skill for the Rhine River, Hydrol. Earth Syst. Sci., 23, 1453–1467, https://doi.org/10.5194/hess-23-1453-2019.\nvan der Vat, M., Boderie, P., Bons, K.A., Hegnauer, M., Hendriksen, G., van Oorschot, M., Ottow, B., Roelofsen, F., Sankhua, R.N., Sinha, S.K., Warren, A., Young, W., 2019. Participatory Modelling of Surface and Groundwater to Support Strategic Planning in the Ganga Basin in India. Water, 11, 2443. https://doi.org/10.3390/w11122443.\nWannasin, C., Brauer, C. C., Uijlenhoet, R., van Verseveld, W. J., Weerts, A. H., 2021. Daily flow simulation in Thailand Part I: Testing a distributed hydrological model with seamless parameter maps based on global data. Journal of Hydrology: Regional Studies, 34, 1-19. https://doi.org/10.1016/j.ejrh.2021.100794.\nWannasin, C., Brauer, C. C., Uijlenhoet, R., van Verseveld, W. J., Weerts, A. H., 2021. Daily flow simulation in Thailand Part II: Unraveling effects of reservoir operation. Journal of Hydrology: RegionalStudies, 34, 1-17. https://doi.org/10.1016/j.ejrh.2021.100792.\nWang, X., Zhang, J., Babovic, V., 2016. Improving real-time forecasting of water quality indicators with combination of process-based models and data assimilation technique. Ecological Indicators 66, 428–439. https://doi:10.1016/j.ecolind.2016.02.016.\n\n\nPhD, MSc, BSc Theses & Internship reports\nAbdelnour, A., 2022. Bias Correction of Climate Simulations to Assess Climate Change Impacts on Low Flows in the Rhine River, MSc thesis, Delft Universitry of technology, https://repository.tudelft.nl/islandora/object/uuid:50489399-cbd2-467f-9b82-98e5f3e371e9.\nAli, M.A., 2023. Machine learning for predicting spatially variable lateral hydraulic conductivity: a step towards efficient hydrological model calibration and global applicability, Intersnhip report, Deltares.\nArnal, L., 2014. An intercomparison of flood forecasting models for the Meuse River basin, MSc Thesis, Vrije Universiteit, Amsterdam, https://hal.inrae.fr/hal-02600749.\nAlkemade, G., 2019. Routing and calibration of distributed hydrological models, MSc Thesis, Vrije Universiteit, Amsterdam, Faculty of Science, Hydrology.\nAzadeh Karami Fard, 2015. Modeling runoff of an Ethiopian catchment with WFLOW, MSc. Thesis, Vrije Universiteit, Amsterdam.\nBenschop, J., 2023. The application of hybrid lateral routing in hydrological simulations of the Rhine catchment, MSc Thesis, Hydrology and Environmental Hydraulics Group, Wageningen University.\nBeusen, B., 2021. The effect of rooting depth on discharge and evapotranspiration in (semi-)arid areas, MSc Thesis, Hydrology and Quantitative Water Management Group, Wageningen University.\nBeusen, B., 2021. Plastic transport and the effect of climate change in the Rhine, Internship report, Deltares.\nBouaziz, L. J. E., 2021. Internal processes in hydrological models: A glance at the Meuse basin from space. Delft University of Technology, Delft, the Netherlands, Doctoral dissertation, https://doi.org/10.4233/uuid:09d84cc1-27e2-4327-a8c7-207a75952061.\nHartgring, S., 2023. On Forecasting the Rur River: Using hindcasts and forecasts of the 2021 flood event to improve understanding of flood forecasting in the Rur catchment. Delft University of Technology, Delft, the Netherlands, MSc thesis, http://resolver.tudelft.nl/uuid:2909d997-a983-490a-a588-87119998543a.\nJaime, D.E.V, 2021. Ensemble hydrological forecasts to derive extreme return periods: Case Study of the Overijsselse Vecht River using the wflow_sbm model, MSc thesis, Unesco IHE, Delft.\nLópez López, P., 2018. Application of Global Hydrological Datasets for River Basin Modelling Utrecht University, Utrecht, the Netherlands, pp. 1-214, Doctoral dissertation, http://dspace.library.uu.nl/handle/1874/364148.\nMaat, W.H., 2015. Simulating discharges and forecasting floods using a conceptual rainfall-runoff model for the Bolivian Mamoré basin, MSc Thesis, University of Twente, Enschede. https://essay.utwente.nl/67046/.\nvan Osnabrugge, B., 2020. Interpolate, simulate, assimilate: operational aspects of improving hydrological forecasts in the Rhine basin. Wageningen University, Doctoral dissertation, https://doi.org/10.18174/513157.\nRohrmueller, I., 2019. BENCHMARKING THE NEW WFLOW DISTRIBUTED HYDROLOGICAL MODEL, MSc Thesis, School of Engineering - Newcastle University.\nRusli, S.R., 2024. Deepening the quantitative understanding of groundwater systems in data-scarce areas: application in the Bandung Groundwater Basin, Indonesia. Wageningen University, Doctoral dissertation, https://doi.org/10.18174/640983.\nTretjakova, D., 2015. Investigating the effect of using fully-distributed model and data assimilation on the performance of hydrological forecasting in the Karasu catchment, Turkey, MSc thesis, Wageningen University.\nvan der Gaast, R.H., 2024. Evaluating the transferability of data-driven pedo-transfer functions for the wflow_sbm parameter KsatHorFrac in central and Western Europe. Universiteit Twente, Enschede, The Netherlands, https://essay.utwente.nl/103634/1/vandergaast_MA_ET.pdf.\nVerbrugge, M., 2019. Reservoir Operation Optimization, a case study in the Chao Phraya Basin, BSc thesis, Hydrology and Quantitative Water Management Group, Wageningen University.\nVerbrugge, M., 2023. Bias-correcting meteorological forcing to improve seasonal discharge forecasting of the Rhine, Internship report, Deltares.\nViguures, P., 2020. Modelling of flash floods in current and future climate with high resolution convection permitting regional climate models in the European Alps, MSc Thesis, Wageningen University.\nVisser, B., 2020. Impact of climate change on local water resources of European catchments, Intersnhip report, Deltares.\nWannasin, C., 2023. Modelling and forecasting daily streamflow with reservoir operation in the upper Chao Phraya River basin, Thailand. Wageningen University, Doctoral dissertation, https://doi.org/10.18174/584572.\n\n\nReports\nWorld Bank. 2021. Plastic Waste Discharges from Rivers and Coastlines in Indonesia. Marine Plastics Series;. World Bank, Washington, DC. © World Bank, https://openknowledge.worldbank.org/handle/10986/35607, License: CC BY 3.0 IGO.\nWorld Meteorological Organization (WMO), 2023. State of Global Water Resources report 2022, WMO-No. 1333, https://library.wmo.int/idurl/4/68473.\nWorld Meteorological Organization (WMO), 2024. State of Global Water Resources report 2023, WMO-No. 1362, https://library.wmo.int/idurl/4/69033.",
    "crumbs": [
      "Home",
      "Publications"
    ]
  },
  {
    "objectID": "getting_started/running_wflow.html",
    "href": "getting_started/running_wflow.html",
    "title": "Running a simulation",
    "section": "",
    "text": "Once you installed Julia and Wflow.jl, a simulation can be started from the command line as follows:\njulia -e 'using Wflow; Wflow.run()' path/to/config.toml\nFurthermore, it is possible to write a Julia script to run a simulation. Example data to explore how this works can be found here.\nusing Wflow\nWflow.run(toml_path)\nJulia can also be used to modify settings after reading the settings file. In the example below, we show how to adjust the end date of the simulation.\nusing Dates\nconfig = Wflow.Config(toml_path)\nconfig.endtime = DateTime(\"2000-01-03T00:00:00\")\nWflow.run(config)",
    "crumbs": [
      "Getting started",
      "Running a simulation"
    ]
  },
  {
    "objectID": "getting_started/running_wflow.html#using-julia",
    "href": "getting_started/running_wflow.html#using-julia",
    "title": "Running a simulation",
    "section": "",
    "text": "Once you installed Julia and Wflow.jl, a simulation can be started from the command line as follows:\njulia -e 'using Wflow; Wflow.run()' path/to/config.toml\nFurthermore, it is possible to write a Julia script to run a simulation. Example data to explore how this works can be found here.\nusing Wflow\nWflow.run(toml_path)\nJulia can also be used to modify settings after reading the settings file. In the example below, we show how to adjust the end date of the simulation.\nusing Dates\nconfig = Wflow.Config(toml_path)\nconfig.endtime = DateTime(\"2000-01-03T00:00:00\")\nWflow.run(config)",
    "crumbs": [
      "Getting started",
      "Running a simulation"
    ]
  },
  {
    "objectID": "getting_started/running_wflow.html#using-the-command-line-interface",
    "href": "getting_started/running_wflow.html#using-the-command-line-interface",
    "title": "Running a simulation",
    "section": "Using the command line interface",
    "text": "Using the command line interface\nIf you don’t need the extra features of using wflow as a library, but just want to run simulations, the command line interface makes it easier to do so. It consists of a single executable, wflow_cli that accepts a single argument, the path to a TOML configuration file.\nBinaries of wflow_cli can be downloaded from our website download.deltares.nl, and are currently available for Windows.\nAfter installing you can see three folders in the installation directory. It is only the bin/wflow_cli that is directly used. All three folders need to stay together however. The share folder contains TOML files with more information about the build.\nbin\\wflow_cli\nlib\nshare\nSimply running wflow_cli with no arguments will give the following message:\nUsage: wflow_cli 'path/to/config.toml'\nWhen starting a run, you will see basic run information on the screen, as well as a progress bar, that gives an estimate of how much time is needed to finish the simulation:\n┌ Info: Run information\n│   model_type = \"sbm\"\n│   starttime = CFTime.DateTimeStandard(2000-01-01T00:00:00)\n│   dt = 86400 seconds\n│   endtime = CFTime.DateTimeStandard(2000-12-31T00:00:00)\n└   nthreads() = 4\n\nProgress: 100%|██████████████████████████████████████████████████| Time: 0:00:27",
    "crumbs": [
      "Getting started",
      "Running a simulation"
    ]
  },
  {
    "objectID": "getting_started/index.html",
    "href": "getting_started/index.html",
    "title": "Getting started",
    "section": "",
    "text": "Installing wflow\n    \n  \n  \n    \n      Download example models\n    \n  \n  \n    \n      Building a model\n    \n  \n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "getting_started/building_a_model.html",
    "href": "getting_started/building_a_model.html",
    "title": "Building a model from scratch",
    "section": "",
    "text": "hydroMT is a Python package, developed by Deltares, to build and analyze hydro models. It provides a generic model api with attributes to access the model schematization, (dynamic) forcing data, results and states.\nThe wflow plugin hydroMT-wflow of hydroMT can be used to build and analyze the following model configurations:\n\nwflow_sbm + kinematic wave routing\nwflow_sbm + local inertial river and floodplain\nwflow_sbm + local inertial river (1D) and land (2D)\nwflow_sediment\n\nTo learn more about the wflow plugin of this Python package, we refer to the hydroMT-wflow documentation.\nTo inspect or modify (for example in QGIS) the netCDF static data of these wflow models it is convenient to export the maps to a raster format. This can be done as part of the hydroMT-wflow plugin, see also the following example. It is also possible to create again the netCDF static data file based on the modified raster map stack.",
    "crumbs": [
      "Getting started",
      "Building a model from scratch"
    ]
  },
  {
    "objectID": "getting_started/building_a_model.html#hydromt-wflow",
    "href": "getting_started/building_a_model.html#hydromt-wflow",
    "title": "Building a model from scratch",
    "section": "",
    "text": "hydroMT is a Python package, developed by Deltares, to build and analyze hydro models. It provides a generic model api with attributes to access the model schematization, (dynamic) forcing data, results and states.\nThe wflow plugin hydroMT-wflow of hydroMT can be used to build and analyze the following model configurations:\n\nwflow_sbm + kinematic wave routing\nwflow_sbm + local inertial river and floodplain\nwflow_sbm + local inertial river (1D) and land (2D)\nwflow_sediment\n\nTo learn more about the wflow plugin of this Python package, we refer to the hydroMT-wflow documentation.\nTo inspect or modify (for example in QGIS) the netCDF static data of these wflow models it is convenient to export the maps to a raster format. This can be done as part of the hydroMT-wflow plugin, see also the following example. It is also possible to create again the netCDF static data file based on the modified raster map stack.",
    "crumbs": [
      "Getting started",
      "Building a model from scratch"
    ]
  },
  {
    "objectID": "getting_started/building_a_model.html#data-requirements",
    "href": "getting_started/building_a_model.html#data-requirements",
    "title": "Building a model from scratch",
    "section": "Data requirements",
    "text": "Data requirements\nThe actual data requirements depend on the application of the Model and the Model type. Both forcing and static data should be provided in netCDF format, with the same grid definition for forcing and static data. The only exception is storage and rating curves for lakes, that should be provided in CSV format, see also Additional settings for waterbodies.\n\nForcing data:\n\nPrecipitation\nPotential evapotranspiration\nTemperature (optional, only needed for snow and glacier modelling)\n\n\nThe requirements for static data (including model parameters) depend on the Model type. The following data is required for all Model types, but not directly part of a Model component:\n\nflow direction data (D8)\nriver map (location of the river)\nsub-catchment map (model domain)\n\nFor the flow direction (D8) data, the PCRaster ldd convention is used, see also PCRaster ldd. An approach to generate ldd data is to make use of the Python package pyflwdir:\n\nto upscale existing flow direction data as the 3 arcsec MERIT Hydro data (Yamazaki et al., 2019)\nor to derive flow directions from elevation data,\n\nsee also Eilander et al. (2021) for more information. Pyflwdir is also used by the hydroMT Python package described in the next paragraph. Another approach to generate ldd data is to make use of PCRaster functionality, see for example lddcreate.\nOptionally, but also not directly part of a model component are gauge locations, that are used to extract gridded data from certain locations.\nThe different supported model configurations are described in the section Model configurations. Wflow_sbm models have the vertical concept SBM in common and input parameters for this component are described in the SBM model parameters table. For wflow_sbm models there are two ways to include subsurface flow:\n\nThe kinematic wave approach (see section Subsurface flow routing) as part of the sbm model type. Parameters that are part of this component are described in the Lateral subsurface flow section of Model parameters. Input parameters for this component are derived from the SBM vertical concept and the land slope. One external parameter (ksathorfrac) is used to calculate the horizontal hydraulic conductivity at the soil surface kh_0.\nGroundwater flow (see section Groundwater flow component) as part of the sbm_gwf model type. For the unconfined aquifer the input parameters are described in the section Unconfined aquifer of Model parameters. The bottom (bottom) of the groundwater layer is derived from from the soilthickness [mm] parameter of SBM and the provided surface elevation altitude [m] as part of the static input. The area parameter is derived from the model grid. Parameters that are part of the boundary conditions of the unconfined aquifer are listed under Constant Head and Boundary conditions of the Model parameters section.\n\nMost hydrological model configurations make use of the kinematic wave surface routing (river flow, overland flow or both) and input data required for the river and overland flow components is described in Surface flow. There is also the option to use the local inertial model as part of the wflow_sbm models (model types sbm and sbm_gwf):\n\nfor river flow, see also the Local inertial river and floodplain model.\nfor 1D river flow and 2D overland flow combined, see also the Local inertial river (1D) and land (2D) model.\n\nInput parameters for this approach are described in River flow (local inertial), including the optional 1D floodplain schematization, and Overland flow (local inertial) of the Model parameters section.\nReservoirs or lakes can be part of the kinematic wave or local inertial model for river flow and input parameters are described in Reservoirs and Lakes.\nThe wflow_sediment model configuration consists of the vertical Soil Erosion concept and the input parameters for this concept are described in the Sediment section of the Model parameters. The parameters of the lateral Sediment Flux in overland flow concept are described in the Overland flow section of the Model parameters. Parameters of this component are not directly set by data from static input. The input parameters of the lateral concept River Sediment Model are listed in River flow of the Model parameters section.\nThe Model parameters section lists all the parameters per Model component and these Tables can also be used to check which parameters can be part of the output, see also Output netCDF section and Output CSV section.\nExample models can be found in the Example models section.",
    "crumbs": [
      "Getting started",
      "Building a model from scratch"
    ]
  },
  {
    "objectID": "getting_started/building_a_model.html#references",
    "href": "getting_started/building_a_model.html#references",
    "title": "Building a model from scratch",
    "section": "References",
    "text": "References\n\nYamazaki, D., Ikeshima, D., Sosa, J., Bates, P. D., Allen, G. H. and Pavelsky, T. M.: MERIT Hydro: A high‐resolution global hydrography map based on latest topography datasets, Water Resour. Res., 2019WR024873, doi:10.1029/2019WR024873, 2019.\nEilander, D., van Verseveld, W., Yamazaki, D., Weerts, A., Winsemius, H. C., and Ward, P. J.: A hydrography upscaling method for scale-invariant parametrization of distributed hydrological models, Hydrol. Earth Syst. Sci., 25, 5287–5313, https://doi.org/10.5194/hess-25-5287-2021, 2021.",
    "crumbs": [
      "Getting started",
      "Building a model from scratch"
    ]
  },
  {
    "objectID": "developments/julia_structs.html",
    "href": "developments/julia_structs.html",
    "title": "Julia structures",
    "section": "",
    "text": "Below the composite type that represents all different aspects of a Wflow.Model, such as the network, parameters, clock, model type, configuration and input and output.\nstruct Model{R &lt;: Routing, L &lt;: AbstractLandModel, T &lt;: AbstractModelType} &lt;:\n       AbstractModel{T}\n    config::Config      # all configuration options\n    network::Network    # connectivity information, directed graph\n    routing::R          # routing model (horizontal fluxes), moves along network\n    land::L             # land model simulating vertical fluxes, independent of each other\n    clock::Clock        # to keep track of simulation time\n    reader::NCReader    # provides the model with dynamic input\n    writer::Writer      # writes model output\n    type::T             # model type\nend\nThe lateral field of the struct Model can contain different lateral concepts. For each wflow model these different lateral concepts are mapped through the use of a NamedTuple. The vertical field of the struct Model always contains one vertical concept, for example the SBM vertical concept.\nBelow an example how lateral concepts are mapped for the SBM model through a NamedTuple:\n(subsurface = ssf, land = olf, river = rf)\nThe subsurface part is mapped to the lateral subsurface flow kinematic wave concept, the land part is mapped the overland flow kinematic wave concept and the river part is mapped to the river flow kinematic wave concept. Knowledge of this specific mapping is required to understand and correctly set input, output and state variables in the TOML configuration file, see also Config and TOML. This mapping is described in more detail for each model in the section Models. Also the struct of each mapped concept is provided, so one can check the internal variables in the code. These structs are defined as a parametric composite type, with type parameters between curly braces after the struct name. See also the next paragraph Vertical and lateral models for a more detailed description.",
    "crumbs": [
      "Developments",
      "Julia structures"
    ]
  },
  {
    "objectID": "developments/julia_structs.html#model",
    "href": "developments/julia_structs.html#model",
    "title": "Julia structures",
    "section": "",
    "text": "Below the composite type that represents all different aspects of a Wflow.Model, such as the network, parameters, clock, model type, configuration and input and output.\nstruct Model{R &lt;: Routing, L &lt;: AbstractLandModel, T &lt;: AbstractModelType} &lt;:\n       AbstractModel{T}\n    config::Config      # all configuration options\n    network::Network    # connectivity information, directed graph\n    routing::R          # routing model (horizontal fluxes), moves along network\n    land::L             # land model simulating vertical fluxes, independent of each other\n    clock::Clock        # to keep track of simulation time\n    reader::NCReader    # provides the model with dynamic input\n    writer::Writer      # writes model output\n    type::T             # model type\nend\nThe lateral field of the struct Model can contain different lateral concepts. For each wflow model these different lateral concepts are mapped through the use of a NamedTuple. The vertical field of the struct Model always contains one vertical concept, for example the SBM vertical concept.\nBelow an example how lateral concepts are mapped for the SBM model through a NamedTuple:\n(subsurface = ssf, land = olf, river = rf)\nThe subsurface part is mapped to the lateral subsurface flow kinematic wave concept, the land part is mapped the overland flow kinematic wave concept and the river part is mapped to the river flow kinematic wave concept. Knowledge of this specific mapping is required to understand and correctly set input, output and state variables in the TOML configuration file, see also Config and TOML. This mapping is described in more detail for each model in the section Models. Also the struct of each mapped concept is provided, so one can check the internal variables in the code. These structs are defined as a parametric composite type, with type parameters between curly braces after the struct name. See also the next paragraph Vertical and lateral models for a more detailed description.",
    "crumbs": [
      "Developments",
      "Julia structures"
    ]
  },
  {
    "objectID": "developments/julia_structs.html#vertical-and-lateral-models",
    "href": "developments/julia_structs.html#vertical-and-lateral-models",
    "title": "Julia structures",
    "section": "Vertical and lateral models",
    "text": "Vertical and lateral models\nThe different model concepts used in wflow are defined as parametric composite types. For example the vertical SBM concept is defined as follows: struct SBM{T,N,M}. T, N and M between curly braces after the struct name refer to type parameters, for more information about type parameters you can check out Type parameters. Since these parameters can be of any type, it is possible to declare an unlimited number of composite types. The type parameters are used to set the type of struct fields, below an example with a part of the SBM struct:\n@get_units @with_kw struct SBM{T,N,M}\n    # Model time step [s]\n    dt::T | \"s\"\n    # Maximum number of soil layers\n    maxlayers::Int | \"-\"\n    # number of cells\n    n::Int | \"-\"\n    # Number of soil layers\n    nlayers::Vector{Int} | \"-\"\n    # Number of unsaturated soil layers\n    n_unsatlayers::Vector{Int} | \"-\"\n    # Fraction of river [-]\n    riverfrac::Vector{T} | \"-\"\n    # Saturated water content (porosity) [mm mm⁻¹]\n    theta_s::Vector{T} | \"mm mm-1\"\n    # Residual water content [mm mm⁻¹]\n    theta_r::Vector{T} | \"mm mm-1\"\n    # Vertical hydraulic conductivity [mm Δt⁻¹] at soil surface\n    kv_0::Vector{T} | \"mm dt-1\"\n    # Muliplication factor [-] applied to kv_z (vertical flow)\n    kvfrac::Vector{SVector{N,T}} | \"-\"\nThe type parameter T is used in wflow as a subtype of AbstractFloat, allowing to store fields with a certain floating point precision (e.g. Float64 or Float32) in a flexible way. N refers to the maximum number of soil layers of the SBM soil column, and M refers to the maximum number of soil layers + 1. See also part of the following instance of SBM:\nsbm = SBM{Float,maxlayers,maxlayers + 1}(\n    dt = tosecond(dt),\n    maxlayers = maxlayers,\n    n = n,\nFor the other model concepts, we refer to the code to check these type parameters.",
    "crumbs": [
      "Developments",
      "Julia structures"
    ]
  },
  {
    "objectID": "developments/guide.html",
    "href": "developments/guide.html",
    "title": "Developers guide",
    "section": "",
    "text": "We welcome reporting of issues on our GitHub page. Please provide a minimum working example so we are able to reproduce the issue. Furthermore, we welcome contributions. We follow the ColPrac guide for collaborative practices. New contributors should make sure to read that guide.",
    "crumbs": [
      "Developments",
      "Developers guide"
    ]
  },
  {
    "objectID": "developments/guide.html#contributions-and-reporting-issues",
    "href": "developments/guide.html#contributions-and-reporting-issues",
    "title": "Developers guide",
    "section": "",
    "text": "We welcome reporting of issues on our GitHub page. Please provide a minimum working example so we are able to reproduce the issue. Furthermore, we welcome contributions. We follow the ColPrac guide for collaborative practices. New contributors should make sure to read that guide.",
    "crumbs": [
      "Developments",
      "Developers guide"
    ]
  },
  {
    "objectID": "developments/guide.html#styledecisions",
    "href": "developments/guide.html#styledecisions",
    "title": "Developers guide",
    "section": "Style/decisions",
    "text": "Style/decisions\n\nFor improved code readability, we decided to avoid non-ASCII characters for naming variables, structs, functions and macros. Using the non-ASCII character for built-in operators is still allowed. This change in naming convention is now in effect and all invalid uses of non-ASCII characters have been replaced by ASCII equivalents.",
    "crumbs": [
      "Developments",
      "Developers guide"
    ]
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "All notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog, and this project adheres to Semantic Versioning.",
    "crumbs": [
      "Home",
      "Changelog"
    ]
  },
  {
    "objectID": "changelog.html#unreleased",
    "href": "changelog.html#unreleased",
    "title": "Changelog",
    "section": "Unreleased",
    "text": "Unreleased\n\nFixed\n\nInitialization of LateralSSF variables ssf and ssfmax with vertical hydraulic conductivity profile exponential_constant. Removed parameter khfrac from the computation, as it is already part of parameter kh_0.\nMutating BMI model control functions (update, update_until and finalize) and extended mutating BMI functions (load_state and save_state) should return nothing.\nAdded downloading of testdata to Dockerfile, to ensure an image was able to build.\nThe reservoir (reservoir_index_f) and lake (lake_index_f) indices as part of network.river were not correct. These were mapped to their own index in the SimpleReservoir and Lake struct, and not to the corresponding river index. This resulted in incorrect surface water abstractions from reservoir and lake volumes, and surface water abstractions were set at zero at the wrong river locations.\nWflow ZMQ server: allow JSON reading and writing of NaN and Inf values to avoid a JSON spec error. For example, during initialization of a wflow model, some (diagnostic) model variables are initialized with NaN values.\nLimit flux from River boundary of GroundwaterFlow to unconfined aquifer based on available river storage (from river flow routing).\n\n\n\nChanged\n\nRemoved vertical concepts HBV and FLEXTopo.\nRemoved metadata macros exchange and grid_type. The macro grid_type is not required because this functionality is already part of BMI. The macro exchange is replaced by a function used by BMI. Remaining metadata macros get_units and grid_loc are only used by BMI.\nRefactor the vertical SBM concept: divide the long struct SBM into different model components for interception, snow, glacier, (open water) runoff, soil, water demand and allocation stored in the struct LandHydrologySBM. Additionally, the atmospheric forcing and a shared vegetation parameterset are stored as separate fields in struct LandHydrologySBM (with soil model SbmSoilModel). The model component structs have model variables, parameters and boundary_conditions (if applicable), including associated functions for initializing and updating these model components. The original long update function of the SBM soil part has been split into separate functions.\nRefactor the lateral (routing) components: as for the vertical SBM concept split the structs into variables, parameters and boundary_conditions (if applicable).\nRefactor the sediment concept: similar to the refactor of SBM concept, the sediment model has been split into three main structures. SoilLoss was split into rainfall_erosion, overland_flow_erosion and (total) soil_erosion concepts. OverlandFlowSediment has been split into transport_capacity, sediment_flux and to_river concepts. RiverSediment has been split into transport_capacity, potential_erosion, sediment_flux and concentrations concepts.\nTimestepping method parameters for solving the kinematic wave and local inertial approaches for river and overland flow are moved to a TimeStepping struct. The timestepping implementation for the kinematic wave is now similar to the local inertial method: a stable timestep is computed for each sub timestep (or a fixed sub timestep is used) as part of a while loop (for each model timestep).\nMap internal model variable and parameter names to CSDMS Standard Names. The previous one to one mapping can be used to output model variables and parameters (TOML config file), but is not considered as part of the public API.\nRefactor TOML configuration file, also as a result of using internal (CSDMS) standard names. Most important changes include: there is now a distinction between static, cyclic and forcing input ([input.static], [input.cyclic] and [input.forcing]) without the need to specify the internal cyclic and forcing variables in a list (only an external name mapping is required), state variables are listed below the [state.variables] TOML section and use of more clearly defined TOML output sections.\n\n\n\nAdded\n\nSupport direct output of snow and glacier melt, and add computation of snow water equivalent (SWE).",
    "crumbs": [
      "Home",
      "Changelog"
    ]
  },
  {
    "objectID": "changelog.html#v0.x-releases",
    "href": "changelog.html#v0.x-releases",
    "title": "Changelog",
    "section": "v0.x releases",
    "text": "v0.x releases\n\nv0.8.1 - 2024-08-27\n\nFixed\n\nReduce allocations in update of vertical SBM concept.\n\n\n\n\nv0.8.0 - 2024-08-19\n\nFixed\n\nAdded missing BMI function get_grid_size, it is used for unstructured grids, for example to get the length of arrays returned by BMI functions get_grid_x and get_grid_y.\nAdded a check for the solution of the quadratic equation as part of the Modified Puls approach for lake outflow. Lower limit should be zero (very small negative values can occur).\nLimit lake evaporation (added variable actevap) and lake outflow to prevent negative lake storage. The variable actevap has also been added to the reservoir module.\nThe set_states function for model type sbm with local inertial routing for river and land component.\nInflow to reservoir and lake locations for local inertial routing: 1) with floodplain routing, the floodplain discharge was not added to the inflow of these locations, 2) the to_river variable from overland flow and lateral subsurface flow was not added to the inflow of these locations.\nClose netCDF NCDataset with state variables in extended BMI function save_state.\nFor the computation of Gash interception model parameter e_r multiply the precipitation input with the canopy fraction (this was only done for the potential evapotranspiration input).\nFunction BMI.update_until could throw an InexactError: Int64 caused by a not whole number, representing how many times (steps) an update of a wflow model is required. This is fixed by using divrem for the computation of the number of steps in this function. An error is thrown when the absolute remainder of divrem is larger than eps(), or when the number of steps is negative.\nFixed internal and external broken links in docs.\nThe internal time step of the local inertial model (stable_timestep function) can get zero when LoopVectorization is applied (@tturbo) to the for loop of these functions. This issue occured on a virtual machine, Windows 10 Enterprise, with Intel(R) Xeon(R) Gold 6144 CPU (2 processors). This has been fixed by replacing @tturbo with reduction of Polyester.jl.\nFixed required states of the model type sbm_gwf: added h_av for the river and land domain.\nFor the constanthead boundary of GroundwaterFlow the head should not be changed (was set to top elevation of the aquifer if head &gt; top), and exfiltwater should be 0 for these boundary cells.\n\n\n\nChanged\n\nStop exposing scalar variables through BMI. The BMI.get_value_ptr function was not working correctly for scalar model variables (a view was applied). Only a few scalar model parameters are defined, and it is not expected that exposing these variables is required (e.g. for model coupling) while code changes for these variables (including struct fields) are required.\nThe local inertial routing (constant) river boundary condition depth at a ghost node (downstream river outlet) was set at 0.0 in the code and can now be provided through the model parameter netCDF file (riverdepth_bc). In addition, the boundary condition river length dl at a ghost node should be set through the model parameter netCDF file (riverlength_bc), providing this boundary condition through the [model] settings in the TOML file (model.riverlength_bc) has been deprecated.\nAs part of the vertical SBM concept: 1) add variable net_runoff (land runoff minus actual open water evaporation ae_openw_l) and 2) change the definition of variable runoff by removing the subtraction of ae_openw_l (total land runoff). The variable net_runoff is now input to the kinematic wave for overland flow (replaces the original runoff variable as input). The lower limit of the original runoff variable was set at zero, which may result in water balance errors. This lower limit was implemented in the Python version of wflow_sbm, to avoid a very slow kinematic wave solution for surface flow computation (no distinction between a kinematic wave for overland and river flow). When in the Python version of wflow_sbm the kinematic wave for surface flow was split into a river and land component, the lower limit was removed for river runoff (net_runoff_river), but not for land runoff.\nAlways use fractions for the computation of potential evapotranspiration (interception and transpiration) and potential evaporation (open water and soil). Replaced variable et_reftopot by crop coefficient kc (use of et_reftopot has been deprecated).\nFor improved code readability it is now discouraged to use non-ASCII characters for the names of variables, structs, functions and macros. Using the non-ASCII character for built-in operators is still allowed. This change in naming convention is now in effect and all invalid uses of non-ASCII characters have been replaced by ASCII equivalents. This change also impacts the TOML keys kv₀, θᵣ and θₛ. These keys have been replaced with the ASCII versions kv_0, theta_r and theta_s in v0.4.0 and the old keys are not supported anymore.\nDocs: 1) improved description of different model configurations in model-setup.md, also in relation to hydromt_wflow in docs, 2) citing info related to wflow_sbm publication in Geosci. Model Dev. (from in review to published).\nRoot water uptake reduction (Feddes): 1) extend critical pressure head parameters with h3_low and h3_high, 2) all critical pressure head parameters can be set (values for h1, h2 and h3 were fixed) and 3) the root water uptake reduction coefficient \\alpha can be set at 0 (default is 1) at critical pressure head h1 (through the model parameter alpha_h1).\nFor the actual transpiration computation in SBM, the potential transpiration is partitioned over the soil layers with roots according to the model parameter rootfraction (fraction of the total root length in a soil layer). Previously, for each soil layer (from top to bottom) the actual transpiration was computed, and the remaining potential transpiration was used in the next soil layer.\n\n\n\nAdded\n\nTotal water storage as an export variable for SBM concept. This is the total water stored per grid cell in millimeters. Excluded from this variable are the floodplain, lakes and reservoirs.\nChecks to see if all states are covered in the .toml file. If not all states are covered, an error is thrown. If there are more states specified than required, these states are ignored (with a warning in the logging), and the simulation will continue.\nSupport different vertical hydraulic conductivity profiles for the SBM concept. See also the following sections: The SBM soil water accounting scheme and Subsurface flow routing for a short description.\nLocal inertial routing to sbm_gwf model type.\nWater demand and allocation computations for model types sbm and sbm_gwf.\n\n\n\n\nv0.7.3 - 2024-01-12\n\nFixed\n\nDocumentation: add leakage term to the wflow_sbm figure, document external input parameter ksathorfrac and fix description of adding external inflow to the kinematic wave.\nFixed BMI functions (e.g. BMI.get_value) that deviated from BMI specifications (BasicModelInterface.jl), including function arguments, return types and the BMI specification that arrays are always flattened (this was not the case for variables stored as 2-dimensional arrays or as vector of SVectors).\nBump compat for NCDatasets to 0.13, 0.14.\nThe solution for lake outflow as part of the Modified Puls Approach. The inflow and outflow variables are defined for period Δt, and not at t1 and t2 (instantaneous) as in the original mass balance equation of the Modified Puls Approach. Because of this, the terms of the quadratic equation (and solution) were fixed.\nUse kvfrac for the computation of vertical saturated hydraulic conductivity at the bottom of the soil layer, since kvfrac is also used for the computation of vertical unsaturated flow.\n\n\n\nChanged\n\nFor cyclic parameters different cyclic time inputs are supported (only one common cyclic time (for example daily or monthly) was allowed).\nBMI: 1) added grid information (type and location) and whether a variable can be exchanged to metadata Structs, 2) extend model grid functions for wflow components that store variables on edges (local inertial model) with get_grid_edge_count and get_grid_edge_nodes.\n\n\n\nAdded\n\nFunctions for loading and saving states and getting the starttime in Unix time format. This is convenient for coupling with OpenDA (and other external) software. The set states functionality from the initialization function has been moved to a separate set_states function for each Model type, to support loading states independent of initialization.\n\n\n\n\nv0.7.2 - 2023-09-27\n\nFixed\n\nWater balance of modified Rutter interception model. The sum of the stemflow partitioning coefficient pt and free throughfall coefficient p could get larger than 1, resulting in an overestimation of stemflow and throughfall amounts and negative net interception amounts. And the first drainage amount dd, controlled by a change over time in canopy storage capacity cmax, should not be subtracted from precipitation to compute net interception.\nThe netinterception (net interception) computed by the modified Rutter interception model was stored as interception in SBM, while this should be the interception (interception loss by evaporation) output of the modified Rutter interception model. The interception of SBM is used to compute the total actual evapotranspiration actevap.\n\n\n\n\nv0.7.1 - 2023-06-30\n\nFixed\n\nState initialization of 1D floodplain volume. In the initialization function the wrong field name of type FloodPlainProfile was used (area instead of a).\n\n\n\n\nv0.7.0 - 2023-06-12\n\nFixed\n\nBMI.get_time_units now gets called on the model rather than the type, like all other BMI functions, except BMI.initialize. Also it returns “s” instead of “seconds since 1970-01-01T00:00:00”, in line with the BMI specification.\nAdded the interception component to total actual evapotranspiration actevap of SBM (was defined as the sum of soil evaporation, transpiration and open water evaporation).\n\n\n\nChanged\n\nThe time values returned in the BMI interface are no longer in seconds since 1970, but in seconds since the model start time. This is more in line with standard BMI practices.\nThe starttime was defined one model timestep Δt ahead of the actual model time (the initial conditions timestamp (state time)). As a consequence this was also the case for the current model time. To allow for an easier interpretation of wflow time handling, either through BMI or directly, the starttime is now equal to the state time, resulting in current model times without an offset.\nUsing more than 8 threads can result in too much overhead with Threads.@threads. After performance testing, this has been changed for kinematic wave routing and the vertical SBM concept to spawning tasks with Threads@spawn for number of threads &lt;= 8, where each task iterates over a chunk of size basesize. For more than 8 threads the low overhead threading Polyester.@batch (including the minbatch argument) is used. For local inertial routing the use of Threads.@threads has been changed to threaded loop vectorization (river and 1D floodplain local inertial momentum equation) and Polyester.@batch.\n\n\n\nAdded\n\nFor (regulated) lakes with rating curve of type 1 (H-Q table), lake storage above the maximumstorage (based on maximum water level from the H-Q table) is spilled instantaneously (overflow) from the lake.\nAdded support to use sum as a reducer function for csv and scalar output options.\n\n\n\n\nv0.6.3 - 2023-03-01\n\nFixed\n\nRemoved error when _FillValue is present in the time dimension of the forcing netCDF file. The simulation is allowed to continue with the attribute present, given that there are no missing values in the time dimension. This is checked by the code, and an error is thrown if this is the case.\nColumn index of daily lake rating curves. This was incorrectly based on dayofyear with a maximum of 365. The column index should be based on julian day (leap days are not counted).\n\n\n\nChanged\n\nNCDatasets version. Reading the time dimension of multifile netCDF file became very slow since NCDatasets v0.12.4, this issue has been solved in v0.12.11.\nStore the time dimension of the forcing netCDF file as part of the struct NCreader instead of calling dataset[\"time\"][:] each time step when loading forcing data.\n\n\n\nAdded\n\nShow total duration of simulation in the log file (info), and show the current time at execution of each timestep (debug).\nSupport for exponential decline in horizontal conductivity in the sbm_gwf concept. This can be enabled using the conductivity_profile setting (either “uniform” or “exponential”). If set to “exponential”, it exponentially reduces the kh0 (or conductivity) based on the value of gwf_f to the actual horizontal conductivity (k).\nAn optional 1D floodplain schematization for the river flow inertial model, based on provided flood volumes as a function of flood depth per river cell. See also the following sections: SBM + Local inertial river and River and floodplain routing for a short description, and the following section for associated model parameters.\n\n\n\n\nv0.6.2 - 2022-09-01\n\nFixed\n\nTwo issues related to reservoir and lake locations as part of local inertial model: 1) added as boundary points to the update of overland flow, 2) fixed check reservoir and lake location in update river flow.\nLimit flow (qx, qy and q) in local inertial model when water is not available (set to zero).\nIn the grid output netCDFs, don’t set the _FillValue attribute, since the CF conventions don’t allow it.\nGlacier parameter g_sifrac needs to be converted during initialization (time dependent).\nThe check that the sum of adaptive timesteps (Δt) of the local inertial model (1D and 2D) does not exceed the model timestep.\n\n\n\nChanged\n\nChanged depth h for reservoir and lake locations as part of the river local inertial model from bankfull_depth to zero.\n\n\n\nAdded\n\nExternal inflow to the SBM + Local inertial river (1D) and land (2D) model configuration.\n\n\n\n\nv0.6.1 - 2022-04-26\n\nFixed\n\nFixed an error with the log file, when writing to a folder that does not (yet) exists. Now, the folder is created prior to writing the log file.\nFixed a MethodError for read_dims, thrown when reading netCDF data with NCDatasets.jl 0.12.3 or higher.\n\n\n\n\nv0.6.0 - 2022-04-14\n\nAdded\n\nThe FLEXTopo model.\nSet a (different) uniform value for each index of input parameters with an extra dimension. A list of values (instead of one uniform value) that should be equal to the length of the extra dimension can be provided in the TOML file. See also Modify parameters.\nModify input parameters with an extra dimension at multiple indices with different scale and offset values, through the TOML file. See also Modify parameters.\nAdded support for netCDF compression for gridded model output, through the option compressionlevel in the [output] section in the TOML file. The setting defaults to 0 (no compression), but all levels between 0 and 9 can be used.\n\n\n\nChanged\n\nRe-organized the documentation: moved explanation of different model concepts to a model documentation section, added a user guide to explain setting up the model, added new figures to the description of wflow_sbm.\nThe unit of lateral subsurface flow ssf of LateralSSF is now m^3 d^{-1}. The unit was m^3 t^{-1}, where t is the model timestep. Other flow variables are already stored independently from t, this allows for easier interpretation and to use states independently of t.\nChanged the reference level of water depth h and h_av of 2D overland flow (ShallowWaterLand) for cells containing a river from river bed elevation zb to cell elevation z.\n\n\n\nFixed\n\nFixed calculation of average water depth h_av of 2D overland flow (ShallowWaterLand) with the local inertial approach. The summation of h was not correct, resulting in too low values for h_av. For river cells of 2D overland flow h_av was only updated as part of the river domain (ShallowWaterRiver), this value is now also updated as part of the land domain (ShallowWaterLand).\nFixed the following two flow width issues for 2D overland flow of the local inertial model: 1) The flow widths xwidth and ywidth were mapped incorrectly (reversed) to the flow calculation in x and y direction, respectively. 2) For river cells the effective flow width for overland flow was not determined correctly: the riverwidth vector supplied to the function set_effective_flowwidth! covered the complete model domain and should have covered the river domain, resulting in incorrect river widths and thus incorrect effective flow widths for river cells.\n\n\n\n\nv0.5.2 - 2022-02-03\n\nChanged\n\nModel types sbm_gwf and hbv use the same approach for the calculation of the drain width dw as model type sbm.\nRenamed h_bankfull parameter to bankfull_depth for consistency between kinematic-wave and local-inertial river routing. When using the old name under the [input.lateral.river] section of the TOML file, it will work but it is suggested to update the name.\n\n\n\nAdded\n\nAdditional log messages and log file as output, see also Logging.\nOption to use the local inertial model for river flow as part of the sbm model type. See also SBM + Local inertial river.\nOption to use the local inertial model for 1D river flow combined with 2D overland flow as part of the sbm model type. See also SBM + Local inertial river (1D) and land (2D).\n\n\n\nFixed\n\nModel type hbv: the surface width for overland flow was not corrected with the river width.\nFixed use of absolute path for path_forcing in TOML file, which gave an error in wflow v0.5.1.\nFixed a crash when glacier processes are simulated as part of the hbv concept (Δt was not defined).\nWhen the surface flow width for overland flow is zero, the water level h of the kinematic wave should not be calculated, otherwise this results in NaN values. When the model is initialized from state files, q and h are set to zero for indices with a zero surface flow width.\nFixed how number of iterations its for kinematic wave river flow are calculated during initialization when using a fixed sub-timestep (specified in the TOML file). For a model timestep smaller than the fixed sub-timestep an InexactError was thrown.\nFixed providing a cyclic parameter when the netCDF variable is read during model initialization with ncread, this gave an error about the size of the netCDF time dimension.\nFixed CSV and netCDF scalar output of variables with dimension layer (SVector).\n\n\n\n\nv0.5.1 - 2021-11-24\n\nFixed\n\nFixed calculation of exfiltwater as part of the sbm_gwf model type. This was based directly on groundwater head above the surface level, without multiplying by the specific_yield, resulting in an overestimation of exfiltwater. This is required since the groundwater model estimates the head by dividing the volume by the specific yield or storativity of the aquifer. So, should the groundwater table rise above surface level, the head above surface level does not represent a water column one to one. (This also means the groundwater model (slightly) overestimates heads when the head rises above the surface level. However, this water is immediately removed, and the head will be set to surface level.)\n\n\n\nAdded\n\nOptional dir_input and dir_output keys in the TOML, which can be used to quickly change the path for all input or output files that are given as a relative path.\n\n\n\n\nv0.5.0 - 2021-11-12\n\nChanged\n\nScaling of potential capillary rise is replaced by a common approach found in literature, based on the water table depth zi, a maximum water depth cap_hmax beyond which capillary rise ceases, and a coefficient cap_n. See also Capillary rise. Multiplying the scaling factor with the ratio of model time step and basetimestep in the original approach resulted in (much) smaller capillary fluxes at sub-daily model time steps compared to daily model time steps, and is not used in the new approach. Parameters cap_hmax and cap_n can be set through the TOML file, parameter capscale of the previous approach is not used anymore.\n\n\n\nFixed\n\nConversion of GroundwaterFlow boundaries \\(\\SIb{}{m^3 d^{-1}}\\) as part of model concept sbm_gwf to \\(\\SI{m^3 s^{-1}}\\) for sub-daily model time steps. For the conversion the basetimestep (86400 s) should be used (and not the model time step).\n\n\n\n\nv0.4.1 - 2021-11-04\n\nChanged\n\nThe \\alpha parameter of the kinematic wave has a fixed value now and is not updated because of changes in water height (this could result in large water balance errors). See also Surface routing.\nCyclic input for other structs than vertical are also now supported (for example cyclic inflow to the river).\nMoved update_forcing! and update_cyclic! functions to the run function. It is now easier to implement a custom run function with custom loading of input data (forcing and cyclic parameters).\n\n\n\nAdded\n\nCheck if reservoirs and lakes have downstream nodes. Without downstream nodes is not supported and in that case an error message is thrown that is easier to understand than the previous one: “ArgumentError: Collection is empty, must contain exactly 1 element.”\nFor the input.path_forcing TOML setting we use Glob.jl to expand strings like \"data/forcing-year-*.nc\" to a set of netCDF files that are split in time.\nExternal water inflow (supply/abstractions) added to the kinematic wave inflow in m3/s. It is added/removed to sf.qlat[v] before computing the new q[v] with the kinematic wave equation.\nFixed values for forcing parameters are supported, see also Fixed forcing values.\n\n\n\nAdded\n\nOption to use the local inertial model for river flow as part of the SBM + Kinematic wave. See also SBM + Local inertial river.\n\n\n\nFixed\n\nRiver inflow for reservoirs and lakes in the kinematic wave. This inflow was based on sf.q[v] at the previous time step, and this has been fixed to the current time step.\n\n\n\n\nv0.4.0 - 2021-09-02\n\nChanged\n\nChanged length units for lateral subsurface flow component from millimeter to meter. This means that state netCDF files from previous versions can only be reused if ssf is divided by 10^9.\nAdd snow and glacier processes to wflow_sbm figure of the documentation.\n\n\n\nAdded\n\nMulti-threading of vertical SBM concept and lateral kinematic wave components (overland, river and subsurface flow) of wflow_sbm model SBM + Kinematic wave.\nImproved error message for CSV Reducer.\nThe TOML keys kv₀, θᵣ and θₛ have been replaced with the ASCII versions kv_0, theta_r and theta_s, to avoid encoding issues with certain text editors. The old keys still work as well.\n\n\n\nFixed\n\nCalculation of volumetric water content of vertical SBM (soil layers and root zone).\nUpdate of satwaterdepth in SBM (evaporation was only subtracted from a local variable, and not from sbm.satwaterdepth).\nFixed the index lowerlake_ind of NaturalLake. Linked lakes were not simulated correctly (flows between upstream and downstream lake).\nInterpolation function interpolate_linear(x, xp, fp) for CSV tables lakes. When x was larger or smaller than xp, maximum(xp) or minimum(xp) was returned instead of maximum(fp) or minimum(fp).\nFixed model timestep of reservoirs (SimpleReservoir) and lakes (NaturalLake) in relation to precipitation and evapotranspiration fluxes. This was set to the fixed wflow basetimestep of 86400 s, and should be set to the actual model time step from the TOML configuration file.\nAdd flux from Drainage (GroundwaterFlow) in the sbm_gwf_model to the overland flow component instead of the river component of the kinematic wave.\nFixed option constanthead = false (TOML file), constant_head field of GroundwaterFlow was not defined in this case. Fixed this by initializing empty fields (Vector) for struct ConstantHead.\nFixed return max(0, boundary.flux[index]) to return max(0, flux) the flux should be returned when cell is dry, no negative value allowed.\nFixed path to initialize lake to: dirname(static_path)\nFixed outflow = 0, when lake level is below lake threshold. Before a negative value could enter the log function and model would fail.\nFixed the lake storage initialization. For continuation runs (reinit = false), this caused the lake to be reset to the initial conditions instead of the saved state.\n\n\n\n\nv0.3.1 - 2021-05-19\n\nFixed\n\nIgnore extra dimensions in input netCDFs if they are size 1\n\n\n\n\nv0.3.0 - 2021-05-10\n\nChanged\n\nNew deposition process for coarse sediment in the reservoirs with a new parameter restrapefficiency in the sediment model.\nNew variables added to the LandSediment and RiverSediment structs in order to save more output from the sediment model.\nAdded variables volume and inwater to SurfaceFlow struct, this is convenient for the coupling with the water quality model Delwaq.\nRiver water level (h) and discharge (q) forced directly into the RiverSediment struct (instead of using the OverlandFlowSediment struct first).\nRequire Julia 1.6 or later.\n\n\n\nAdded\n\nModify model parameters and forcing through the TOML file (see Modify parameters).\nRun wflow_sbm (SBM + kinematic wave) in two parts (until recharge and after subsurface flow) from BMI, including the option to switch off the lateral subsurface component of wflow_sbm.\nSupport more netCDF dimension and axis order variants.\n\n\n\nFixed\n\nCorrected a bug in sediment deposition in the river (case when incoming sediment load is more than the river transport capacity).\nFixed update of snow and glacierstore fields of HBV and SBM concepts by the glacier_hbv module.\n\n\n\n\nv0.2.0 - 2021-03-26\n\nChanged\n\nRemoved dependency of the f model parameter of wflow_sbm on the parameters \\theta_{s}, \\theta_{r} and M. This approach is used in Topog_SBM, but not applicable for wflow_sbm. The f parameter needs to be provided as part of the netCDF model parameter file.\nGrid properties as cell length and elevation now stored as part of the model.land.network component and not as part of the vertical model components, as it is not used by these components. altitude (elevation) should now be provided as part of the [input] section of the TOML configuration file, and not as part of the [input.vertical] section.\nRemoved parameter \\theta_{e} from SBM struct (not used in update). Parameters \\theta_{s} and \\theta_{r} included separately (instead of \\theta_{e}) in LateralSSF struct, now directly linked to SBM parameters.\nImprove error messages (netCDF and cyclic flow graph).\n\n\n\nAdded\n\nExport of netCDF scalar timeseries (separate netCDF file from gridded timeseries). This also allows for importing these timeseries by Delft-FEWS (General Adapter).\n\n\n\nFixed\n\nModel parameter Manning’s n now used during the update of the struct SurfaceFlow, to change the related \\alpha parameter of the kinematic wave for channel flow.",
    "crumbs": [
      "Home",
      "Changelog"
    ]
  },
  {
    "objectID": "developments/index.html",
    "href": "developments/index.html",
    "title": "Developments",
    "section": "",
    "text": "Changelog\n    \n  \n  \n    \n      Developers guide\n    \n  \n  \n    \n      Julia structures\n    \n  \n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Developments"
    ]
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "To be added in the future",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "getting_started/download_example_models.html",
    "href": "getting_started/download_example_models.html",
    "title": "Download example models",
    "section": "",
    "text": "For each wflow Model a test model is available that can help to understand the data requirements and the usage of each Model. The TOML configuration file per available model are listed in the Table below:\nThe associated Model files (input static, forcing and state files) can easily be downloaded and for this we share the following Julia code (per Model) that downloads the required files to your current working directory. For running these test model see also Usage and Command Line Interface.",
    "crumbs": [
      "Getting started",
      "Download example models"
    ]
  },
  {
    "objectID": "getting_started/download_example_models.html#wflow_sbm-kinematic-wave",
    "href": "getting_started/download_example_models.html#wflow_sbm-kinematic-wave",
    "title": "Download example models",
    "section": "wflow_sbm + kinematic wave",
    "text": "wflow_sbm + kinematic wave\n# urls to TOML and netCDF of the Moselle example model\ntoml_url = \"https://raw.githubusercontent.com/Deltares/Wflow.jl/master/test/sbm_config.toml\"\nstaticmaps = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.9/staticmaps-moselle.nc\"\nforcing = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.6/forcing-moselle.nc\"\ninstates = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.6/instates-moselle.nc\"\n\n# create a \"data\" directory in the current directory\ndatadir = joinpath(@__DIR__, \"data\")\nmkpath(datadir)\ntoml_path = joinpath(@__DIR__, \"sbm_config.toml\")\n\n# download resources to current and data dirs\ndownload(staticmaps, joinpath(datadir, \"staticmaps-moselle.nc\"))\ndownload(forcing, joinpath(datadir, \"forcing-moselle.nc\"))\ndownload(instates, joinpath(datadir, \"instates-moselle.nc\"))\ndownload(toml_url, toml_path)",
    "crumbs": [
      "Getting started",
      "Download example models"
    ]
  },
  {
    "objectID": "getting_started/download_example_models.html#wflow_sbm-groundwater-flow",
    "href": "getting_started/download_example_models.html#wflow_sbm-groundwater-flow",
    "title": "Download example models",
    "section": "wflow_sbm + groundwater flow",
    "text": "wflow_sbm + groundwater flow\n# urls to TOML and netCDF of the Moselle example model\ntoml_url = \"https://raw.githubusercontent.com/Deltares/Wflow.jl/master/test/sbm_gwf_config.toml\"\nstaticmaps = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.3/staticmaps-sbm-groundwater.nc\"\nforcing = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.1/forcing-sbm-groundwater.nc\"\n\n# create a \"data\" directory in the current directory\ndatadir = joinpath(@__DIR__, \"data\")\nmkpath(datadir)\ntoml_path = joinpath(@__DIR__, \"sbm_gwf_config.toml\")\n\n# download resources to current and data dirs\ndownload(staticmaps, joinpath(datadir, \"staticmaps-sbm-groundwater.nc\"))\ndownload(forcing, joinpath(datadir, \"forcing-sbm-groundwater.nc\"))\ndownload(toml_url, toml_path)",
    "crumbs": [
      "Getting started",
      "Download example models"
    ]
  },
  {
    "objectID": "getting_started/download_example_models.html#wflow_sediment",
    "href": "getting_started/download_example_models.html#wflow_sediment",
    "title": "Download example models",
    "section": "wflow_sediment",
    "text": "wflow_sediment\n# urls to TOML and netCDF of the Moselle example model\ntoml_url = \"https://raw.githubusercontent.com/Deltares/Wflow.jl/master/test/sediment_config.toml\"\nstaticmaps = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.3/staticmaps-moselle-sed.nc\"\nforcing = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.3/forcing-moselle-sed.nc\"\ninstates = \"https://github.com/visr/wflow-artifacts/releases/download/v0.2.0/instates-moselle-sed.nc\"\n\n# create a \"data\" directory in the current directory\ndatadir = joinpath(@__DIR__, \"data\")\nmkpath(datadir)\ntoml_path = joinpath(@__DIR__, \"sediment_config.toml\")\n\n# download resources to current and data dirs\ndownload(staticmaps, joinpath(datadir, \"staticmaps-moselle-sed.nc\"))\ndownload(forcing, joinpath(datadir, \"forcing-moselle-sed.nc\"))\ndownload(instates, joinpath(datadir, \"instates-moselle-sed.nc\"))\ndownload(toml_url, toml_path)",
    "crumbs": [
      "Getting started",
      "Download example models"
    ]
  },
  {
    "objectID": "getting_started/install.html",
    "href": "getting_started/install.html",
    "title": "Installing wflow",
    "section": "",
    "text": "Wflow can be used in two different ways, depending on the required use of the code:\nBelow we describe how to install both versions of wflow.",
    "crumbs": [
      "Getting started",
      "Installing wflow"
    ]
  },
  {
    "objectID": "getting_started/install.html#installing-as-julia-package",
    "href": "getting_started/install.html#installing-as-julia-package",
    "title": "Installing wflow",
    "section": "Installing as Julia package",
    "text": "Installing as Julia package\nWflow is a Julia package that can be installed in several ways. Below, we show how to install wflow from Julia’s package repository and how to install the latest version from GitHub.\nFirst, download and install the current stable release of Julia. If you have any issues installing Julia, please see platform specific instructions for further instructions.\nIf you are new to Julia, it might be a good idea to check out the Getting Started section of the Julia Manual. You can also find additional learning resources at julialang.org/learning.\n\nInstall from Julia’s package repository\nTo access Julia’s package manager, press ] in the Julia REPL. To get back to the Julia REPL, press backspace or ^C.\n\n\n\n\n\n\nTip\n\n\n\nIf you haven’t used Julia in a while, it’s a good idea to run up to update your packages.\npkg&gt; up\n\n\nTo access Julia’s package manager and install wflow, use:\npkg&gt; add Wflow\nThis process can take a while, especially on the first run, as compatible dependencies are automatically resolved and installed from the Pkg General registry.\n\n\nInstall from GitHub\nYou can also install wflow from the master branch on the repository as follows:\npkg&gt; add Wflow#master\nThis command tracks the master branch and updates to the latest commit on that branch when you run update, or simply up, in the Pkg REPL. The add installs wflow in your home directory under .julia/packages/Wflow. Note that packages installed under packages by add should not be changed in the directory, as the change could disrupt Pkg’s automatic dependency handling.\nIf you want to modify any files in the repository, you need to do a development install. This can be done using:\npkg&gt; dev Wflow\nThis will clone the git repository, place it under your home directory in .julia/dev/Wflow, and add the wflow package to your project environment. To receive updates, you’ll need to pull the latest changes manually using git pull.\n\n\nCheck installation of wflow\nFinally, go back to the Julia REPL and try to load wflow:\njulia&gt; using Wflow\nThe first time you do this, it may take longer as any new or changed packages need to be precompiled to enable faster loading on subsequent uses. No error messages should appear, which indicates that you have successfully installed wflow.\nBefore concluding this section, we recommend a few tools that can make using and developing Julia code easier.\n\n\n\n\n\n\nTip\n\n\n\nThere is a section on editors and IDEs for Julia on https://julialang.org/, scroll down to see it. We use and recommend Microsoft’s free and open source Visual Studio Code. When combined with the Julia extension it provides a powerful and interactive development experience.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you plan to modify the code of wflow, we recommend installing the Revise.jl package. This package allows you to modify code and use the changes without restarting Julia. Install it with add Revise from the Pkg REPL. Then create a file called .julia/config/startup.jl, and put using Revise there. This will load Revise every time you start a Julia session.",
    "crumbs": [
      "Getting started",
      "Installing wflow"
    ]
  },
  {
    "objectID": "getting_started/install.html#installing-the-compiled-executable",
    "href": "getting_started/install.html#installing-the-compiled-executable",
    "title": "Installing wflow",
    "section": "Installing the compiled executable",
    "text": "Installing the compiled executable\nBinaries of wflow_cli can be downloaded from our website download.deltares.nl, and are currently available for Windows. Download and install the .msi file. After installation, you will see two folders in the installation directory. Only the bin/wflow_cli is used. The artifacts folder contains binary dependencies such as netCDF.\nartifacts\\\nbin\\wflow_cli\nTo verify whether the installation was completed successfully, run wflow_cli with no arguments in the command line. This will display the following message:\nUsage: wflow_cli 'path/to/config.toml'\n\n\n\n\n\n\nNote\n\n\n\nThe old version of wflow, based on Python and PCRaster libraries is also available to download from our website download.deltares.nl. We recommend installing the Julia version, as this documentation is written to support this version.",
    "crumbs": [
      "Getting started",
      "Installing wflow"
    ]
  },
  {
    "objectID": "home/case_studies.html",
    "href": "home/case_studies.html",
    "title": "Case studies",
    "section": "",
    "text": "Reliable hydrological models for the Rhine and the Meuse river basins are necessary for short-term forecasting of river flows and long-term predictions for strategic water management planning. In collaboration with Rijkswaterstaat, Deltares is developing a new line of models for the Rhine and the Meuse basins. The models will be used for forecasting and to estimate the impact of climate change on water resources and extreme streamflow. In the model development, we aim to improve hydrological predictions by including relevant processes in the model schematization. The modularity of the wflow framework is ideal for this as we can easily evaluate the combination of different vertical and lateral model components. For example, the local inertial routing for river and overland flow enables us to consider retention of water in the floodplains, which is likely to improve extreme streamflow predictions.",
    "crumbs": [
      "Home",
      "Case studies"
    ]
  },
  {
    "objectID": "home/case_studies.html#wflow-models-for-the-meuse-and-rhine",
    "href": "home/case_studies.html#wflow-models-for-the-meuse-and-rhine",
    "title": "Case studies",
    "section": "",
    "text": "Reliable hydrological models for the Rhine and the Meuse river basins are necessary for short-term forecasting of river flows and long-term predictions for strategic water management planning. In collaboration with Rijkswaterstaat, Deltares is developing a new line of models for the Rhine and the Meuse basins. The models will be used for forecasting and to estimate the impact of climate change on water resources and extreme streamflow. In the model development, we aim to improve hydrological predictions by including relevant processes in the model schematization. The modularity of the wflow framework is ideal for this as we can easily evaluate the combination of different vertical and lateral model components. For example, the local inertial routing for river and overland flow enables us to consider retention of water in the floodplains, which is likely to improve extreme streamflow predictions.",
    "crumbs": [
      "Home",
      "Case studies"
    ]
  },
  {
    "objectID": "home/case_studies.html#operational-flood-forecasting-in-australia",
    "href": "home/case_studies.html#operational-flood-forecasting-in-australia",
    "title": "Case studies",
    "section": "Operational flood forecasting in Australia",
    "text": "Operational flood forecasting in Australia\nIn Australia, there was a need for high-resolution, fast and accurate rainfall-runoff models to provide boundary conditions for a fast and detailed flood inundation model (SFINCS). The domain of the flood model covers the entire North and East Coast of Australia. Although many gauging stations are available to provide real-time information, many rivers are not covered. For these locations, wflow_sbm models are used to provide this real-time information. Additionally, these models are used to provide projections for potential future scenarios. Using the HydroMT library, all wflow_sbm models were automatically built. The high level of flexibility in spatial and temporal resolution, combined with the physics-based nature of the concept, makes Wflow_sbm particularly suitable for ungauged basins. Furthermore, the model is detailed and computationally efficient enough for coupling with the fast flood inundation model SFINCS.\n\nThe results of this proof of concept are very promising. Technically, we were able to quickly set up the wflow_sbm models, couple them to the flood inundation models (SFINCS), and run the models operationally under the Delft-FEWS platform. Model validation was conducted for two basins by comparing the results of Wflow_sbm against observations and the results of calibrated URBS models. This validation demonstrated that the uncalibrated Wflow_sbm model results were already quite satisfactory, especially given the complex nature of these basins, which include several small and large reservoirs. We could also show the potential for further calibration by adjusting the KsatHorFrac parameter.\nDe Kleermaeker, S., Leijnse, T., Morales, Y., Druery, C., & Maguire, S. (2022). Developing a real-time data and modelling framework for operational flood inundation forecasting in Australia. In Hydrology & Water Resources Symposium 2022 (HWRS 2022): The Past, the Present, the Future. Engineers Australia. https://search.informit.org/doi/10.3316/informit.916755150845355",
    "crumbs": [
      "Home",
      "Case studies"
    ]
  },
  {
    "objectID": "home/case_studies.html#simulating-plastic-transport-in-thailand",
    "href": "home/case_studies.html#simulating-plastic-transport-in-thailand",
    "title": "Case studies",
    "section": "Simulating plastic transport in Thailand",
    "text": "Simulating plastic transport in Thailand\nFor the Pollution Control Board of the Government of Thailand and the World Bank, we supported a material flow analysis of plastics in Thailand using wflow. Plastic pollution is a growing global issue. Plastic waste enters rivers and is transported to the ocean where it persists and threatens the health of the ocean, seas and coasts. The initial movement of plastic waste is in many cases triggered by runoff from (heavy) rainfall and transported by water flow towards small streams and rivers. Therefore there is strong relation to rainfall-runoff processes, which can be modeled using high-resolution rainfall-runoff models.\nIn this study we applied the wflow_sbm model in combination with a fate-and-transport and water quality model (DelWaq) to simulate the movement of plastics through five large river basins and on three island and coastal zones (Krabi, Phuket, and Ko Samui; see screenshot of the model below) in Thailand. Together with our partners Panya Consultants and HII, we were able to identify hotspots of plastic pollution, estimate how much plastic waste would end up in the Gulf of Thailand and recommend priority areas for reducing plastic waste reaching the sea.\n\nThe wflow_sbm models for the five large basins were calibrated. The presence of large dams and reservoirs complicated calibration, but with the input for the dam operation, the model performance for these basins could be largely improved. The figure below shows the calibrated model results for the Chao Phraya, just upstream of Bangkok. The input from the hydrological wflow_sbm model was used as input for the fate and transport model to assess the amount of plastic transported to the ocean.\n\nLink to World Bank report: https://www.worldbank.org/en/country/thailand/publication/plastic-waste-material-flow-analysis-for-thailand",
    "crumbs": [
      "Home",
      "Case studies"
    ]
  },
  {
    "objectID": "index.html#quick-overview",
    "href": "index.html#quick-overview",
    "title": "Wflow.jl",
    "section": "Quick overview",
    "text": "Quick overview\n\n\n\n\n  \n    \n      Installation guide\n    \n  \n  \n    \n      How do I use Wflow.jl?\n    \n  \n  \n    \n      Examples\n    \n  \n  \n    \n      Frequently asked questions\n    \n  \n  \n    \n      Model documentation\n    \n  \n  \n    \n      Changelog",
    "crumbs": [
      "Home",
      "Wflow.jl"
    ]
  },
  {
    "objectID": "model_docs/lateral/gwf.html",
    "href": "model_docs/lateral/gwf.html",
    "title": "Groundwater flow",
    "section": "",
    "text": "Single layer groundwater flow requires the four following components, and each is described in more detail below:",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Groundwater flow"
    ]
  },
  {
    "objectID": "model_docs/lateral/gwf.html#aquifer-types",
    "href": "model_docs/lateral/gwf.html#aquifer-types",
    "title": "Groundwater flow",
    "section": "Aquifer types",
    "text": "Aquifer types\nGroundwater flow can occur either in a confined or unconfined aquifer. Confined aquifers are overlain by a poorly permeable confining layer (e.g. clay). No air can get in to fill the pore space so that the aquifer always remains fully saturated. For a confined aquifer, water will always flow along the complete height \\(\\SIb{H}{m}\\) over the aquifer and transmissivity \\(\\SIb{kH}{m^2 d^{-1}}\\) is a constant (\\(\\SIb{k}{m d^{-1}}\\) is the horizontal hydraulic conductivity). Specific storage is the amount of water an aquifer releases per unit change in hydraulic head, per unit volume of aquifer, as the aquifer and the groundwater itself is compressed. Its value is much smaller than specific yield, between \\(10^{-5}\\) (stiff) and \\(10^{-2}\\) (weak).\nThe upper boundary of an unconfined aquifer is the water table (the phreatic surface). Specific yield (or drainable porosity) represents the volumetric fraction the aquifer will yield when all water drains and the pore volume is filled by air instead. Specific yield will vary roughly between \\(0.05\\) (clay) and \\(0.45\\) (peat) (Johnson, 1967).\nGroundwater flow is solved forward in time and central in space. The vertically averaged governing equation for an inhomogeneous and isotropic aquifer in one dimension can be written as:\n\\[\n    S \\frac{\\partial \\phi}{\\partial t} =  \\frac{\\partial}{\\partial x} \\left(kH \\frac{\\phi}{\\delta x}\\right) + Q\n\\]\nwhere \\(\\SIb{S}{m m^{-1}}\\) is storativity (or specific yield), \\(\\SIb{\\phi}{m}\\) is hydraulic head, \\(t\\) is time, \\(\\SIb{k}{m t^{-1}}\\) is horizontal hydraulic conductivity, \\(\\SIb{H}{m}\\) is the (saturated) aquifer height: groundwater level - aquifer bottom elevation and \\(\\SIb{Q}{m\nt^{-1}}\\) represents fluxes from boundary conditions (e.g. recharge or abstraction), see also Aquifer boundary conditions.\nThe simplest finite difference formulation is forward in time, central in space, and can be written as:\n\\[\n    S_i  \\frac{\\phi_{i}^{t+1} - \\phi_i^{t}}{\\Delta t} = -C_{i-1}  (\\phi_{i-1} - \\phi_i) - C_i  (\\phi_{i+1} - \\phi_i) + Q_i\n\\]\nwhere \\(i\\) is the cell index, \\(t\\) is time, \\(\\Delta t\\) is the step size, \\(C_{i-1}\\) is the the intercell conductance between cell \\(i-1\\) and \\(i\\) and \\(C_i\\) is the intercell conductance between cell \\(i\\) and \\(i+1\\). The connection data between cells is stored as part of the Connectivity struct, see also Connectivity for more information.\nConductance \\(C\\) is defined as:\n\\[\nC = \\frac{kH w}{l}\n\\]\nwhere \\(\\SIb{w}{m}\\) is the width of the cell to cell connection, and \\(\\SIb{l}{m}\\) is the length of the cell to cell connection. \\(k\\) and \\(H\\) may both vary in space; intercell conductance is therefore an average using the properties of two cells. For the calculation of the intercell conductance \\(C\\) the harmonic mean is used (see also Goode and Appel, 1992), here between cell index \\(i\\) and cell index \\(i+1\\), in the \\(x\\) direction:\n\\[\n    C_i = w  \\frac{k_iH_i\\cdot k_{i+1}H_{i+1}}{k_iH_i \\cdot l_{i+1} + k_{i+1}H_{i+1} \\cdot l_i}\n\\]\nwhere \\(\\SIb{H}{m}\\) is the aquifer top - aquifer bottom, and \\(k\\), \\(l_i\\) is the length in cell \\(i\\) (\\(0.5 \\Delta x_i\\)), \\(l_{i+1}\\) is the length in cell \\(i+1\\) (\\(0.5 \\Delta x_{i+1}\\)) and \\(w\\) as previously defined. For an unconfined aquifer the intercell conductance is scaled by using the “upstream saturated fraction” as the MODFLOW documentation calls it. In this approach, the saturated thickness of a cell-to-cell is approximated using the cell with the highest head. This results in a consistent overestimation of the saturated thickness, but it avoids complexities related with cell drying and rewetting, such as having to define a “wetting threshold” or a “wetting factor”. See also the documentation for MODFLOW-NWT (Niswonger et al., 1) or MODFLOW6 (Langevin et al., 2017) for more background information. For more background on drying and rewetting, see for example McDonald et al. (1991).\nFor the finite difference formulation, there is only one unknown, \\(\\phi_i^{t+1}\\). Reshuffling terms:\n\\[\n\\phi_i^{t+1} = \\phi_i^t + (C_{i-1}  (\\phi_i - \\phi_{i-1}) + C_i  (\\phi_{i+1} - \\phi_i) + Q_i) \\frac{Δt}{S_i}\n\\]\nThis can be generalized to two dimensions, for both regular and irregular cell connectivity. Finally, a stable time step size can be computed given the forward-in-time, central in space scheme, based on the following criterion from Chu and Willis (1984):\n\\[\n  \\frac{\\Delta t k H}{\\Delta x  \\Delta y S}  \\le \\frac{1}{4}\n\\]\nwhere \\(\\SIb{\\Delta t}{d}\\) is the stable time step size, \\(\\SIb{\\Delta x}{m}\\) is the cell length in the \\(x\\) direction and \\(\\SIb{\\Delta y}{m}\\) is the cell length in the \\(y\\) direction, \\(\\SIb{k}{m^2 d^{-1}}\\) is the horizontal hydraulic conductivity and \\(\\SIb{H}{m}\\) is the saturated thickness of the aquifer. For each cell \\(\\frac{\\Delta x  \\Delta y S}{k H}\\) is calculated, the minimum of these values is determined, and multiplied by \\(\\frac{1}{4}\\), to get the stable time step size.\nFor more details about the finite difference formulation and the stable time step size criterion we refer to the paper of Chu and Willis (1984).\nBoundary conditions can be classified into three categories:\n\nspecified head (Dirichlet)\nspecified flux (Neumann)\nhead-dependent flux (Robin)\n\nNeumann and Robin conditions are implemented by adding to or subtracting from a net (lumped) cell flux. Dirichlet conditions are special cased, since they cannot (easily) be implemented via the flux, but the head is set directly instead.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Groundwater flow"
    ]
  },
  {
    "objectID": "model_docs/lateral/gwf.html#connectivity",
    "href": "model_docs/lateral/gwf.html#connectivity",
    "title": "Groundwater flow",
    "section": "Connectivity",
    "text": "Connectivity\nThe connectivity between cells is defined as follows.\nWflow.Connectivity",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Groundwater flow"
    ]
  },
  {
    "objectID": "model_docs/lateral/gwf.html#constant-head",
    "href": "model_docs/lateral/gwf.html#constant-head",
    "title": "Groundwater flow",
    "section": "Constant head",
    "text": "Constant head\nDirichlet boundary conditions can be specified through the field constanthead (type ConstantHead) of the GroundwaterFlow struct.\n@get_units struct ConstantHead{T}\n    head::Vector{T} | \"m\"\n    index::Vector{Int} | \"-\"\nend\nFor the model SBM + Groundwater flow this boundary condition is optional, and if used should be specified in the TOML file as follows (see also sbm_gwf_config.toml):\n[model]\nconstanthead = true",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Groundwater flow"
    ]
  },
  {
    "objectID": "model_docs/lateral/gwf.html#aquifer-boundary-conditions",
    "href": "model_docs/lateral/gwf.html#aquifer-boundary-conditions",
    "title": "Groundwater flow",
    "section": "Aquifer boundary conditions",
    "text": "Aquifer boundary conditions\n\nRiver\nThe flux between river and aquifer is calculated using Darcy’s law following the approach in MODFLOW:\n\\[\n  \\subtext{Q}{riv} =\n  \\begin{align*}\n    \\begin{cases}\n      C_i \\min \\left\\{\\subtext{h}{riv} - \\subtext{B}{riv}, \\subtext{h}{riv} - \\phi\\right\\} &\\text{ if }\\quad \\subtext{h}{riv} &gt; \\phi \\\\\n      C_e (\\subtext{h}{riv} - \\phi) &\\text{ if }\\quad \\subtext{h}{riv} \\le \\phi\n    \\end{cases}\n  \\end{align*}\n\\]\nwhere \\(\\SIb{\\subtext{Q}{riv}}{L^3 T^{-1}}\\) is the exchange flux from river to aquifer, \\(\\SIb{C_i}{L^2 T^{-1}}\\) is the river bed infiltration conductance, \\(\\SIb{C_e}{L^2 T^{-1}}\\) is the river bed exfiltration conductance, \\(\\SIb{\\subtext{B}{riv}}{L}\\) the bottom of the river bed, \\(\\SIb{\\subtext{h}{riv}}{L}\\) is the river stage and \\(\\SIb{\\phi}{L}\\) is the hydraulic head in the river cell.\nThe Table in the Groundwater flow river boundary condition section of the Model parameters provides the parameters of the struct River. Parameters that can be set directly from the static input data (netCDF) are marked in this Table.\nThe exchange flux (river to aquifer) \\(\\subtext{Q}{riv}\\) is an output variable (field flux of the River struct), and is used to update the total flux in a river cell. For the model SBM + Groundwater flow, the water level \\(\\SIb{h}{m}\\) of the river kinematic wave in combination with the river bottom is used to update the stage field of the River struct each time step.\n\n\nDrainage\nThe flux from drains to the aquifer is calculated as follows:\n\\[\n\\subtext{Q}{drain} = \\subtext{C}{drain} \\min(0, \\subtext{h}{drain} - \\phi)\n\\]\nwhere \\(\\SIb{\\subtext{Q}{drain}}{L^3 T^{-1}}\\) is the exchange flux from drains to aquifer, \\(\\SIb{\\subtext{C}{drain}}{L^2 T^{-1}}\\) is the drain conductance, \\(\\SIb{\\subtext{h}{drain}}{L}\\) is the drain elevation and \\(\\SIb{\\phi}{L}\\) is the hydraulic head in the cell with drainage.\nThe table in the Groundwater flow drainage boundary condition section of the Model parameters provides the parameters of the struct Drainage. Parameters that can be set directly from the static input data (netCDF) are marked in this Table.\nThe exchange flux (drains to aquifer) \\(\\subtext{Q}{drain}\\) is an output variable (field flux of struct Drainage), and is used to update the total flux in a cell with drains. For the model SBM + Groundwater flow this boundary condition is optional, and if used should be specified in the TOML file as follows (see also sbm_gwf_config.toml):\n[model]\ndrains = true\n\n\nRecharge\nThe recharge flux \\(Q_r\\) to the aquifer is calculated as follows:\n\\[\nQ_r = R \\, A\n\\]\nwith \\(\\SIb{}{L T^{-1}}\\) the recharge rate and \\(\\SIb{A}{L^2}\\) the area of the aquifer cell.\nThe table in the Groundwater flow recharge boundary condition section of the Model parameters section provides the parameters of the struct Recharge. Parameters that can be set directly from the static input data (netCDF) are marked in this Table.\nThe recharge flux \\(Q_r\\) is an output variable (field flux of struct Recharge), and is used to update the total flux in a cell where recharge occurs. For the model SBM + Groundwater flow, the recharge rate from the vertical SBM concept recharge [mm] is used to update the rate field of the Recharge struct each time step. The rate field is multiplied by the area field of the aquifer.\n\n\nHead boundary\nThis boundary is a fixed head with time (not affected by the model stresses over time) outside of the model domain, and is generally used to avoid an unnecessary extension of the model domain to the location of the fixed boundary (for example a large lake). The flux from the boundary \\(\\SIb{Q_{hb}}{L^3 T^{-1}}\\) is calculated as follows:\n\\[\nQ_{hb} = C_{hb} (\\phi_{hb} - \\phi)\n\\]\nwith \\(\\SIb{C_{hb}}{L^2 T^{-1}}\\) the conductance of the head boundary, \\(\\SIb{\\phi_{hb}}{L}\\) the head of the head boundary and \\(\\phi\\) the head of the aquifer cell.\nThe table in the Groundwater flow head boundary condition section of the Model parameters provides the parameters of the struct HeadBoundary.\nThe head boundary flux \\(Q_{hb}\\) is an output variable (field flux of struct HeadBoundary), and is used to update the total flux in a cell where this type of boundary occurs. The parameter Head \\(\\phi_{hb}\\) can be specified as a fixed or time dependent value.\n\n\n\n\n\n\nNote\n\n\n\nThis boundary is not (yet) part of the model SBM + Groundwater flow.\n\n\n\n\nWell boundary\nA volumetric well rate \\(\\SIb{}{L^3 T^{-1}}\\) can be specified as a boundary condition.\nThe Table in the well boundary condition section of the Model parameters provides the parameters of the struct Well.\nThe volumetric well rate \\(\\subtext{Q}{well}\\) can be can be specified as a fixed or time dependent value. If a cell is dry, the actual well flux flux is set to zero (see also the last note on this page).\n\n\n\n\n\n\nNote\n\n\n\nThis boundary is not (yet) part of the model SBM + Groundwater flow.\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor an unconfined aquifer the boundary fluxes are checked, in case of a dry aquifer cell a negative flux is not allowed.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Groundwater flow"
    ]
  },
  {
    "objectID": "model_docs/lateral/gwf.html#references",
    "href": "model_docs/lateral/gwf.html#references",
    "title": "Groundwater flow",
    "section": "References",
    "text": "References\n\nChu, W. S., & Willis, R. (1984). An explicit finite difference model for unconfined aquifers. Groundwater, 22(6), 728-734.\nGoode, D. J., & Appel, C. A. (1992). Finite-Difference Interblock Transmissivity for Unconﬁned Aquifers and for Aquifers having Smoothly Varying Transmissivity Water-resources investigations report, 92, 4124.\nJohnson, A. I. (1967), Specific yield: compilation of specific yields for various materials, Water Supply Paper 1662-D, Washington, D.C.: U.S. Government Printing Office, p. 74, doi:10.3133/wsp1662D.\nLangevin, C.D., Hughes, J.D., Banta, E.R., Niswonger, R.G., Panday, Sorab, and Provost, A.M., 2017, Documentation for the MODFLOW 6 Groundwater Flow Model: U.S. Geological Survey Techniques and Methods, book 6, chap. A55, 197 p., https://doi.org/10.3133/tm6A55.\nMcDonald, M.G., Harbaugh, A.W., Orr, B.R., and Ackerman, D.J., 1991, A method of converting no-flow cells to variable-head cells for the U.S. Geological Survey modular finite-difference groundwater flow model: U.S. Geological Survey Open-File Report 91-536, 99 p.\nNiswonger, R.G., Panday, Sorab, and Ibaraki, Motomu, 2011, MODFLOW-NWT, A Newton formulation for MODFLOW-2005: U.S. Geological Survey Techniques and Methods 6-A37, 44 p.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Groundwater flow"
    ]
  },
  {
    "objectID": "model_docs/lateral/local-inertial.html",
    "href": "model_docs/lateral/local-inertial.html",
    "title": "Local inertial",
    "section": "",
    "text": "The local inertial approximation of shallow water flow neglects only the convective acceleration term in the Saint-Venant momentum conservation equation. The numerical solution of the local inertial approximation on a staggered grid is as follows (Bates et al., 2010):\n\\[\nQ_{t+\\Delta t} = \\frac{Q_t - g A_t \\Delta t S_t}{(1+g\\Delta t n^2 |Q_t| / (R_t^{4/3} A_t))}\n\\]\nwhere \\(\\SIb{Q_{t+\\Delta t}}{m^3 s^{-1}}\\) is the river flow at time step \\(t+\\Delta t\\), \\(\\SIb{g}{m s^{-2}}\\) is acceleration due to gravity, \\(\\SIb{A_t}{m^2}\\) is the cross sectional flow area at the previous time step, \\(\\SIb{R_t}{m}\\) is the hydraulic radius at the previous time step, \\(\\SIb{Q_t}{m^3 s^{-1}}\\) is the river flow at the previous time step, \\(S_t\\) is the water surface slope at the previous time step and \\(\\SIb{n}{m^{-\\frac{1}{3}} s}\\) is the Manning’s roughness coefficient.\nThe momentum equation is applied to each link between two river grid cells, while the continuity equation over \\(\\Delta t\\) is applied to each river cell:\n\\[\nh^{t+\\Delta t} = h^t + \\Delta t \\frac{\\subtext{Q^{t+\\Delta t}}{src} - \\subtext{Q^{t+\\Delta t}}{dst}}{A}\n\\]\nwhere \\(\\SIb{h^{t+\\Delta t}}{m}\\) is the water depthat time step \\(t+\\Delta t\\), \\(\\SIb{h^t}{m}\\) is the water depth at the previous time step, \\(\\SIb{A}{m^2}\\) is the river area and \\(\\SIb{\\subtext{Q}{src}}{m^3 s^{-1}}\\) and \\(\\SIb{\\subtext{Q}{dst}}{m^3 s^{-1}}\\) represent river flow at the upstream and downstream link of the river cell, respectively.\nThe model time step \\(\\Delta t\\) for the local inertial model is estimated based on the Courant-Friedrichs-Lewy condition (Bates et al., 2010):\n\\[\n\\Delta t = \\alpha \\min_i\\left(\\frac{\\Delta x_i}{\\sqrt{gh_i}}\\right)\n\\]\nwhere \\(\\sqrt{gh_i}\\) is the wave celerity for river cell \\(i\\) , \\(\\SIb{\\Delta x_i}{m}\\) is the river length for river cell \\(i\\) and \\(\\alpha\\) is a coefficient (typically between \\(0.2\\) and \\(0.7\\)) to enhance the stability of the simulation.\nIn the TOML file the following properties related to the local inertial model can be provided for the sbm and sbm_gwf model types:\n[model]\nriver_routing = \"local-inertial\"  # default is \"kinematic-wave\"\ninertial_flow_alpha = 0.5         # alpha coefficient for model stability (default = 0.7)\nfroude_limit = true               # default is true, limit flow to subcritical-critical according to Froude number\nh_thresh = 0.1                    # water depth [m] threshold for calculating flow between cells (default = 1e-03)\nfloodplain_1d = true              # include 1D floodplain schematization (default = false)\nTwo optional constant boundary conditions riverlength_bc and riverdepth_bc can be provided at a river outlet node (or multiple river outlet nodes) through the model parameter netCDF file, as follows:\n[input.lateral.river]\nriverlength_bc = \"riverlength_bc\"   # optional river length [m], default = 1e04\nriverdepth_bc = \"riverdepth_bc\"     # optional river depth [m], default = 0.0\nThese boundary conditions are copied to a ghost node (downstream of the river outlet node) in the code.\nThe optional 1D floodplain schematization is based on provided flood volumes as a function of flood depth (per flood depth interval) for each river cell. Wflow calculates from these flood volumes a rectangular floodplain profile for each flood depth interval. Routing is done separately for the river channel and floodplain.\nThe momentum equation is most stable for low slope environments, and to keep the simulation stable for (partly) steep environments the froude_limit option is set to true by default. This setting limits flow conditions to subcritical-critical conditions based on the Froude number (\\(\\le 1\\)), similar to Coulthard et al. (2013) in the CAESAR-LISFLOOD model and Adams et al. (2017) in the Landlab v1.0 OverlandFlow component. The froude number \\(\\mathrm{Fr}\\) on a link is calculated as follows:\n\\[\n  \\mathrm{Fr} = \\frac{u}{\\sqrt{gh_f}}\n\\]\nwhere \\(\\sqrt{gh_f}\\) is the wave celerity on a link and \\(u\\) is the water velocity on a link. If the water velocity from the local inertial model is causing the Froude number to be greater than \\(1.0\\) , the water velocity (and flow) is reduced in order to maintain a Froude number of \\(1.0\\).\nThe downstream boundary condition basically simulates a zero water depth boundary condition at a set distance, as follows. For the downstream boundary condition (ghost point) the river width, river bed elevation and Manning’s roughness coefficient are copied from the upstream river cell. The river length \\(\\SIb{}{m}\\) of the boundary cell can be set through the TOML file with riverlength_bc, and has a default value of \\(\\SI{10}{km}\\). The water depth at the boundary cell is fixed at \\(\\SI{0.0}{m}\\).\nSimplified reservoir and lake models can be included as part of the local inertial model for river flow (1D) and river and overland flow combined (see next section). Reservoir and lake models are included as a boundary point with zero water depth for both river and overland flow. For river flow the reservoir or lake model replaces the local inertial model at the reservoir or lake location, and \\(Q\\) is set by the outflow from the reservoir or lake. Overland flow at a reservoir or lake location is not allowed to or from the downstream river grid cell.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Local inertial"
    ]
  },
  {
    "objectID": "model_docs/lateral/local-inertial.html#river-and-floodplain-routing",
    "href": "model_docs/lateral/local-inertial.html#river-and-floodplain-routing",
    "title": "Local inertial",
    "section": "",
    "text": "The local inertial approximation of shallow water flow neglects only the convective acceleration term in the Saint-Venant momentum conservation equation. The numerical solution of the local inertial approximation on a staggered grid is as follows (Bates et al., 2010):\n\\[\nQ_{t+\\Delta t} = \\frac{Q_t - g A_t \\Delta t S_t}{(1+g\\Delta t n^2 |Q_t| / (R_t^{4/3} A_t))}\n\\]\nwhere \\(\\SIb{Q_{t+\\Delta t}}{m^3 s^{-1}}\\) is the river flow at time step \\(t+\\Delta t\\), \\(\\SIb{g}{m s^{-2}}\\) is acceleration due to gravity, \\(\\SIb{A_t}{m^2}\\) is the cross sectional flow area at the previous time step, \\(\\SIb{R_t}{m}\\) is the hydraulic radius at the previous time step, \\(\\SIb{Q_t}{m^3 s^{-1}}\\) is the river flow at the previous time step, \\(S_t\\) is the water surface slope at the previous time step and \\(\\SIb{n}{m^{-\\frac{1}{3}} s}\\) is the Manning’s roughness coefficient.\nThe momentum equation is applied to each link between two river grid cells, while the continuity equation over \\(\\Delta t\\) is applied to each river cell:\n\\[\nh^{t+\\Delta t} = h^t + \\Delta t \\frac{\\subtext{Q^{t+\\Delta t}}{src} - \\subtext{Q^{t+\\Delta t}}{dst}}{A}\n\\]\nwhere \\(\\SIb{h^{t+\\Delta t}}{m}\\) is the water depthat time step \\(t+\\Delta t\\), \\(\\SIb{h^t}{m}\\) is the water depth at the previous time step, \\(\\SIb{A}{m^2}\\) is the river area and \\(\\SIb{\\subtext{Q}{src}}{m^3 s^{-1}}\\) and \\(\\SIb{\\subtext{Q}{dst}}{m^3 s^{-1}}\\) represent river flow at the upstream and downstream link of the river cell, respectively.\nThe model time step \\(\\Delta t\\) for the local inertial model is estimated based on the Courant-Friedrichs-Lewy condition (Bates et al., 2010):\n\\[\n\\Delta t = \\alpha \\min_i\\left(\\frac{\\Delta x_i}{\\sqrt{gh_i}}\\right)\n\\]\nwhere \\(\\sqrt{gh_i}\\) is the wave celerity for river cell \\(i\\) , \\(\\SIb{\\Delta x_i}{m}\\) is the river length for river cell \\(i\\) and \\(\\alpha\\) is a coefficient (typically between \\(0.2\\) and \\(0.7\\)) to enhance the stability of the simulation.\nIn the TOML file the following properties related to the local inertial model can be provided for the sbm and sbm_gwf model types:\n[model]\nriver_routing = \"local-inertial\"  # default is \"kinematic-wave\"\ninertial_flow_alpha = 0.5         # alpha coefficient for model stability (default = 0.7)\nfroude_limit = true               # default is true, limit flow to subcritical-critical according to Froude number\nh_thresh = 0.1                    # water depth [m] threshold for calculating flow between cells (default = 1e-03)\nfloodplain_1d = true              # include 1D floodplain schematization (default = false)\nTwo optional constant boundary conditions riverlength_bc and riverdepth_bc can be provided at a river outlet node (or multiple river outlet nodes) through the model parameter netCDF file, as follows:\n[input.lateral.river]\nriverlength_bc = \"riverlength_bc\"   # optional river length [m], default = 1e04\nriverdepth_bc = \"riverdepth_bc\"     # optional river depth [m], default = 0.0\nThese boundary conditions are copied to a ghost node (downstream of the river outlet node) in the code.\nThe optional 1D floodplain schematization is based on provided flood volumes as a function of flood depth (per flood depth interval) for each river cell. Wflow calculates from these flood volumes a rectangular floodplain profile for each flood depth interval. Routing is done separately for the river channel and floodplain.\nThe momentum equation is most stable for low slope environments, and to keep the simulation stable for (partly) steep environments the froude_limit option is set to true by default. This setting limits flow conditions to subcritical-critical conditions based on the Froude number (\\(\\le 1\\)), similar to Coulthard et al. (2013) in the CAESAR-LISFLOOD model and Adams et al. (2017) in the Landlab v1.0 OverlandFlow component. The froude number \\(\\mathrm{Fr}\\) on a link is calculated as follows:\n\\[\n  \\mathrm{Fr} = \\frac{u}{\\sqrt{gh_f}}\n\\]\nwhere \\(\\sqrt{gh_f}\\) is the wave celerity on a link and \\(u\\) is the water velocity on a link. If the water velocity from the local inertial model is causing the Froude number to be greater than \\(1.0\\) , the water velocity (and flow) is reduced in order to maintain a Froude number of \\(1.0\\).\nThe downstream boundary condition basically simulates a zero water depth boundary condition at a set distance, as follows. For the downstream boundary condition (ghost point) the river width, river bed elevation and Manning’s roughness coefficient are copied from the upstream river cell. The river length \\(\\SIb{}{m}\\) of the boundary cell can be set through the TOML file with riverlength_bc, and has a default value of \\(\\SI{10}{km}\\). The water depth at the boundary cell is fixed at \\(\\SI{0.0}{m}\\).\nSimplified reservoir and lake models can be included as part of the local inertial model for river flow (1D) and river and overland flow combined (see next section). Reservoir and lake models are included as a boundary point with zero water depth for both river and overland flow. For river flow the reservoir or lake model replaces the local inertial model at the reservoir or lake location, and \\(Q\\) is set by the outflow from the reservoir or lake. Overland flow at a reservoir or lake location is not allowed to or from the downstream river grid cell.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Local inertial"
    ]
  },
  {
    "objectID": "model_docs/lateral/local-inertial.html#overland-flow-2d",
    "href": "model_docs/lateral/local-inertial.html#overland-flow-2d",
    "title": "Local inertial",
    "section": "Overland flow (2D)",
    "text": "Overland flow (2D)\nFor the simulation of 2D overland flow on a staggered grid the numerical scheme proposed by de Almeida et al. (2012) is adopted. The explicit solution for the estimation of water discharge between two cells in the x-direction is of the following form (following the notation of Almeida et al. (2012)):\n\\[\n\\begin{split}\nQ_{i-1/2}^{n+1} = \\frac{\\left[ \\theta Q_{i-1/2}^{n} +\\frac{(1-\\theta)}{2}(Q_{(i-3/2)}^{n} +\nQ_{(i+1/2)}^{n})\\right]- g h_f \\frac{\\Delta t}{\\Delta x} (\\eta^n_i - \\eta^n_{i-1}) \\Delta y}{1+g\\Delta t n^2 |Q_{i-1/2}^{n}|/(h_f^{7/3} \\Delta y)}\n\\end{split}\n\\]\nwhere subscripts \\(i\\) and \\(n\\) refer to space and time indices, respectively. Subscript \\(i-\\frac{1}{2}\\) is to the link between node \\(i\\) and \\(i-1\\), subscript \\(i+\\frac{1}{2}\\) is the link between node \\(i\\) and node \\(i+1\\), and subscript \\(i-\\frac{3}{2}\\) is the link between node \\(i-1\\) and node \\(i-2\\). \\(\\SIb{Q}{m^3 s^{-1}}\\) is the water discharge, \\(\\SIb{\\eta}{m}\\) is the water surface elevation, \\(\\SIb{h_f}{m}\\) is the water depth between cells, \\(\\SIb{n}{m^{-\\frac{1}{3}} s}\\) is the Manning’s roughness coefficient, \\(\\SIb{g}{m s^{-2}}\\) is acceleration due to gravity, \\(\\SIb{\\Delta t}{s}\\) is the adaptive model time step, \\(\\SIb{\\Delta\nx}{m}\\) is the distance between two cells and \\(\\SIb{\\Delta y}{m}\\) is the flow width. Below the staggered grid and variables of the numerical solution in the x-direction, based on Almeida et al. (2012):\n\nThe overland flow local inertial approach is used in combination with the local inertial river routing. This is a similar to the modelling approach of Neal et al. (2012), where the hydraulic model LISFLOOD-FP was extended with a subgrid channel model. For the subgrid channel, Neal et al. (2012) make use of a D4 (four direction) scheme, while here a D8 (eight direction) scheme is used, in combination with the D4 scheme for 2D overland flow.\nIn the TOML file the following properties related to the local inertial model with 1D river routing and 2D overland flow can be provided for the sbm model type:\n[model]\nland_routing = \"local-inertial\"  # default is kinematic-wave\nriver_routing = \"local-inertial\" # default is kinematic-wave\ninertial_flow_alpha = 0.5        # alpha coefficient for model stability (default = 0.7)\nfroude_limit = true              # default is true, limit flow to subcritical-critical according to Froude number\nh_thresh = 0.1                   # water depth [m] threshold for calculating flow between cells (default = 1e-03)\nThe properties inertial_flow_alpha, froude_limit and h_thresh apply to 1D river routing as well as 2D overland flow. The properties inertial_flow_alpha and froude_limit, and the adaptive model time step \\(\\Delta t\\) are explained in more detail in the River and floodplain routing section of the local inertial model.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Local inertial"
    ]
  },
  {
    "objectID": "model_docs/lateral/local-inertial.html#inflow",
    "href": "model_docs/lateral/local-inertial.html#inflow",
    "title": "Local inertial",
    "section": "Inflow",
    "text": "Inflow\nExternal water (supply/abstraction) inflow \\(\\SIb{}{m^3 s^{-1}}\\) can be added to the local inertial model for river flow (1D) and river and overland flow combined (1D-2D), as a cyclic parameter or as part of forcing (see also Input section).",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Local inertial"
    ]
  },
  {
    "objectID": "model_docs/lateral/local-inertial.html#abstractions",
    "href": "model_docs/lateral/local-inertial.html#abstractions",
    "title": "Local inertial",
    "section": "Abstractions",
    "text": "Abstractions\nAbstractions from the river through the variable abstraction \\(\\SIb{}{m^3 s^{-1}}\\) are possible when water demand and allocation is computed. The variable abstraction is set from the water demand and allocation module each time step. Abstractions are subtracted as part of the continuity equation of the local inertial model.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Local inertial"
    ]
  },
  {
    "objectID": "model_docs/lateral/local-inertial.html#multi-threading",
    "href": "model_docs/lateral/local-inertial.html#multi-threading",
    "title": "Local inertial",
    "section": "Multi-Threading",
    "text": "Multi-Threading\nThe local inertial model for river flow (1D) and river and overland flow combined (1D-2D) can be executed in parallel using multiple threads.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Local inertial"
    ]
  },
  {
    "objectID": "model_docs/lateral/local-inertial.html#references",
    "href": "model_docs/lateral/local-inertial.html#references",
    "title": "Local inertial",
    "section": "References",
    "text": "References\n\nAdams, J. M., Gasparini, N. M., Hobley, D. E. J., Tucker, G. E., Hutton, E. W. H., Nudurupati, S. S., and Istanbulluoglu, E., 2017, The Landlab v1.0 OverlandFlow component: a Python tool for computing shallow-water flow across watersheds, Geosci. Model Dev., 10, 1645–1663, https://doi.org/10.5194/gmd-10-1645-2017.\nde Almeida, G. A. M., P. Bates, J. E. Freer, and M. Souvignet, 2012, Improving the stability of a simple formulation of the shallow water equations for 2-D flood modeling, Water Resour. Res., 48, W05528, https://doi.org/10.1029/2011WR011570.\nBates, P. D., M. S. Horritt, and T. J. Fewtrell, 2010, A simple inertial formulation of the shallow water equations for efficient two-dimensional flood inundation modelling, J. Hydrol., 387, 33–45, https://doi.org/10.1016/j.jhydrol.2010.03.027.\nCoulthard, T. J., Neal, J. C., Bates, P. D., Ramirez, J., de Almeida, G. A. M., and Hancock, G. R., 2013, Integrating the LISFLOOD-FP 2- D hydrodynamic model with the CAESAR model: implications for modelling landscape evolution, Earth Surf. Proc. Land., 38, 1897–1906, https://doi.org/10.1002/esp.3478.\nNeal, J., G. Schumann, and P. Bates (2012), A subgrid channel model for simulating river hydraulics and floodplaininundation over large and data sparse areas, Water Resour.Res., 48, W11506, https://doi.org/10.1029/2012WR012514.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Local inertial"
    ]
  },
  {
    "objectID": "model_docs/lateral/waterbodies.html",
    "href": "model_docs/lateral/waterbodies.html",
    "title": "Reservoirs and Lakes",
    "section": "",
    "text": "Simplified reservoirs and lakes models can be included as part of the river network.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Reservoirs and Lakes"
    ]
  },
  {
    "objectID": "model_docs/lateral/waterbodies.html#reservoirs",
    "href": "model_docs/lateral/waterbodies.html#reservoirs",
    "title": "Reservoirs and Lakes",
    "section": "Reservoirs",
    "text": "Reservoirs\nSimple reservoirs can be included within the river routing by supplying the following reservoir parameters:\n\nlocs - Outlet of the reservoirs in which each reservoir has a unique id\narea - Surface area of the reservoirs \\(\\SIb{}{m^2}\\)\nareas - Reservoir coverage\ntargetfullfrac - Target fraction full (of max storage) for the reservoir: number between 0 and 1\ntargetminfrac - Target minimum full fraction (of max storage). Number between 0 and 1\nmaxvolume - Maximum reservoir storage (above which water is spilled) \\(\\SIb{}{m^3}\\)\ndemand - Minimum (environmental) flow requirement downstream of the reservoir \\(\\SIb{}{m^3 s^{-1}}\\)\nmaxrelease - Maximum \\(Q\\) that can be released if below spillway \\(\\SIb{}{m^3 s^{-1}}\\)\n\nBy default the reservoirs are not included in the model. To include them put the following lines in the TOML file of the model:\n[model]\nreservoirs = true\nFinally there is a mapping required between external and internal parameter names in the TOML file, with below an example:\n[input]\n\n[input.lateral.river.reservoir]\narea = \"ResSimpleArea\"\nareas = \"wflow_reservoirareas\"\ndemand = \"ResDemand\"\nlocs = \"wflow_reservoirlocs\"\nmaxrelease = \"ResMaxRelease\"\nmaxvolume = \"ResMaxVolume\"\ntargetfullfrac = \"ResTargetFullFrac\"\ntargetminfrac = \"ResTargetMinFrac\"\n\nLakes (unregulated and regulated)\nLakes are modelled using a mass balance approach:\n\\[\n    \\dfrac{S(t + \\Delta t)}{\\Delta t} = \\dfrac{S(t)}{\\Delta t} + \\subtext{Q}{in} + \\dfrac{(P-E) A}{\\Delta t} - \\subtext{Q}{out}\n\\]\nwhere \\(\\SIb{S}{m^3}\\) is lake storage, \\(\\SIb{\\Delta t}{s}\\) is the model timestep, \\(\\SIb{\\subtext{Q}{in}}{m^3 s^{-1}}\\) is the sum of inflows (river, overland and lateral subsurface flow), \\(\\SIb{\\subtext{Q}{out}}{m^3 s^{-1}}\\) is the lake outflow at the outlet, \\(\\SIb{P}{m}\\) is precipitation, \\(\\SIb{E}{m}\\) is lake evaporation and \\(\\SIb{A}{m^2}\\) is the lake surface area.\n\n\n\nLake schematization.\n\n\nMost of the variables in this equation are already known or coming from previous timestep, apart from \\(S(t+ \\Delta t)\\) and \\(\\subtext{Q}{out}\\) which can both be linked to the water level \\(H\\) in the lake using a storage curve \\(S = f(H)\\) and a rating curve \\(Q = f(H)\\). In wflow, several options are available to select storage and rating curves, and in most cases, the mass balance is then solved by linearization and iteration or using the Modified Puls Approach from Maniak (Burek et al., 2013). Storage curves in wflow can either:\n\nCome from the interpolation of field data linking volume and lake height,\nBe computed from the simple relationship \\(S = A H\\).\n\nRating curves in wflow can either:\n\nCome from the interpolation of field data linking lake outflow and water height, also appropriate for regulated lakes/ dams,\nBe computed from a rating curve of the form \\(\\subtext{Q}{out} = \\alpha (H-H_0)^\\beta\\), where \\(H_{0}\\) is the minimum water level under which the outflow is zero. Usual values for \\(\\beta\\) are \\(\\frac{3}{2}\\) for a rectangular weir or \\(2\\) for a parabolic weir (Bos, 1989).\n\n\n\nModified Puls Approach\nThe Modified Puls Approach is a resolution method of the lake balance that uses an explicit relationship between storage and outflow. Storage is assumed to be equal to \\(A H\\) and the rating curve for a parabolic weir (\\(\\beta = 2\\)):\n\\[\n    S = A H = A  (h + H_{0}) = A \\sqrt{\\frac{Q}{\\alpha}} + A H_0\n\\]\nInserting this equation in the mass balance gives:\n\\[\n    \\dfrac{A}{\\Delta t} \\sqrt{\\frac{Q}{\\alpha}} + Q = \\dfrac{S(t)}{\\Delta t} + \\subtext{Q}{in} +\n    A\\dfrac{P-E}{\\Delta t} - \\dfrac{A H_0}{\\Delta t} = \\mathrm{SI} - \\dfrac{A H_0}{\\Delta t}\n\\]\nThe solution for \\(Q\\) is then:\n\\[\n  Q =\n    \\begin{cases}\n      \\begin{align*}\n        \\frac{1}{4}\\left(-\\mathrm{LF} + \\sqrt{\\mathrm{LF}^{2} + 4  \\left(\\mathrm{SI} - \\dfrac{A H_0}{\\Delta t} \\right)}\n        \\right)^2 &\\text{ if }\\quad \\mathrm{SI} &gt; \\dfrac{A H_0}{\\Delta t} \\\\\n        0 &\\text{ if }\\quad \\mathrm{SI} \\leq \\dfrac{A H_0}{\\Delta t}\n      \\end{align*}\n    \\end{cases}\n\\]\nwhere\n\\[\n\\mathrm{LF} = \\dfrac{A}{\\Delta t \\sqrt{\\alpha}}.\n\\]\n\n\nLake parameters\nLakes can be included within the kinematic wave river routing in wflow, by supplying the following parameters:\n\narea - Surface area of the lakes [m\\(^2\\)]\nareas - Coverage of the lakes\nlocs - Outlet of the lakes in which each lake has a unique id\nlinkedlakelocs - Outlet of linked (downstream) lakes (unique id)\nwaterlevel - Lake water level [m], used to reinitiate lake model\nthreshold - Water level threshold \\(H_{0}\\) under which outflow is zero [m]\nstorfunc - Type of lake storage curve ; 1 for \\(S = AH\\) (default) and 2 for \\(S = f(H)\\) from lake data and interpolation\noutflowfunc - Type of lake rating curve ; 1 for \\(Q = f(H)\\) from lake data and interpolation, 2 for general \\(Q = b(H - H_{0})^{e}\\) and 3 in the case of Puls Approach \\(Q = b(H - H_{0})^{2}\\) (default)\nb - Rating curve coefficient\ne - Rating curve exponent\n\nBy default, the lakes are not included in the model. To include them, put the following line in the TOML file of the model:\n[model]\nlakes = true\nThere is also a mapping required between external and internal parameter names in the TOML file, with below an example:\n[input]\n\n[input.lateral.river.lake]\narea = \"lake_area\"\nareas = \"wflow_lakeareas\"\nb = \"lake_b\"\ne = \"lake_e\"\nlocs = \"wflow_lakelocs\"\noutflowfunc = \"lake_outflowfunc\"\nstorfunc  = \"lake_storfunc\"\nthreshold  = \"lake_threshold\"\nwaterlevel = \"lake_waterlevel\"\n\n\nAdditional settings\nStorage and rating curves from field measurement can be supplied to wflow via CSV files supplied in the same folder of the TOML file. Naming of the files uses the ID of the lakes where data are available and is of the form lake_sh_1.csv and lake_hq_1.csv for respectively the storage and rating curves of lake with ID 1.\nThe storage curve is stored in a CSV file with lake level \\(\\SIb{}{m}\\) in the first column H and corresponding lake storage \\(\\SIb{}{m^3}\\) in the second column S:\nH,  S\n392.21, 0\n393.21, 430202000\n393.71, 649959000\n394.21, 869719000\nThe rating curve uses level and discharge data depending on the Julian day of the year (JDOY), and can be also used for regulated lakes/ dams. The first line contains H for the first column. The other lines contain the water level and the corresponding discharges for the different JDOY (1-365), see also the example below, that shows part of a CSV file (first 4 Julian days). The volume above the maximum water level of the rating curve is assumed to flow instantaneously out of the lake (overflow).\nH\n394,    43,     43,     43,     43\n394.01, 44.838, 44.838, 44.838, 44.838\n394.02, 46.671, 46.671, 46.671, 46.671\n394.03, 48.509, 48.509, 48.509, 48.509\n394.04, 50.347, 50.347, 50.347, 50.347\n394.05, 52.179, 52.179, 52.179, 52.179\nLinked lakes: In some cases, lakes can be linked and return flow can be allowed from the downstream to the upstream lake. The linked lakes are defined in the linkedlakelocs parameter that represent the downstream lake location ID, at the grid cell of the upstream lake location.\n\n\n\n\n\n\nNote\n\n\n\nIn every file, level units are meters [m] above lake bottom and not meters above sea level [m asl]. Especially with storage/rating curves coming from data, please be careful and convert units if needed.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Reservoirs and Lakes"
    ]
  },
  {
    "objectID": "model_docs/lateral/waterbodies.html#references",
    "href": "model_docs/lateral/waterbodies.html#references",
    "title": "Reservoirs and Lakes",
    "section": "References",
    "text": "References\n\nBos M.G., 1989. Discharge measurement structures. Third revised edition, International Institute for Land Reclamation and Improvement ILRI, Wageningen, The Netherlands.\nBurek P., Van der Knijf J.M., Ad de Roo, 2013. LISFLOOD – Distributed Water Balance and flood Simulation Model – Revised User Manual. DOI: http://dx.doi.org/10.2788/24719.",
    "crumbs": [
      "Model documentation",
      "Lateral processes",
      "Reservoirs and Lakes"
    ]
  },
  {
    "objectID": "model_docs/parameters_lateral.html",
    "href": "model_docs/parameters_lateral.html",
    "title": "Lateral concepts",
    "section": "",
    "text": "The Table below shows the parameters (fields) of struct SurfaceFlowRiver used for river flow, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river] to map the internal model parameter to the external netCDF variable. The input parameter slope (listed under [input.lateral.river]) is not equal to the internal model parameter sl, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nbeta\nconstant in Manning’s equation\n-\n-\n\n\nsl (slope)\nslope\nm m\\(^{-1}\\)\n-\n\n\nn\nManning’s roughness\ns m\\(^{-\\frac{1}{3}}\\)\n0.036\n\n\ndl\nlength\nm\n-\n\n\nq\ndischarge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqin\ninflow from upstream cells\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq_av\naverage discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqlat\nlateral inflow per unit length\nm\\(^2\\) s\\(^{-1}\\)\n-\n\n\ninwater\nlateral inflow\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\ninflow\nexternal inflow (abstraction/supply/demand)\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\ninflow_wb\ninflow waterbody (lake or reservoir model) from land part\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\nabstraction\nabstraction (computed as part of water demand and allocation)\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\nvolume\nkinematic wave volume\nm\\(^3\\)\n-\n\n\nh\nwater level\nm\n-\n\n\nh_av\naverage water level\nm\n-\n\n\nbankfull_depth\nbankfull river depth\nm\n1.0\n\n\ndt\nmodel time step\ns\n-\n\n\nits\nnumber of fixed iterations\n-\n-\n\n\nwidth\nwidth\nm\n-\n\n\nalpha_pow\nused in the power part of \\(\\alpha\\)\n-\n-\n\n\nalpha_term\nterm used in computation of \\(\\alpha\\)\n-\n-\n\n\nalpha\nconstant in momentum equation \\(A = \\alpha Q^{\\beta}\\)\ns\\(^{\\frac{3}{5}}\\) m\\(^{\\frac{1}{5}}\\)\n-\n\n\ncel\ncelerity of kinematic wave\nm s\\(^{-1}\\)\n-\n\n\nreservoir_index\nmap cell to 0 (no reservoir) or i (pick reservoir i in reservoir field)\n-\n-\n\n\nlake_index\nmap cell to 0 (no lake) or i (pick lake i in lake field)\n-\n-\n\n\nreservoir\nan array of reservoir models SimpleReservoir\n-\n-\n\n\nlake\nan array of lake models Lake\n-\n-\n\n\nallocation\nwater allocation of type AllocationRiver\n-\n-\n\n\nkinwave_it\nboolean for kinematic wave iterations\n-\nfalse\n\n\n\nThe Table below shows the parameters (fields) of struct SurfaceFlowLand used for overland flow, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.land] to map the internal model parameter to the external netCDF variable. The input parameter slope (listed under [input.lateral.land]) is not equal to the internal model parameter sl, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nbeta\nconstant in Manning’s equation\n-\n-\n\n\nsl (slope)\nslope\nm m\\(^{-1}\\)\n-\n\n\nn\nManning’s roughness\ns m\\(^{-\\frac{1}{3}}\\)\n0.072\n\n\ndl\nlength\nm\n-\n\n\nq\ndischarge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqin\ninflow from upstream cells\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq_av\naverage discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqlat\nlateral inflow per unit length\nm\\(^2\\) s\\(^{-1}\\)\n-\n\n\ninwater\nlateral inflow\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nvolume\nkinematic wave volume\nm\\(^3\\)\n-\n\n\nh\nwater level\nm\n-\n\n\nh_av\naverage water level\nm\n-\n\n\ndt\nmodel time step\ns\n-\n\n\nits\nnumber of fixed iterations\n-\n-\n\n\nwidth\nwidth\nm\n-\n\n\nalpha_pow\nused in the power part of \\(\\alpha\\)\n-\n-\n\n\nalpha_term\nterm used in computation of \\(\\alpha\\)\n-\n-\n\n\nalpha\nconstant in momentum equation \\(A = \\alpha Q^{\\beta}\\)\ns\\(^{\\frac{3}{5}}\\) m\\(^{\\frac{1}{5}}\\)\n-\n\n\ncel\ncelerity of kinematic wave\nm s\\(^{-1}\\)\n-\n\n\nto_river\npart of overland flow that flows to the river\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nkinwave_it\nboolean for kinematic wave iterations\n-\nfalse\n\n\n\n\n\n\nThe Table below shows the parameters (fields) of struct LateralSSF, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF). The soil related parameters f, soilthickness, z_exp, theta_s and theta_r are derived from the vertical SBM concept (including unit conversion for f, z_exp and soilthickness), and can be listed in the TOML configuration file under [input.vertical], to map the internal model parameter to the external netCDF variable. The internal slope model parameter slope is set through the TOML file as follows:\n[input.lateral.land]\nslope = \"Slope\"\nThe parameter kh_0 is computed by multiplying the vertical hydraulic conductivity at the soil surface kv_0 (including unit conversion) of the vertical SBM concept with the internal parameter khfrac [-] (default value of 1.0). The internal model parameter khfrac is set through the TOML file as follows:\n[input.lateral.subsurface]\nksathorfrac = \"KsatHorFrac\"\nThe khfrac parameter compensates for anisotropy, small scale kv_0 measurements (soil core) that do not represent larger scale hydraulic conductivity, and smaller flow length scales (hillslope) in reality, not represented by the model resolution.\nFor the vertical SBM concept different vertical hydraulic conductivity depth profiles are possible, and these also determine which LateralSSF parameters are used including the input requirements for the computation of lateral subsurface flow. For the exponential profile the model parameters kh_0 and f are used. For the exponential_constant profile kh_0 and f are used, and z_exp is required as part of [input.vertical]. For the layered profile, SBM model parameter kv is used, and for the layered_exponential profile kv is used and z_exp is required as part of [input.vertical].\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nkh_0\nhorizontal hydraulic conductivity at soil surface\nm d\\(^{-1}\\)\n3.0\n\n\nf\na scaling parameter (controls exponential decline of kh_0)\nm\\(^{-1}\\)\n1.0\n\n\nkh\nhorizontal hydraulic conductivity\nm d\\(^{-1}\\)\n-\n\n\nkhfrac (ksathorfrac)\na muliplication factor applied to vertical hydraulic conductivity kv\n-\n100.0\n\n\nsoilthickness\nsoil thickness\nm\n2.0\n\n\ntheta_s\nsaturated water content (porosity)\n-\n0.6\n\n\ntheta_r\nresidual water content\n-\n0.01\n\n\ndt\nmodel time step\nd\n-\n\n\nslope\nslope\nm m\\(^{-1}\\)\n-\n\n\ndl\ndrain length\nm\n-\n\n\ndw\ndrain width\nm\n-\n\n\nzi\npseudo-water table depth (top of the saturated zone)\nm\n-\n\n\nz_exp\ndepth from soil surface for which exponential decline of kh_0 is valid\nm\n-\n\n\nexfiltwater\nexfiltration (groundwater above surface level, saturated excess conditions)\nm Δt⁻¹\n-\n\n\nrecharge\nnet recharge to saturated store\nm\\(^2\\) Δt⁻¹\n-\n\n\nssf\nsubsurface flow\nm\\(^3\\) d\\({-1}\\)\n-\n\n\nssfin\ninflow from upstream cells\nm\\(^3\\) d\\({-1}\\)\n-\n\n\nssfmax\nmaximum subsurface flow\nm\\(^2\\) d\\({-1}\\)\n-\n\n\nto_river\npart of subsurface flow that flows to the river\nm\\(^3\\) d\\({-1}\\)\n-\n\n\nvolume\nsubsurface water volume\nm\\(^3\\)\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Lateral concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_lateral.html#kinematic-wave",
    "href": "model_docs/parameters_lateral.html#kinematic-wave",
    "title": "Lateral concepts",
    "section": "",
    "text": "The Table below shows the parameters (fields) of struct SurfaceFlowRiver used for river flow, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river] to map the internal model parameter to the external netCDF variable. The input parameter slope (listed under [input.lateral.river]) is not equal to the internal model parameter sl, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nbeta\nconstant in Manning’s equation\n-\n-\n\n\nsl (slope)\nslope\nm m\\(^{-1}\\)\n-\n\n\nn\nManning’s roughness\ns m\\(^{-\\frac{1}{3}}\\)\n0.036\n\n\ndl\nlength\nm\n-\n\n\nq\ndischarge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqin\ninflow from upstream cells\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq_av\naverage discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqlat\nlateral inflow per unit length\nm\\(^2\\) s\\(^{-1}\\)\n-\n\n\ninwater\nlateral inflow\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\ninflow\nexternal inflow (abstraction/supply/demand)\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\ninflow_wb\ninflow waterbody (lake or reservoir model) from land part\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\nabstraction\nabstraction (computed as part of water demand and allocation)\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\nvolume\nkinematic wave volume\nm\\(^3\\)\n-\n\n\nh\nwater level\nm\n-\n\n\nh_av\naverage water level\nm\n-\n\n\nbankfull_depth\nbankfull river depth\nm\n1.0\n\n\ndt\nmodel time step\ns\n-\n\n\nits\nnumber of fixed iterations\n-\n-\n\n\nwidth\nwidth\nm\n-\n\n\nalpha_pow\nused in the power part of \\(\\alpha\\)\n-\n-\n\n\nalpha_term\nterm used in computation of \\(\\alpha\\)\n-\n-\n\n\nalpha\nconstant in momentum equation \\(A = \\alpha Q^{\\beta}\\)\ns\\(^{\\frac{3}{5}}\\) m\\(^{\\frac{1}{5}}\\)\n-\n\n\ncel\ncelerity of kinematic wave\nm s\\(^{-1}\\)\n-\n\n\nreservoir_index\nmap cell to 0 (no reservoir) or i (pick reservoir i in reservoir field)\n-\n-\n\n\nlake_index\nmap cell to 0 (no lake) or i (pick lake i in lake field)\n-\n-\n\n\nreservoir\nan array of reservoir models SimpleReservoir\n-\n-\n\n\nlake\nan array of lake models Lake\n-\n-\n\n\nallocation\nwater allocation of type AllocationRiver\n-\n-\n\n\nkinwave_it\nboolean for kinematic wave iterations\n-\nfalse\n\n\n\nThe Table below shows the parameters (fields) of struct SurfaceFlowLand used for overland flow, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.land] to map the internal model parameter to the external netCDF variable. The input parameter slope (listed under [input.lateral.land]) is not equal to the internal model parameter sl, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nbeta\nconstant in Manning’s equation\n-\n-\n\n\nsl (slope)\nslope\nm m\\(^{-1}\\)\n-\n\n\nn\nManning’s roughness\ns m\\(^{-\\frac{1}{3}}\\)\n0.072\n\n\ndl\nlength\nm\n-\n\n\nq\ndischarge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqin\ninflow from upstream cells\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq_av\naverage discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqlat\nlateral inflow per unit length\nm\\(^2\\) s\\(^{-1}\\)\n-\n\n\ninwater\nlateral inflow\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nvolume\nkinematic wave volume\nm\\(^3\\)\n-\n\n\nh\nwater level\nm\n-\n\n\nh_av\naverage water level\nm\n-\n\n\ndt\nmodel time step\ns\n-\n\n\nits\nnumber of fixed iterations\n-\n-\n\n\nwidth\nwidth\nm\n-\n\n\nalpha_pow\nused in the power part of \\(\\alpha\\)\n-\n-\n\n\nalpha_term\nterm used in computation of \\(\\alpha\\)\n-\n-\n\n\nalpha\nconstant in momentum equation \\(A = \\alpha Q^{\\beta}\\)\ns\\(^{\\frac{3}{5}}\\) m\\(^{\\frac{1}{5}}\\)\n-\n\n\ncel\ncelerity of kinematic wave\nm s\\(^{-1}\\)\n-\n\n\nto_river\npart of overland flow that flows to the river\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nkinwave_it\nboolean for kinematic wave iterations\n-\nfalse\n\n\n\n\n\n\nThe Table below shows the parameters (fields) of struct LateralSSF, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF). The soil related parameters f, soilthickness, z_exp, theta_s and theta_r are derived from the vertical SBM concept (including unit conversion for f, z_exp and soilthickness), and can be listed in the TOML configuration file under [input.vertical], to map the internal model parameter to the external netCDF variable. The internal slope model parameter slope is set through the TOML file as follows:\n[input.lateral.land]\nslope = \"Slope\"\nThe parameter kh_0 is computed by multiplying the vertical hydraulic conductivity at the soil surface kv_0 (including unit conversion) of the vertical SBM concept with the internal parameter khfrac [-] (default value of 1.0). The internal model parameter khfrac is set through the TOML file as follows:\n[input.lateral.subsurface]\nksathorfrac = \"KsatHorFrac\"\nThe khfrac parameter compensates for anisotropy, small scale kv_0 measurements (soil core) that do not represent larger scale hydraulic conductivity, and smaller flow length scales (hillslope) in reality, not represented by the model resolution.\nFor the vertical SBM concept different vertical hydraulic conductivity depth profiles are possible, and these also determine which LateralSSF parameters are used including the input requirements for the computation of lateral subsurface flow. For the exponential profile the model parameters kh_0 and f are used. For the exponential_constant profile kh_0 and f are used, and z_exp is required as part of [input.vertical]. For the layered profile, SBM model parameter kv is used, and for the layered_exponential profile kv is used and z_exp is required as part of [input.vertical].\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nkh_0\nhorizontal hydraulic conductivity at soil surface\nm d\\(^{-1}\\)\n3.0\n\n\nf\na scaling parameter (controls exponential decline of kh_0)\nm\\(^{-1}\\)\n1.0\n\n\nkh\nhorizontal hydraulic conductivity\nm d\\(^{-1}\\)\n-\n\n\nkhfrac (ksathorfrac)\na muliplication factor applied to vertical hydraulic conductivity kv\n-\n100.0\n\n\nsoilthickness\nsoil thickness\nm\n2.0\n\n\ntheta_s\nsaturated water content (porosity)\n-\n0.6\n\n\ntheta_r\nresidual water content\n-\n0.01\n\n\ndt\nmodel time step\nd\n-\n\n\nslope\nslope\nm m\\(^{-1}\\)\n-\n\n\ndl\ndrain length\nm\n-\n\n\ndw\ndrain width\nm\n-\n\n\nzi\npseudo-water table depth (top of the saturated zone)\nm\n-\n\n\nz_exp\ndepth from soil surface for which exponential decline of kh_0 is valid\nm\n-\n\n\nexfiltwater\nexfiltration (groundwater above surface level, saturated excess conditions)\nm Δt⁻¹\n-\n\n\nrecharge\nnet recharge to saturated store\nm\\(^2\\) Δt⁻¹\n-\n\n\nssf\nsubsurface flow\nm\\(^3\\) d\\({-1}\\)\n-\n\n\nssfin\ninflow from upstream cells\nm\\(^3\\) d\\({-1}\\)\n-\n\n\nssfmax\nmaximum subsurface flow\nm\\(^2\\) d\\({-1}\\)\n-\n\n\nto_river\npart of subsurface flow that flows to the river\nm\\(^3\\) d\\({-1}\\)\n-\n\n\nvolume\nsubsurface water volume\nm\\(^3\\)\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Lateral concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_lateral.html#local-inertial",
    "href": "model_docs/parameters_lateral.html#local-inertial",
    "title": "Lateral concepts",
    "section": "Local inertial",
    "text": "Local inertial\n\nRiver flow\nThe Table below shows the parameters (fields) of struct ShallowWaterRiver, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river], to map the internal model parameter to the external netCDF variable. The parameter river bed elevation zb is based on the bankfull elevation and depth input data:\n[input.lateral.river]\nbankfull_elevation = \"RiverZ\"\nbankfull_depth = \"RiverDepth\"\nWhen floodplain routing (parameter floodplain) is included as part of local inertial river flow, parameter q_av represents the total average discharge of the river channel and floodplain routing, and parameter q_channel_av represents average river channel discharge. Otherwise parameters q_av and q_channel_av represent both average river channel discharge (are equal).\nThe input parameter n (listed under [input.lateral.river]) is not equal to the internal model parameter mannings_n, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nmannings_n (n)\nManning’s roughness\ns m\\(^{-\\frac{1}{3}}\\)\n0.036\n\n\nwidth\nriver width\nm\n-\n\n\nzb\nriver bed elevation\nm\n-\n\n\nlength\nriver length\nm\n-\n\n\nn\nnumber of cells\n-\n-\n\n\nne\nnumber of edges/links\n-\n-\n\n\nactive_n\nactive nodes\n-\n-\n\n\nactive_e\nactive edges\n-\n-\n\n\ng\nacceleration due to gravity\nm s\\(^{-2}\\)\n-\n\n\nalpha\nstability coefficient (Bates et al., 2010)\n-\n0.7\n\n\nh_thresh\ndepth threshold for calculating flow\nm\n0.001\n\n\ndt\nmodel time step\ns\n-\n\n\nq\nriver discharge (subgrid channel)\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq_av\naverage river channel (+ floodplain) discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq_channel_av\naverage river channel discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nzb_max\nmaximum channel bed elevation\nm\n-\n\n\nmannings_n_sq\nManning’s roughness squared at edge/link\n(s m\\(^{-\\frac{1}{3}}\\))\\(^2\\)\n-\n\n\nh\nwater depth\nm\n-\n\n\nzs_max\nmaximum water elevation\nm\n-\n\n\nzs_src\nwater elevation of source node of edge\nm\n-\n\n\nzs_dst\nwater elevation of downstream node of edge\nm\n-\n\n\nhf\nwater depth at edge/link\nm\n-\n\n\nh_av\naverage water depth\nm\n-\n\n\ndl\nriver length\nm\n-\n\n\ndl_at_link\nriver length at edge/link\nm\n-\n\n\nwidth\nriver width\nm\n-\n\n\nwidth_at_link\nriver width at edge/link\nm\n-\n\n\na\nflow area at edge/link\nm\\(^2\\)\n-\n\n\nr\nhydraulic radius at edge/link\nm\n-\n\n\nvolume\nriver volume\nm\\(^3\\)\n-\n\n\nerror\nerror volume\nm\\(^3\\)\n-\n\n\ninwater\nlateral inflow\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\ninflow\nexternal inflow (abstraction/supply/demand)\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\nabstraction\nabstraction (computed as part of water demand and allocation)\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\ninflow_wb\ninflow waterbody (lake or reservoir model) from land part\nm\\(^3\\) s\\(^{-1}\\)\n0.0\n\n\nbankfull_volume\nbankfull volume\nm\\(^3\\)\n-\n\n\nbankfull_depth\nbankfull depth\nm\n-\n\n\nfroude_limit\nif true a check is performed if froude number &gt; 1.0 (algorithm is modified)\n-\n-\n\n\nreservoir_index\nriver cell index with a reservoir\n-\n-\n\n\nlake_index\nriver cell index with a lake\n-\n-\n\n\nwaterbody\nwater body cells (reservoir or lake)\n-\n-\n\n\nreservoir\nan array of reservoir models SimpleReservoir\n-\n-\n\n\nlake\nan array of lake models Lake\n-\n-\n\n\nallocation\noptional water allocation of type AllocationRiver\n-\n-\n\n\nfloodplain\noptional 1D floodplain routing FloodPlain\n-\n-\n\n\n\n\n\n1D floodplain\nThe Table below shows the parameters (fields) of struct FloodPlain (part of struct ShallowWaterRiver), including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river.floodplain], to map the internal model parameter to the external netCDF variable. The input parameter n (listed under [input.lateral.river.floodplain]) is not equal to the internal model parameter mannings_n, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nprofile\nFloodplain profile FloodPlainProfile\n\n\n\n\nmannings_n (n)\nManning’s roughness for the floodplain\ns m\\(^{-\\frac{1}{3}}\\)\n0.072\n\n\nmannings_n_sq\nManning’s roughness squared at edge/link\n(s m\\(^{-\\frac{1}{3}}\\))\\(^2\\)\n-\n\n\nvolume\nflood volume\nm\\(^3\\)\n-\n\n\nh\nflood depth\nm\n-\n\n\nh_av\naverage flood depth\nm\n-\n\n\nerror\n\nerror volume\nm\\(^3\\)\n\n\na\nflow area at edge/link\nm\\(^2\\)\n-\n\n\nr\nhydraulic radius at edge/link\nm\n-\n\n\nhf\nflood depth at edge/link\nm\n-\n\n\nzb_max\nmaximum bankfull elevation at edge\nm\n-\n\n\nq0\ndischarge at previous time step\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq\ndischarge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nq_av\naverage discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nhf_index\nindex with hf above depth threshold\n-\n-\n\n\n\nThe floodplain profile FloodPlainProfile contains the following parameters:\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\ndepth (flood_depth)\nflood depths\nm\n-\n\n\nvolume\ncumulative flood volume (per flood depth)\nm\\(^3\\)\n-\n\n\nwidth\ncumulative floodplain width (per flood depth)\nm\n-\n\n\na\ncumulative floodplain flow area (per flood depth)\nm\\(^2\\)\n-\n\n\np\ncumulative floodplain wetted perimeter (per flood depth)\nm\n-\n\n\n\nThe floodplain volumes (per flood depth interval) can be set as follows through the TOML file:\n[input.lateral.river.floodplain]\nvolume = \"floodplain_volume\"\nThe input parameter flood_depth (dimension of floodplain volume) is not equal to the internal model parameter depth, and is listed in the Table below between parentheses.\n\n\nOverland flow\nThe Table below shows the parameters (fields) of struct ShallowWaterLand, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.land], to map the internal model parameter to the external netCDF variable.\nThe mannings roughness (for the computation of mannings_n_sq) should be provided as follows in the TOML file:\n[input.lateral.land]\nn = \"n_land\" # mannings roughness\nThe input parameter elevation (listed under [input.lateral.land]) is not equal to the internal model parameter z, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nn\nnumber of cells\n-\n-\n\n\nxl\ncell length x direction\nm\n-\n\n\nyl\ncell length y direction\nm\n-\n\n\nxwidth\neffective flow width x direction (floodplain)\nm\n-\n\n\nywidth\neffective flow width y direction (floodplain)\nm\n-\n\n\ng\nacceleration due to gravity\nm s\\(^{-2}\\)\n-\n\n\ntheta\nweighting factor (de Almeida et al., 2012)\n-\n0.8\n\n\nalpha\nstability coefficient (Bates et al., 2010)\n-\n0.7\n\n\nh_thresh\ndepth threshold for calculating flow\nm\n0.001\n\n\ndt\nmodel time step\ns\n-\n\n\nqy0\nflow in y direction at previous time step\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqx0\nflow in x direction at previous time step\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqx\nflow in x direction\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nqy\nflow in y direction\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nzx_max\nmaximum cell elevation (x direction)\nm\n-\n\n\nzy_max\nmaximum cell elevation (y direction)\nm\n-\n\n\nmannings_n_sq\nManning’s roughness squared\ns m\\(^{-\\frac{1}{3}}\\)\nbased on 0.072\n\n\nvolume\ntotal volume of cell (including river volume for river cells)\nm\\(^3\\)\n-\n\n\nerror\nerror volume\nm\\(^3\\)\n-\n\n\nrunoff\nrunoff from hydrological model\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\nh\nwater depth of cell\nm\n-\n\n\nz (elevation)\nelevation of cell\nm\n-\n\n\nfroude_limit\nif true a check is performed if froude number &gt; 1.0 (algorithm is modified)\n-\n-\n\n\nrivercells\nriver cells\n-\n-\n\n\nh_av\naverage water depth\nm\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Lateral concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_lateral.html#water-bodies",
    "href": "model_docs/parameters_lateral.html#water-bodies",
    "title": "Lateral concepts",
    "section": "Water bodies",
    "text": "Water bodies\n\nReservoirs\nThe Table below shows the parameters (fields) of struct SimpleReservoir, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river.reservoir], to map the internal model parameter to the external netCDF variable.\nTwo parameters reservoir coverage areas and the outlet of reservoirs (unique id) locs that are not part of the SimpleReservoir struct are also required, and can be set as follows through the TOML file:\n[input.lateral.river.reservoir]\nareas = \"wflow_reservoirareas\"\nlocs = \"wflow_reservoirlocs\"\n\n\n\n\n\n\n\n\n\nparameter\ndescription\nunit\ndefault\n\n\n\n\narea\narea\nm^2\n-\n\n\ndemand\nminimum (environmental) flow requirement downstream of the reservoir\nm^3 s^{-1}\n-\n\n\nmaxrelease\nmaximum amount that can be released if below spillway\nm^3 s^{-1}\n-\n\n\nmaxvolume\nmaximum storage (above which water is spilled)\nm^3\n-\n\n\ntargetfullfrac\ntarget fraction full (of max storage)\n-\n-\n\n\ntargetminfrac\ntarget minimum full fraction (of max storage)\n-\n-\n\n\ndemandrelease\nminimum (environmental) flow released from reservoir\nm^3 s^{-1}\n-\n\n\ndt\nmodel time step\ns\n-\n\n\nvolume\nvolume\nm^3\n-\n\n\ninflow\ntotal inflow into reservoir\nm^3\n-\n\n\noutflow\noutflow of reservoir\nm^3 s^{-1}\n-\n\n\ntotaloutflow\ntotal outflow of reservoir\nm^3\n-\n\n\npercfull\nfraction full (of max storage)\n-\n-\n\n\nprecipitation\naverage precipitation for reservoir area\nmm Δt⁻¹\n-\n\n\nevaporation\naverage potential evaporation for reservoir area\nmm Δt⁻¹\n-\n\n\nactevap\naverage actual evaporation for lake area\nmm Δt⁻¹\n-\n\n\n\n\n\nLakes\nThe Table below shows the parameters (fields) of struct Lake, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river.lake], to map the internal model parameter to the external netCDF variable.\nTwo parameters lake coverage areas and the outlet of lakes (unique id) locs that are not part of the Lake struct are also required, and can be set as follows through the TOML file:\n[input.lateral.river.lake]\nareas = \"wflow_lakeareas\"\nlocs = \"wflow_lakelocs\"\nThe input parameter linkedlakelocs (listed under [input.lateral.river.lake]) is not equal to the internal model parameter lowerlake_ind, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nparameter\ndescription\nunit\ndefault\n\n\n\n\narea\narea\nm^2\n-\n\n\nb\nRating curve coefficient\n-\n-\n\n\ne\nRating curve exponent\n-\n-\n\n\noutflowfunc\ntype of lake rating curve\n-\n-\n\n\nstorfunc\ntype of lake storage curve\n-\n-\n\n\nthreshold\nwater level threshold H_0 below that level outflow is zero\nm\n-\n\n\nwaterlevel\nwaterlevel H of lake\nm\n-\n\n\nlowerlake_ind (linkedlakelocs)\nIndex of lower lake (linked lakes)\n-\n0\n\n\nsh\ndata for storage curve\n-\n-\n\n\nhq\ndata rating curve\n-\n-\n\n\ndt\nmodel time step\ns\n-\n\n\ninflow\ntotal inflow to the lake\nm^3\n-\n\n\nstorage\nstorage lake\nm^3\n-\n\n\nmaxstorage\nmaximum storage lake with rating curve type 1\nm^3\n-\n\n\noutflow\noutflow lake\nm^3 s^{-1}\n-\n\n\ntotaloutflow\ntotal outflow lake\nm^3\n-\n\n\nprecipitation\naverage precipitation for lake area\nmm Δt⁻¹\n-\n\n\nevaporation\naverage potential evaporation for lake area\nmm Δt⁻¹\n-\n\n\nactevap\naverage actual evaporation for lake area\nmm Δt⁻¹\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Lateral concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_lateral.html#water-allocation-river",
    "href": "model_docs/parameters_lateral.html#water-allocation-river",
    "title": "Lateral concepts",
    "section": "Water allocation river",
    "text": "Water allocation river\nThe Table below shows the parameters (fields) of struct AllocationRiver, used when water demand and allocation is computed (optional), including a description of these parameters, the unit, and default value if applicable.\n\n\n\n\n\n\n\n\n\nparameter\ndescription\nunit\ndefault\n\n\n\n\nact_surfacewater_abst\nactual surface water abstraction\nmm Δt⁻¹\n-\n\n\nact_surfacewater_abst_vol\nactual surface water abstraction\nm\\(^3\\) Δt⁻¹\n-\n\n\navailable_surfacewater\navailable surface water\nm\\(^3\\)\n-\n\n\nnonirri_returnflow\nreturn flow from non-irrigation (industry, domestic and livestock)\nmm Δt⁻¹\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Lateral concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_lateral.html#groundwater-flow",
    "href": "model_docs/parameters_lateral.html#groundwater-flow",
    "title": "Lateral concepts",
    "section": "Groundwater flow",
    "text": "Groundwater flow\n\nConfined aquifer\nThe Table below shows the parameters (fields) of struct ConfinedAquifer, including a description of these parameters, the unit, and default value if applicable. Struct ConfinedAquifer is not (yet) part of a wflow model.\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nk\nhorizontal conductivity\nm d\\(^{-1}\\)s\n-\n\n\nstorativity\nstorativity\nm m\\(^{-1}\\)\n-\n\n\nspecific_storage\nspecific storage\nm\\(^{-1}\\)\n-\n\n\ntop\ntop groundwater layers\nm\n-\n\n\nbottom\nbottom groundwater layers\nm\n-\n\n\narea\ncell area\nm\\(^2\\)\n-\n\n\nhead\ngroundwater head\nm\n-\n\n\nconductance\nconductance\nm\\(^2\\) d\\(^{-1}\\)\n-\n\n\n\n\n\nUnconfined aquifer\nThe Table below shows the parameters (fields) of struct UnconfinedAquifer, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.subsurface], to map the internal model parameter to the external netCDF variable. For some input parameters the parameter listed under [input.lateral.subsurface] is not equal to the internal model parameter, these are listed in the Table below between parentheses after the internal model parameter. The top parameter is provided by the external parameter altitude as part of the static input data and set as follows through the TOML file:\n[input]\n# these are not directly part of the model\naltitude = \"wflow_dem\"\nThe input parameter conductivity (listed under [input.lateral.subsurface]) is not equal to the internal model parameter kh_0, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nkh_0 (conductivity)\nhorizontal conductivity\nm d\\(^{-1}\\)s\n-\n\n\nspecific_yield\nspecific yield\nm m\\(^{-1}\\)\n-\n\n\ntop (altitude)\ntop groundwater layer\nm\n-\n\n\nbottom\nbottom groundwater layer\nm\n-\n\n\narea\ncell area\nm\\(^2\\)\n-\n\n\nhead\ngroundwater head\nm\n-\n\n\nconductance\nconductance\nm\\(^2\\) d\\(^{-1}\\)\n-\n\n\nf\nfactor controlling the reduction of reference horizontal conductivity\n-\n3.0\n\n\n\n\n\nConstant Head\nThe Table below shows the parameters (fields) of struct ConstantHead, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.subsurface], to map the internal model parameter to the external netCDF variable. The input parameter constant_head (listed under [input.lateral.subsurface]) is not equal to the internal model parameter head, and is listed in the Table below between parentheses.\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nhead (constant_head)\ngroundwater head\nm\n-\n\n\nindex\nconstant head cell index\n-\n-\n\n\n\n\n\nBoundary conditions\n\nRiver\nThe Table below shows the parameters (fields) of struct River, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.subsurface], to map the internal model parameter to the external netCDF variable. The input parameter river_bottom (listed under [input.lateral.subsurface]) is not equal to the internal model parameter bottom, and is listed in the Table below between parentheses.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nstage\nriver stage\nm\n-\n\n\ninfiltration_conductance\nriver bed infiltration conductance\nm\\(^2\\) day\\(^{-1}\\) m\\(^2\\) day\\(^{-1}\\)\n-\n\n\nexfiltration_conductance\nriver bed exfiltration conductance\nm\\(^2\\) day\\(^{-1}\\)\n-\n\n\nbottom (river_bottom)\nriver bottom elevation\nm\n-\n\n\nindex\nriver cell index\n-\n-\n\n\nflux\nexchange flux (river to aquifer)\nm\\(^3\\) d\\(^{-1}\\)\n-\n\n\n\n\n\nDrainage\nThe Table below shows the parameters (fields) of struct Drainage, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.subsurface], to map the internal model parameter to the external netCDF variable. For some input parameters the parameter listed under [input.lateral.subsurface] is not equal to the internal model parameter, these are listed in the Table below between parentheses after the internal model parameter.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nelevation (drain_elevation)\ndrain elevation\nm\n-\n\n\nconductance (drain_conductance)\ndrain conductance\nm\\(^2\\) day\\(^{-1}\\)\n-\n\n\nindex (drain)\ndrain cell index\n-\n-\n\n\nflux\nexchange flux (drains to aquifer)\nm\\(^3\\) day\\(^{-1}\\)\n-\n\n\n\n\n\nRecharge\nThe Table below shows the parameters (fields) of struct Recharge, including a description of these parameters, the unit, and default value if applicable.\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nrate\nrecharge rate\nm\\(^3\\) day\\(^{-1}\\)\n-\n\n\nindex\nrecharge cell index\n-\n-\n\n\nflux\nrecharge flux\nm\\(^3\\) day\\(^{-1}\\)\n-\n\n\n\n\n\nHead boundary\nThe Table below shows the parameters (fields) of struct HeadBoundary, including a description of these parameters, the unit, and default value if applicable.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nhead\nhead\nm\n-\n\n\nconductance\nconductance of the head boundary\nm\\(^2\\) day\\(^{-1}\\)\n-\n\n\nindex\nhead boundary cell index\n-\n-\n\n\nflux\nconductance of the head boundary\nm\\(^3\\) day\\(^{-1}\\)\n-\n\n\n\n\n\nWell boundary\nThe Table below shows the parameters (fields) of struct Well, including a description of these parameters, the unit, and default value if applicable.\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nvolumetric_rate\nvolumetric well rate\nm\\(^3\\) d\\(^{-1}\\)\n-\n\n\nindex\nwell index\n-\n-\n\n\nflux\nactual well flux\nm\\(^3\\) day\\(^{-1}\\)\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Lateral concepts"
    ]
  },
  {
    "objectID": "model_docs/parameters_lateral.html#sediment",
    "href": "model_docs/parameters_lateral.html#sediment",
    "title": "Lateral concepts",
    "section": "Sediment",
    "text": "Sediment\n\nOverland flow\nThe Table below shows the parameters (fields) of struct OverlandFlowSediment, including a description of these parameters, the unit, and default value if applicable.\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nn\nnumber of cells\n-\n-\n\n\nrivcell\nriver cells\n-\n-\n\n\nsoilloss\ntotal eroded soil\nton Δt\\(^{-1}\\)\n-\n\n\nerosclay\neroded soil for particle class clay\nton Δt\\(^{-1}\\)\n-\n\n\nerossilt\neroded soil for particle class silt\nton Δt\\(^{-1}\\)\n-\n\n\nerossand\neroded soil for particle class sand\nton Δt\\(^{-1}\\)\n-\n\n\nerossagg\neroded soil for particle class small aggregates\nton Δt\\(^{-1}\\)\n-\n\n\neroslagg\neroded soil for particle class large aggregates\nton Δt\\(^{-1}\\)\n-\n\n\nTCsed\ntotal transport capacity of overland flow\nton Δt\\(^{-1}\\)\n-\n\n\nTCclay\ntransport capacity of overland flow for particle class clay\nton Δt\\(^{-1}\\)\n-\n\n\nTCsilt\ntransport capacity of overland flow for particle class silt\nton Δt\\(^{-1}\\)\n-\n\n\nTCsand\ntransport capacity of overland flow for particle class sand\nton Δt\\(^{-1}\\)\n-\n\n\nTCsagg\ntransport capacity of overland flow for particle class small aggregates\nton Δt\\(^{-1}\\)\n-\n\n\nTClagg\ntransport capacity of overland flow for particle class large aggregates\nton Δt\\(^{-1}\\)\n-\n\n\ninlandsed\nsediment reaching the river with overland flow\nton Δt\\(^{-1}\\)\n-\n\n\ninlandclay\nsediment with particle class clay reaching the river with overland flow\nton Δt\\(^{-1}\\)\n-\n\n\ninlandsilt\nsediment with particle class silt reaching the river with overland flow\nton Δt\\(^{-1}\\)\n-\n\n\ninlandsand\nsediment with particle class sand reaching the river with overland flow\nton Δt\\(^{-1}\\)\n-\n\n\ninlandsagg\nsediment with particle class small aggregates reaching the river with overland flow\nton Δt\\(^{-1}\\)\n-\n\n\ninlandlagg\nsediment with particle class large aggregates reaching the river with overland flow\nton Δt\\(^{-1}\\)\n-\n\n\n\n\n\nRiver flow\nThe Table below shows external parameters that can be set through static input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river]. These external parameters are not part of struct RiverSediment, but used to calculate parameters of struct RiverSediment.\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\nreslocs\nreservoir location (outlet)\n-\n-\n\n\nresareas\nreservoir coverage\n-\n-\n\n\nresarea\nreservoir area\n-\nm\\(^2\\)\n\n\nrestrapeff\nreservoir trapping efficiency coefficient\n-\n-\n\n\nlakelocs\nlake location (outlet)\n-\n-\n\n\nlakeareas\nlake coverage\n-\n-\n\n\nlakearea\nlake area\n-\nm\\(^2\\)\n\n\n\nThe Table below shows the parameters (fields) of struct RiverSediment, including a description of these parameters, the unit, and default value if applicable. The parameters in bold represent model parameters that can be set through static and forcing input data (netCDF), and can be listed in the TOML configuration file under [input.lateral.river], to map the internal model parameter to the external netCDF variable. For some input parameters the parameter listed under [input.lateral.river] is not equal to the internal model parameter, these are listed in the Table below between parentheses after the internal model parameter. For example, internal model parameter sl is mapped as follows in the TOML file to the external netCDF variable RiverSlope:\n[input.vertical]\nslope = \"RiverSlope\"\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nUnit\nDefault\n\n\n\n\ndl (length)\nriver length\nm\n-\n\n\nwidth\nriver width\nm\n-\n\n\nsl (slope)\nriver slope\n-\n-\n\n\nrhos (rhosed)\ndensity of sediment\nkg m\\(^{-3}1\\)\n2650.0\n\n\ndmclay\nmedian diameter particle size class clay\nmm\n2.0\n\n\ndmsilt\nmedian diameter particle size class silt\nmm\n10.0\n\n\ndmsand\nmedian diameter particle size class sand\nmm\n200.0\n\n\ndmsagg\nmedian diameter particle size class small aggregates\nmm\n30.0\n\n\ndmlagg\nmedian diameter particle size class large aggregates\nmm\n500.0\n\n\ndmgrav\nmedian diameter particle size class gravel\nmm\n2000.0\n\n\nfclayriv\nfraction of particle class clay\n-\n-\n\n\nfsiltriv\nfraction of particle class silt\n-\n-\n\n\nfsandriv\nfraction of particle class sand\n-\n-\n\n\nfsaggriv\nfraction of particle class small aggregates\n-\n-\n\n\nflaggriv\nfraction of particle class large aggregates\n-\n-\n\n\nfgravriv\nfraction of particle class gravel\n-\n-\n\n\nd50 (d50riv)\nriver sediment median diameter\nmm\n-\n\n\nd50engelund\nriver mean diameter\nmm\n-\n\n\ncbagnold\nBagnold c coefficient\n-\n-\n\n\nebagnold\nBagnold exponent\n-\n-\n\n\nn\nnumber of cells\n-\n-\n\n\ndt\nmodel time step\ns\n-\n\n\nak\nKodatie coefficient a\n-\n-\n\n\nbk\nKodatie coefficient b\n-\n-\n\n\nck\nKodatie coefficient c\n-\n-\n\n\ndk\nKodatie coefficient d\n-\n-\n\n\nkdbank\nbank erodibilty\nm\\(^3\\) N\\(^{-1}\\) s\\(^{-1}\\)\n-\n\n\nkdbed\nbed erodibility\nm\\(^3\\) N\\(^{-1}\\) s\\(^{-1}\\)\n-\n\n\nTCrbank\ncritical bed bank shear stress\nm\\(^3\\) N\\(^{-2}\\)\n-\n\n\nTCrbed\ncritical bed shear stress\nm\\(^3\\) N\\(^{-2}\\)\n-\n\n\nh_riv\nriver water level\nm\n-\n\n\nq_riv\nriver discharge\nm\\(^3\\) s\\(^{-1}\\)\n-\n\n\ninlandclay\nsediment input with particle class clay from land erosion\nt Δt\\(^{-1}\\)\n-\n\n\ninlandsilt\nsediment input with particle class silt from land erosion\nt Δt\\(^{-1}\\)\n-\n\n\ninlandsand\nsediment input with particle class sand from land erosion\nt Δt\\(^{-1}\\)\n-\n\n\ninlandsagg\nsediment input with particle class small aggregates from land erosion\nt Δt\\(^{-1}\\)\n-\n\n\ninlandlagg\nsediment input with particle class large aggregates from land erosion\nt Δt\\(^{-1}\\)\n-\n\n\ninlandsed\nsediment input from land erosion\nt Δt\\(^{-1}\\)\n-\n\n\nsedload\nsediment left in the cell\nt\n-\n\n\nclayload\nsediment with particle class clay left in the cell\nt\n-\n\n\nsiltload\nsediment with particle class silt left in the cell\nt\n-\n\n\nsandload\nsediment with particle class sand left in the cell\nt\n-\n\n\nsaggload\nsediment with particle class small aggregates left in the cell\nt\n-\n\n\nlaggload\nsediment with particle class large aggregates in the cell\nt\n-\n\n\ngravload\nsediment with particle class gravel left in the cell\nt\n-\n\n\nsedstore\nsediment stored on the river bed after deposition\nt Δt\\(^{-1}\\)\n-\n\n\nclaystore\nsediment with particle class clay stored on the river bed after deposition\nt Δt\\(^{-1}\\)\n-\n\n\nsiltstore\nsediment with particle class silt stored on the river bed after deposition\nt Δt\\(^{-1}\\)\n-\n\n\nsandstore\nsediment with particle class sand stored on the river bed after deposition\nt Δt\\(^{-1}\\)\n-\n\n\nsaggstore\nsediment with particle class small aggregates stored on the river bed after deposition\nt Δt\\(^{-1}\\)\n-\n\n\nlaggstore\nsediment with particle class large aggregates stored on the river bed after deposition\nt Δt\\(^{-1}\\)\n-\n\n\ngravstore\nsediment with particle class gravel stored on the river bed after deposition\nt Δt\\(^{-1}\\)\n-\n\n\noutsed\nsediment flux\nt Δt\\(^{-1}\\)\n-\n\n\noutclay\nsediment with particle class clay flux\nt Δt\\(^{-1}\\)\n-\n\n\noutsilt\nsediment with particle class silt\nt Δt\\(^{-1}\\)\n-\n\n\noutsand\nsediment with particle class sand\nt Δt\\(^{-1}\\)\n-\n\n\noutsagg\nsediment with particle class small aggregates\nt Δt\\(^{-1}\\)\n-\n\n\noutlagg\nsediment with particle class large aggregates\nt Δt\\(^{-1}\\)\n-\n\n\noutgrav\nsediment with particle class gravel\nt Δt\\(^{-1}\\)\n-\n\n\nSedconc\ntotal sediment concentration (SSconc + Bedconc)\ng m\\(^{-3}\\)\n-\n\n\nSSconc\nsuspended load concentration\ng m\\(^{-3}\\)\n-\n\n\nBedconc\nbed load concentration\ng m\\(^{-3}\\)\n-\n\n\nmaxsed\nriver transport capacity\nt Δt\\(^{-1}\\)\n-\n\n\nerodsed\ntotal eroded sediment\nt Δt\\(^{-1}\\)\n-\n\n\nerodsedbank\neroded bank sediment\nt Δt\\(^{-1}\\)\n-\n\n\nerodsedbed\neroded bed sediment\nt Δt\\(^{-1}\\)\n-\n\n\ndepsed\ndeposited sediment\nt Δt\\(^{-1}\\)\n-\n\n\ninsed\nsediment input flux\nt Δt\\(^{-1}\\)\n-\n\n\nwbcover\nwaterbody coverage\n-\n-\n\n\nwblocs\nwaterbody locations\n-\n-\n\n\nwbarea\nwaterbody area\nm\\(^2\\)\n-\n\n\nwbtrap\nwaterbody trapping efficiency coefficient\n-\n-",
    "crumbs": [
      "Model documentation",
      "Parameters",
      "Lateral concepts"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html",
    "href": "model_docs/vertical/sbm.html",
    "title": "SBM",
    "section": "",
    "text": "The SBM vertical concept has its roots in the Topog_SBM model but has had considerable changes over time. The main differences are:\n\nThe unsaturated zone can be split-up in different layers\nThe addition of evapotranspiration losses\nThe addition of a capillary rise\n\nThe sections below describe the working of the SBM vertical concept in more detail.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#introduction",
    "href": "model_docs/vertical/sbm.html#introduction",
    "title": "SBM",
    "section": "",
    "text": "The SBM vertical concept has its roots in the Topog_SBM model but has had considerable changes over time. The main differences are:\n\nThe unsaturated zone can be split-up in different layers\nThe addition of evapotranspiration losses\nThe addition of a capillary rise\n\nThe sections below describe the working of the SBM vertical concept in more detail.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#precipitation",
    "href": "model_docs/vertical/sbm.html#precipitation",
    "title": "SBM",
    "section": "Precipitation",
    "text": "Precipitation\nThe division between solid and liquid precipitation (snowfall and rainfall, respectively) is performed based on the air temperature (see the section on snow and glaciers). The amount of rainfall is subject to interception, and ultimately becomes available for evaporation and/or soil processes.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#rainfall-interception",
    "href": "model_docs/vertical/sbm.html#rainfall-interception",
    "title": "SBM",
    "section": "Rainfall interception",
    "text": "Rainfall interception\nTwo different interception models are available: the analytical Gash model, and the modified Rutter model. The simulation timestep defines which interception model is used, where daily (or larger) timesteps use the Gash model, and timesteps smaller than daily use the modified Rutter model.\n\nThe analytical (Gash) model (Gash, 1979)\nThe analytical model of rainfall interception is based on Rutter’s numerical model. Simplifications allow the model to be applied on a daily basis, although a storm-based approach will yield better results in situations with more than one storm per day. The amount of water needed to completely saturate the canopy is defined as:\n\\[\n    P'=\\frac{-\\overline{R}S}{\\overline{E}_{w}}\\log\\left[1-\\frac{\\overline{E}_{w}}{\\overline{R}}(1-p-p_{t})^{-1}\\right]\n\\]\nwhere \\(\\overline{R}\\) is the average precipitation intensity on a saturated canopy and \\(\\overline{E}_{w}\\) the average evaporation from the wet canopy and with the vegetation parameters \\(S\\), \\(p\\) and \\(p_t\\) as defined previously. The model uses a series of expressions to calculate the interception loss during different phases of a storm. An analytical integration of the total evaporation and rainfall under saturated canopy conditions is performed for each storm to determine average values of \\(\\overline{E}_{w}\\) and \\(\\overline{R}\\). The total evaporation from the canopy (the total interception loss) is calculated as the sum of the components listed in the table below. Interception losses from the stems are calculated for days with \\(P\\geq S_{t}/p_{t}\\). \\(p_t\\) and \\(S_t\\) are small and neglected.\n\nFormulation of the components of interception loss according to Gash:\n\n\n\n\n\n\nComponents\nInterception loss\n\n\n\n\nFor \\(m\\) small storms (\\(P_{g}&lt;{P'}_{g}\\))\n\\((1-p-p_{t})\\sum_{j=1}^{m}P_{g,j}\\)\n\n\nWetting up the canopy in \\(n\\) large storms (\\(P_{g}\\geq{P'}_{g}\\))\n\\(n(1-p-p_{t}){P'}_{g}-nS\\)\n\n\nEvaporation from saturated canopy during rainfall\n\\(\\overline{E}/\\overline{R}\\sum_{j=1}^{n}(P_{g,j}-{P'}_{g})\\)\n\n\nEvaporation after rainfall ceases for \\(n\\) large storms\n\\(nS\\)\n\n\nEvaporation from trunks in \\(q\\) storms that fill the trunk storage\n\\(qS_{t}\\)\n\n\nEvaporation from trunks in \\(m+n-q\\) storms that do not fill the trunk storage\n\\(p_{t}\\sum_{j=1}^{m+n-q}P_{g,j}\\)\n\n\n\nIn applying the analytical model, saturated conditions are assumed to occur when the hourly rainfall exceeds a certain threshold. Often a threshold of 0.5 mm/hr is used. \\(\\overline{R}\\) is calculated for all hours when the rainfall exceeds the threshold to give an estimate of the mean rainfall rate onto a saturated canopy.\nGash (1979) has shown that in a regression of interception loss on rainfall (on a storm basis) the regression coefficient should equal to \\(\\overline{E}_w/\\overline{R}\\). Assuming that neither \\(\\overline{E}_w\\) nor \\(\\overline{R}\\) vary considerably in time, \\(\\overline{E}_w\\) can be estimated in this way from \\(\\overline{R}\\) in the absence of above-canopy climatic observations. Values derived in this way generally tend to be (much) higher than those calculated with the penman-monteith equation.\n\n\nThe modified rutter model\nFor sub daily timesteps the interception is calculated using a simplification of the Rutter model. The simplified model is solved explicitly and does not take drainage from the canopy into account. The amount of stemflow is taken as a fraction (0.1 * canopygapfraction) of the precipitation. Throughfall equals to the amount of water that cannot be stored by the canopy, plus the rainfall that is not captured by the canopy. Water can evaporate from the canopy storage, taken as the minimum between potential evaporation and the current storage. The “left-over” potential evaporation (if any) is returned as output.\nWflow.rainfall_interception_modrut\n\n\nInterception parameters from LAI\nThe SBM concept can determine the interception parameters from leaf area index (LAI) climatology. In order to switch this on you must define this cyclic parameter in the TOML file, the parameter is read from path_static, as follows:\n[input]\npath_forcing = \"data/forcing-moselle.nc\"\npath_static = \"data/staticmaps-moselle.nc\"\n\ncyclic = [\"vertical.leaf_area_index\"]\nFurthermore, these additional parameters are required: + Specific leaf storage (sl \\SIb{}{mm}) + Storage woody part of vegetation (swood \\SIb{}{mm}) + Extinction coefficient (kext \\SIb{}{-})\nHere it is assumed that cmax \\SIb{}{mm} (leaves) (canopy storage capacity for the leaves only) relates linearly with LAI (c.f. Van Dijk and Bruijnzeel 2001). This is done via the sl. sl can be determined through a lookup table with land cover based on literature (Pitman 1989, Lui 1998). Next the cmax (leaves) is determined using:\n\\[\n    c_{\\max}(\\mathrm{leaves})  = \\mathrm{sl} \\cdot \\mathrm{LAI}\n\\]\nTo get to total storage (cmax) the woody part of the vegetation also needs to be added. As for sl, the storage of the woody part swood can also be related to land cover (lookup table).\nThe canopy gap fraction is determined using the extinction coefficient kext (van Dijk and Bruijnzeel 2001):\n\\[\n    \\mathrm{canopygapfraction} = \\exp(-\\subtext{k}{ext} \\cdot \\mathrm{LAI})\n\\]\nThe extinction coefficient kext can be related to land cover.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#evaporation",
    "href": "model_docs/vertical/sbm.html#evaporation",
    "title": "SBM",
    "section": "Evaporation",
    "text": "Evaporation\nThe wflow_sbm model assumes the input to be potential reference evapotranspiration. A crop coefficient (kc, set to 1 by default) is used to convert the potential evapotranspiration rate of a reference crop fully covering the soil to the potential evapotranspiration rate of vegetation (natural and agricultural) fully covering the soil. The crop coefficient kc of wflow_sbm is used for a surface completely covered by vegetation, and does not include the effect of growing stages of vegetation and soil cover. These effects are handled separately through the use of the canopy gap fraction.\nIt is assumed that the potential evaporation rate of intercepted water by vegetation is equal to the potential evapotranspiration rate of vegetation (fully covering the soil) multiplied by the canopy fraction. The potential evapotranspiration rate left over after interception is available for transpiration. For potential open water evaporation (river and water bodies) the potential reference evapotranspiration rate is used (multipled by the river fraction riverfrac, and open water fraction waterfrac). Also for potential soil evaporation the potential reference evapotranspiration rate is used, multiplied by the canopy gap fraction corrected by the sum of total water fraction (riverfrac and waterfrac) and the fraction covered by a glacier (glacierfrac).\n\nBare soil evaporation\nIf there is only one soil layer present in the wflow_sbm model, the bare soil evaporation is scaled according to the wetness of the soil layer. The fraction of bare soil is assumed to be equal to the fraction not covered by the canopy (canopygapfraction) corrected by the total water fraction. When the soil is fully saturated, evaporation is set to equal the potential reference evaporation. When the soil is not fully saturated, actual evaporation decreases linearly with decreasing soil moisture values, as indicated by the figure below.\n\n\n\nEvaporation reduction as function of available soil moisture\n\n\n\nWhen more soil layers are present, soil evaporation is only provided from the upper soil layer, and soil evaporation is split in evaporation from the unsaturated store and evaporation from the saturated store. Water is first evaporated from the unsaturated store. The remaining potential soil evaporation can be used for evaporation from the saturated store, but only when the water table is present in the upper soil layer. Both the evaporation from the unsaturated store and the evaporation from the saturated store are limited by the minimum of the remaining potential soil evaporation and the available water in the unsaturated/saturated zone of the upper soil layer. Also for multiple soil layers, the evaporation (both unsaturated and saturated) decreases linearly with decreasing water availability.\n\n\nTranspiration\nThe maximum possible root water extraction rate for each soil layer is determined by partitioning the potential transpiration rate T_p based on the fraction of the total root length (rootfraction \\SIb{}{-}) in each soil layer. A root water uptake reduction model is used to calculate a reduction coefficient as a function of soil water pressure, that may reduce the maximum possible root water extraction rate. The root water uptake reduction model is based on the concept proposed by Feddes et al. (1978). This concept defines a reduction coefficient \\SIb{\\alpha}{-} as a function of soil water pressure (\\SIb{h}{cm}). Four different levels of h are defined: h1, h2, h3 and h4. h1 represents anoxic moisture conditions, h2 represents field capacity, h3 represents the point of critical soil moisture content (onset of drought stress), and h4 represents the wilting point. The value of h3 is a function of the potential transpiration rate, between \\SIb{1}{mm d^{-1}} and \\SIb{5}{mm d^{-1}}. If T_p \\le \\SIb{1}{mm d^{-1}}, h3 is set equal to h3_low (input model parameter). If T_p \\ge \\SIb{5}{mm d^{-1}}, h3 is set equal to h3_high (input model parameter). For T_p values between \\SIb{1}{mm d^{-1}} and \\SIb{5}{mm d^{-1}}, the value of h3 is linearly related to T_p (between h3_low and h3_high). Besides model parameters h3_high and h3_low, the critical pressure heads h1, h2 and h4 can be defined as input to the model.\nThe current soil water pressure is determined following the concept defined by Brooks and Corey (1964):\n\\[\n    \\frac{\\theta-\\theta_r}{\\theta_s-\\theta_r} =  \\min\\left\\{1, \\left(\\frac{h_b}{h}\\right)^\\lambda\\right\\}\n\\]\nwhere \\(\\SIb{h}{cm}\\) is the pressure head, \\(\\SIb{h_b}{cm}\\) is the air entry pressure head, and \\(\\theta\\), \\(\\theta_s\\), \\(\\theta_r\\) and \\(\\lambda\\) as previously defined.\nWhenever the current soil water pressure drops below h4, the root water uptake is set to zero. The root water uptake is at ideal conditions whenever the soil water pressure is above h3, with a linear transition between h3 and h4. The assumption that very wet conditions do not affect root water uptake too much is probably generally applicable to natural vegetation. For crops this assumption is not valid and in this case root water uptake above h1 should be set to zero (oxygen deficit) and between h1 and h2 root water uptake is limited. This is possible by setting the input model parameter alpha_h1 at 0 (default is 1).\n\n\n\nRoot water uptake reduction coefficient as a function of soil water pressure\n\n\n\nThe maximum allowed root water extraction from each soil layer in the unsaturated zone is determined based on the fraction of each soil layer in the unsaturated zone that is above the rooting depth (availcap) and the unsaturated storage usld, see conceptual figure below. This is implemented using the following code (i refers to the index of the vector that contains all active cells within the spatial model domain and k refers to the soil layer (from top to bottom) in the unsaturated zone):\n  # availcap is fraction of soil layer containing roots\n  # if `ust` is `true`, the whole unsaturated store is available for transpiration\n  if ust\n      availcap = usld[k] * 0.99\n  else\n      availcap =\n          min(1.0, max(0.0, (sbm.rootingdepth[i] - sbm.sumlayers[i][k]) / usl[k]))\n  end\n  maxextr = usld[k] * availcap\n\n\n\nConceptual overview of how maxextr depends on rooting depth and water table depth\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen whole_ust_available is set to true in the TOML file, almost the complete unsaturated storage (99%) is available for transpiration, independent of the rootingdepth.\n[model]\nwhole_ust_available = true\n\n\nThe computation of transpiration from the saturated store depends on the water table depth, rooting depth, the reduction coefficient \\(\\alpha\\), the fraction of wet roots and the rootfraction below the water table. The fraction of wet roots is determined using a sigmoid fuction (see figure below). The parameter rootdistpar defines the sharpness of the transition between fully wet and fully dry roots. If the water table depth is equal to or lower than the rooting depth, the remaining potential transpiration is used based on the potential transpiration and actual transpiration in the unsaturated zone. The remaining potential transpiration is multiplied by the wet roots fraction and the reduction coefficient (and limited by the available water in saturated zone) to get the transpiration from the saturated part of the soil. If the water table depth intersects the rooting depth, the potential transpiration is multiplied by the remaining rootfraction (below the water table), wet roots fraction and the reduction coefficient (and limited by the available water in saturated zone) to get the transpiration from the saturated part of the soil. This is implemented using the following code (i refers to the index of the vector that contains all active cells within the spatial model domain):\n# transpiration from saturated store\nwetroots = scurve(sbm.zi[i], sbm.rootingdepth[i], Float(1.0), sbm.rootdistpar[i])\nalpha = rwu_reduction_feddes(\n    Float(0.0),\n    sbm.h1[i],\n    sbm.h2[i],\n    sbm.h3[i],\n    sbm.h4[i],\n    sbm.alpha_h1[i],\n)\n# include remaining root fraction if rooting depth is below water table zi\nif sbm.zi[i] &gt;= sbm.rootingdepth[i]\n    f_roots = wetroots\n    restevap = sbm.pottrans[i] - actevapustore\nelse\n    f_roots = wetroots * (1.0 - rootfraction_unsat)\n    restevap = sbm.pottrans[i]\nend\nactevapsat = min(restevap * f_roots * alpha, satwaterdepth)\nsatwaterdepth = satwaterdepth - actevapsat\n\n\n\nAmount of wet roots and the effect of the rootdistpar parameter",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#snow-and-glaciers",
    "href": "model_docs/vertical/sbm.html#snow-and-glaciers",
    "title": "SBM",
    "section": "Snow and glaciers",
    "text": "Snow and glaciers\nThe snow and glacier model is described in Snow and glaciers. Both options can be enabled by specifying the following in the TOML file:\n[model]\nsnow = true\nglacier = true",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#soil-processes",
    "href": "model_docs/vertical/sbm.html#soil-processes",
    "title": "SBM",
    "section": "Soil processes",
    "text": "Soil processes\n\nThe SBM soil water accounting scheme\nA detailed description of the Topog_SBM model has been given by Vertessy (1999). Briefly: the soil is considered as a bucket with a certain depth (\\(\\SIb{z_t}{mm}\\)), divided into a saturated store (\\(\\SIb{S}{mm}\\)) and an unsaturated store (\\(\\SIb{U}{mm}\\)). The top of the \\(S\\) store forms a pseudo-water table at depth \\(\\SIb{z_{i}}{mm}\\) such that the value of \\(S\\) at any time is given by:\n\\[\n    S=(z_t-z_i)(\\theta_s-\\theta_r)\n\\]\nwhere \\(\\SIb{\\theta_{s}}{-}\\) and \\(\\SIb{\\theta_{r}}{-}\\) are the saturated and residual soil water contents, respectively.\nThe unsaturated store \\(U\\) is subdivided into storage (\\(\\SIb{U_s}{mm}\\)) and deficit (\\(\\SIb{U_d}{m}\\)):\n\\[\n    U_d=(\\theta_s-\\theta_r)z_i-U\\\\\n    U_s=U-U_d\n\\]\nThe saturation deficit (\\(\\SIb{S_d}{mm}\\)) for the soil profile as a whole is defined as:\n\\[\n    S_d=(\\theta_s-\\theta_r)z_t-S\n\\]\nAll infiltrating water that enters the \\(U\\) store first. The unsaturated layer can be split-up in different layers, by providing the thickness \\(\\SIb{}{mm}\\) of the layers in the TOML file. The following example specifies three layers (from top to bottom) of 100, 300 and 800 mm:\n[model]\nthicknesslayers = [100, 300, 800]\nThe code checks for each grid cell the specified layers against the soilthickness \\(\\SIb{}{mm}\\), and adds or removes (partly) layer(s) based on the soilthickness.\nAssuming a unit head gradient, the transfer of water (\\(\\SIb{\\mathrm{st}}{mm t^{-1}}\\)) from a \\(\\SIb{U}{mm}\\) store layer is controlled by the saturated hydraulic conductivity \\(\\SIb{\\subtext{K}{sat}}{mm t^{-1}}\\) at depth \\(\\SIb{z}{mm}\\) (bottom layer) or \\(\\SIb{z_i}{mm}\\), the effective saturation degree of the layer, and a Brooks-Corey power coefficient (parameter \\(c\\)) based on the pore size distribution index \\(\\lambda\\) (Brooks and Corey, 1964):\n\\[\n\\begin{gathered}\n    \\mathrm{st}=\\subtext{K}{sat}\\left(\\frac{\\theta-\\theta_r}{\\theta_s-\\theta_r}\\right)^c\\\\\n    c=\\frac{2+3\\lambda}{\\lambda}\n\\end{gathered}\n\\]\nHere \\(\\SIb{}{mm t^{-1}}\\) denotes milimeter per time step.\nWhen the unsaturated layer is not split-up into different layers, it is possible to use the original Topog\\_SBM vertical transfer formulation, by specifying in the TOML file:\n[model]\ntransfermethod = true\nThe transfer of water from the \\(\\SIb{U}{mm}\\) store to the \\(\\SIb{S}{mm}\\) store (\\(\\SIb{st}{mm\nt^{-1}}\\)) is in that case controlled by the saturated hydraulic conductivity \\(\\SIb{\\subtext{K}{sat}}{mm s^{-1}}\\) at depth \\(\\SIb{z_i}{mm}\\) and the ratio between \\(\\SIb{U}{mm}\\) and \\(\\SIb{S_d}{mm}\\):\n\\[\n    \\mathrm{st}=\\subtext{K}{sat}\\frac{U_s}{S_d}\n\\]\nFour different saturated hydraulic conductivity depth profiles (ksat_profile) are available and a ksat_profile can be specified in the TOML file as follows:\n[input.vertical]\nksat_profile = \"exponential_constant\" # optional, one of (\"exponential\", \"exponential_constant\", \"layered\", \"layered_exponential\"), default is \"exponential\"\nSoil measurements are often available for about the upper \\(\\SI{1.5-2}{m}\\) of the soil column to estimate the saturated hydraulic conductivity, while these measurements are often lacking for soil depths beyond \\(\\SI{1.5-2}{m}\\). These different profiles allow to extent the saturated hydraulic conductivity profile based on measurements (either an exponential fit or hydraulic conductivity value per soil layer) with an exponential or constant profile. By default, with ksat_profile “exponential”, the saturated hydraulic conductivity \\(\\SIb{\\subtext{K}{sat}}{mm\nt^{-1}}\\) declines with soil depth \\(\\SIb{z}{mm}\\) in the model according to:\n\\[\n    \\subtext{K}{sat} = K_0 e^{-fz},\n\\]\nwhere \\(\\SIb{K_0}{mm s^{-1}}\\) is the saturated hydraulic conductivity at the soil surface and \\(\\SIb{f}{mm^{-1}}\\) is a scaling parameter.\nThe plot below shows the relation between soil depth \\(z\\) and saturated hydraulic conductivity \\(\\subtext{K}{sat}\\) for different values of \\(f\\).\n\n\nCode\nusing Printf\nusing CairoMakie\n\nlet\n    fig = Figure(resolution=(800, 400))\n    ax = Axis(fig[1, 1], xlabel=L\"K_\\mathrm{sat}\\;[\\mathrm{mm/day}]\", ylabel=L\"-z\\;[\\mathrm{mm}]\")\n\n    z = 0:5.0:1000\n    ksat = 100.0\n    f = 0.6 ./ collect(50:150.0:800)\n\n    for fi in f\n        lines!(ax, ksat .* exp.(-fi .* z), -z, label=@sprintf(\"%.2e\", fi))\n    end\n\n    Legend(fig[1, 2], ax, L\"f\")\n    fig\nend\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie ~/.julia/packages/Makie/Q6F2P/src/scenes.jl:238\n\n\n\n\n\n\n\n\n\nWith ksat_profile “exponential_constant”, \\(\\subtext{K}{sat}\\) declines exponentially with soil depth \\(\\SIb{z}{mm}\\) until \\(\\SIb{\\subtext{z}{mm}}{mm}\\) below the soil surface, and stays constant at and beyond soil depth \\(\\subtext{z}{exp}\\):\n\\[\n    \\subtext{K}{sat} = \\begin{cases}\n    K_0e^{-fz} & \\text{if $z &lt; \\subtext{z}{exp}$}\\\\\n    K_0e^{-f\\subtext{z}{exp}} & \\text{if $z \\ge \\subtext{z}{exp}$}.\n    \\end{cases}\n\\]\nIt is also possible to provide a \\(\\subtext{K}{sat}\\) value per soil layer by specifying ksat_profile “layered”, these \\(\\subtext{K}{sat}\\) values are used directly to compute the vertical transfer of water between soil layers and to the saturated store \\(S\\). Finally, with the ksat_profile “layered_exponential” a \\(\\subtext{K}{sat}\\) value per soil layer is used until depth \\(\\subtext{z}{layered}\\) below the soil surface, and beyond \\(\\subtext{z}{layered}\\) an exponential decline of \\(\\subtext{K}{sat}\\) (of the soil layer with bottom \\(\\subtext{z}{layered}\\)) controlled by \\(f\\) occurs. The different available ksat_profle options are schematized in the figure below where the blue line represents the \\(\\subtext{K}{sat}\\) value.\n\n\n\nOverview of available ksat_profile options, for a soil column with five layers\n\n\n\n\nInfiltration\nThe water available for infiltration is taken as the rainfall including meltwater. Infiltration is determined separately for the compacted and non-compacted areas, as these have different infiltration capacities. Naturally, only the water that can be stored in the soil can infiltrate. If not all water can infiltrate, this is added as excess water to the runoff routing scheme.\nThe infiltrating water is split in two parts, the part that falls on compacted areas and the part that falls on non-compacted areas. The maximum amount of water that can infiltrate in these areas is calculated by taking the minimum of the maximum infiltration rate (infiltcapsoil \\(\\SIb{}{mm t^{-1}}\\) for non-compacted areas and infiltcappath \\(\\SIb{}{mm\nt^{-1}}\\) for compacted areas) and the amount of water available for infiltration avail_forinfilt \\(\\SIb{}{mm t^{-1}}\\). The water that can actually infiltrate infiltsoilpath \\(\\SIb{}{mm t^{-1}}\\) is calculated by taking the minimum of the total maximum infiltration rate (compacted and non-compacted areas) and the remaining storage capacity.\nInfiltration excess occurs when the infiltration capacity is smaller then the throughfall and stemflow rate. This amount of water (infiltexcess \\(\\SIb{}{mm t^{-1}}\\)) becomes overland flow (infiltration excess overland flow). Saturation excess occurs when the (upper) soil becomes saturated and water cannot infiltrate anymore. This amount of water excesswater \\(\\SIb{}{mm\nt^{-1}}\\) becomes overland flow (saturation excess overland flow).\n\nInfiltration in frozen soils\nIf snow processes are modelled, the infiltration capacity is reduced when the soil is frozen (or near freezing point). A infiltration correction factor is defined as a S-curve with the shape as defined below. A parameter (cf_soil) defines the base factor of infiltration when the soil is frozen. The soil temperature is calculated based on the soil temperature on the previous timestep, and the temperature difference between air and soil temperature weighted with a factor (w_soil, which defaults to 0.1125).\nThe near surface soil temperature is modelled using a simple equation (Wigmosta et al., 2009):\n\\[\nT_s^t = T_s^{t-1} + w  (T_a - T_s^{t-1})\n\\] where \\(\\SIb{T_s^{t}}{\\degree C}\\) is the near-surface soil temperature at time \\(t\\), \\(\\SIb{T_a}{\\degree C}\\) is air temperature and \\(\\SIb{w}{-}\\) is a weighting coefficient determined through calibration (default is 0.1125 for daily timesteps).\nA reduction factor (cf_soil \\(\\SIb{}{-}\\), default is 0.038) is applied to the maximum infiltration rate (infiltcapsoil and infiltcappath), when the following model settings are specified in the TOML file:\n[model]\nsoilinfreduction = true\nsnow = true\nIf soilinfreduction is set to false, water is allowed to infiltrate the soil, even if the soil is frozen.\nA S-curve (see plot below) is used to make a smooth transition (a c-factor (\\(c\\)) of 8.0 is used):\n\\[\n\\begin{gathered}\n    b = \\frac{1.0}{1.0 - \\subtext{\\mathrm{cf}}{soil}}\\\\\n    \\mathrm{soilinfredu} = \\frac{1.0}{b + \\exp(-c (T_s - a))} + \\subtext{\\mathrm{cf}}{soil}\\\\\n    a = 0.0\\\\\n    c = 8.0\n\\end{gathered}\n\\]\n\n\n\nInfiltration correction factor as a function of soil temperature\n\n\n\n\n\n\nCapillary rise\nThe actual capillary rise actcapflux \\(\\SIb{}{mm t^{-1}}\\) is determined using the following approach: first the saturated hydraulic conductivity ksat \\(\\SIb{}{mm t^{-1}}\\) is determined at the water table \\(z_i\\); next a potential capillary rise maxcapflux \\(\\SIb{}{mm t^{-1}}\\) is determined from the minimum of ksat, actual transpiration actevapustore \\(\\SIb{}{mm t^{-1}}\\) taken from the \\(U\\) store, available water in the \\(S\\) store (satwaterdepth \\(\\SIb{}{mm}\\)) and the deficit of the \\(U\\) store (ustorecapacity \\(\\SIb{}{mm}\\)), as shown by the following code block:\nmaxcapflux = max(0.0, min(ksat, actevapustore, ustorecapacity, satwaterdepth))\nThen the potential rise maxcapflux is scaled using the water table depth zi, a maximum water depth cap_hmax \\(\\SIb{}{mm}\\) beyond which capillary rise ceases and a coefficient cap_n \\(\\SIb{}{-}\\), as follows in the code block below (i refers to the index of the vector that contains all active cells within the spatial model domain):\nif sbm.zi[i] &gt; rootingdepth\n    capflux =\n        maxcapflux * pow(\n            1.0 - min(sbm.zi[i], sbm.cap_hmax[i]) / (sbm.cap_hmax[i]),\n            sbm.cap_n[i],\n        )\nelse\n    capflux = 0.0\nend\nIf the roots reach the water table (rootingdepth \\(\\ge\\) sbm.zi), capflux is set to zero.\nFinally, the capillary rise capflux is limited by the unsaturated store deficit (one or multiple layers), calculated as follows in the code block below (i refers to the index of the vector that contains all active cells within the spatial model domain, and k refers to the layer position):\nusl[k] * (sbm.theta_s[i] - sbm.theta_r[i]) - usld[k]\nwhere usl \\(\\SIb{}{mm}\\) is the unsaturated layer thickness, usld is the ustorelayerdepth \\(\\SIb{}{mm}\\) (amount of water in the unsaturated layer), and \\(\\theta_s\\) and \\(\\theta_r\\) as previously defined.\nThe calculation of the actual capillary rise actcapflux is as follows in the code block below (i refers to the index of the vector that contains all active cells within the spatial model domain, and k refers to the layer position):\nactcapflux = 0.0\nnetcapflux = capflux\nfor k = n_usl:-1:1\n    toadd =\n        min(netcapflux, max(usl[k] * (sbm.theta_s[i] - sbm.theta_r[i]) - usld[k], 0.0))\n    usld = setindex(usld, usld[k] + toadd, k)\n    netcapflux = netcapflux - toadd\n    actcapflux = actcapflux + toadd\nend\nIn case of multiple unsaturated layers (n_usl \\(&gt;\\) 1), the calculation of the actual capillary rise starts at the lowest unsaturated layer while keeping track of the remaining capillary rise netcapflux \\(\\SIb{}{mm t^{-1}}\\).\n\n\nLeakage\nIf the maxleakage \\(\\SIb{}{mm day^{-1}}\\) input model parameter is set &gt; 0, water is lost from the saturated zone and runs out of the model.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#open-water",
    "href": "model_docs/vertical/sbm.html#open-water",
    "title": "SBM",
    "section": "Open water",
    "text": "Open water\nPart of the water available for infiltration is diverted to the open water, based on the fractions of river and lakes of each grid cell. The amount of evaporation from open water is assumed to be equal to potential evaporation (if sufficient water is available).",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#non-irrigation",
    "href": "model_docs/vertical/sbm.html#non-irrigation",
    "title": "SBM",
    "section": "Non-irrigation",
    "text": "Non-irrigation\nNon-irrigation water demand and allocation computations are supported for the sectors domestic, industry and livestock. These computations can be enabled by specifying the following in the TOML file:\n[model.water_demand]\ndomestic = true\nindustry = true\nlivestock = true\nFor these non-irrigation sectors the gross demand (\\(d_\\mathrm{gross}\\) \\(\\SIb{}{mm t^{-1}}\\)) and net demand (\\(d_\\mathrm{net}\\) \\(\\SIb{}{mm t^{-1}}\\)) are provided to the model (input through cyclic or forcing data). Gross demand represents the total demand and hence the total abstraction from surface water or groundwater when sufficient water is available. Net demand represents water consumption. The portion of total abstracted water that is not consumed is returned as surface water. The return flow fraction (\\(f_\\mathrm{return}\\) [-]) is calculated as follows:\n\\[\n    \\subtext{f}{return} = 1.0 - \\frac{\\subtext{d}{net}}{\\subtext{d}{gross}},\n\\] and used to calculate the return flow rate (water abstracted from surface water or groundwater but not consumed). For grid cells containing a river the return flow is directly returned to the river routing component, otherwise the return flow is returned to the overland flow routing component.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#non-paddy-irrigation",
    "href": "model_docs/vertical/sbm.html#non-paddy-irrigation",
    "title": "SBM",
    "section": "Non-paddy irrigation",
    "text": "Non-paddy irrigation\nNon-paddy (other crops than flooded rice) water demand and allocation computations are supported. These computations can be enabled by specifying the following in the TOML file:\n[model.water_demand]\nnonpaddy = true\nIrrigation is applied during the growing season (when input parameter irrigation_trigger \\(\\SIb{}{-}\\) is true (or on)) and when water depletion exceeds the readily available water:\n\\[\n    (\\subtext{U}{field} - \\subtext{U}{a}) \\ge (\\subtext{U}{field} - \\subtext{U}{h3})\n\\] where \\(\\SIb{\\subtext{U}{field}}{mm}\\) is the unsaturated store in the root zone at field capacity (defined at a soil water pressure head of \\(\\SI{-100}{cm}\\)), \\(\\SIb{\\subtext{U}{a}}{mm}\\) is the actual unsaturated store in the root zone and \\(\\SIb{\\subtext{U}{h3}}{mm}\\) is the unsaturated store in the root zone at the critical soil water pressure head h3, below this pressure head reduction of root water uptake starts due to drought stress. The net irrigation demand \\(\\SIb{}{mm t^{-1}}\\) is the irrigation rate that brings the root zone back to field capacity, limited by the soil infiltration capacity \\(\\SIb{}{mm t^{-1}}\\), assuming that farmers do not apply an irrigation rate higher than the soil infiltration capacity. To account for limited irrigation efficiency the net irrigation demand is divided by the irrigation efficiency for non-paddy crops (irrigation_efficiency \\(\\SIb{}{-}\\), default is \\(1.0\\)), resulting in gross irrigation demand \\(\\SIb{}{mm t^{-1}}\\). Finally, the gross irrigation demand is limited by the maximum irrigation rate (maximum_irrigation_rate \\(\\SIb{}{mm t^{-1}}\\), default is \\(\\SI{25}{mm\\;day-1}\\)). If the maximum irrigation rate is applied, irrigation continues at subsequent time steps until field capacity is reached. Irrigation is added to the SBM variable avail_forinfilt \\(\\SIb{}{mm t^{-1}}\\), the amount of water available for infiltration.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#paddy-irrigation",
    "href": "model_docs/vertical/sbm.html#paddy-irrigation",
    "title": "SBM",
    "section": "Paddy irrigation",
    "text": "Paddy irrigation\nPaddy (flooded rice) water demand and allocation computations are supported. These computations can be enabled by specifying the following in the TOML file:\n[model.water_demand]\npaddy = true\nIrrigation is applied during the growing season (when input parameter irrigation_trigger \\(\\SIb{}{-}\\) is true (or on)) and when the paddy water depth h \\(\\SIb{}{mm}\\) reaches below the minimum water depth h_min \\(\\SIb{}{mm}\\) (see also the figure below). The net irrigation demand [mm t\\(^{-1}\\)] is the irrigation rate required to reach the optimal paddy water depth h_opt \\(\\SIb{}{mm}\\), an approach similar to Xie and Cui (2011). To account for limited irrigation efficiency the net irrigation demand is divided by the irrigation efficiency for paddy fields (irrigation_efficiency \\(\\SIb{}{-}\\), default is 1.0), resulting in gross irrigation demand \\(\\SIb{}{mm t^{-1}}\\). Finally, the gross irrigation demand is limited by the maximum irrigation rate (maximum_irrigation_rate \\(\\SIb{}{mm t^{-1}}\\), default is \\(\\SIb{25}{mm\nd^{-1}}\\)). If the maximum irrigation rate is applied, irrigation continues at subsequent time steps until the optimal paddy water depth h_opt is reached. Irrigation is added to the SBM variable avail_forinfilt \\(\\SIb{}{mm t^{-1}}\\), the amount of water available for infiltration. When the paddy water depth h exceeds h_max \\(\\SIb{}{mm}\\) runoff occurs, and this amount is added to the runoff routing scheme for overland flow. The figure below shows a typical vertical soil profile of a puddled rice soil with a muddy layer of about 15 cm (in this case represented by two soil layers of 5 cm and 10 cm thickness), a plow soil layer of 5 cm with relative low permeability (vertical hydraulic conductivity \\(k_v\\) of about \\(\\SI{5}{mm d^{-1}}\\)), and a non-puddled soil below the plow soil layer. The low vertical hydraulic conductivity of the plow soil layer can be realized by making use of the parameter kvfrac \\(\\SIb{}{-}\\), a multiplication factor applied to the vertical hydraulic conductivity at soil depth \\(\\SIb{z}{mm}\\).\n\n\n\npaddy_profile\n\n\nSchematic diagram of a paddy field with water balance components and soil profile",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#water-withdrawal-and-allocation",
    "href": "model_docs/vertical/sbm.html#water-withdrawal-and-allocation",
    "title": "SBM",
    "section": "Water withdrawal and allocation",
    "text": "Water withdrawal and allocation\nFor the water withdrawal the total gross demand is computed (sum over the irrigation and non-irrigation water demand sectors), in case sufficient water is available the water withdrawal is equal to the total gross demand. In case of insufficient water availability, the water withdrawal is scaled down to the available water, and allocation is then proportional to the gross demand per sector (industry, domestic, livestock and irrigation). Water can be abstracted from the following sources:\n\nsurface water from rivers (max 80% of total available water)\nreservoirs and lakes (max 98% of total available water)\ngroundwater (max 75% of total available water)\n\nThe model parameter frac_sw_used (fraction surface water used, default is 1.0) determines how much water is supplied by available surface water and groundwater.\n\nLocal\nFirst, surface water abstraction (excluding reservoir and lake locations) is computed to satisfy local (same grid cell) water demand. The available surface water volume is limited by a fixed scaling factor of \\(0.8\\) to prevent rivers from completely drying out. It is assumed that the water demand cannot be satisfied completely from local surface water and groundwater. The next step is to satisfy the remaining water demand for allocation areas \\(\\SIb{}{-}\\), described in the next sub-section.\n\n\nAllocation areas\nFor allocation areas the water demand \\(\\SIb{\\subtext{V}{sw, demand}}{m^3}\\) and availability \\(\\SIb{\\subtext{V}{sw, availabilty}}{m^3}\\) are summed (including reservoir and lake locations limited by a fixed scaling factor of \\(0.98\\)), and the total surface water abstraction is then:\n\\[\n    \\subtext{V}{sw, abstraction} = \\min (\\subtext{V}{sw, demand}, \\subtext{V}{sw, availabilty})\n\\] The fraction of available surface water that can be abstracted \\(\\SIb{\\subtext{f}{sw,abstraction}}{-}\\) at the allocation area level is then:\n\\[\n    \\subtext{f}{sw, abstraction} = \\frac{\\subtext{V}{sw, abstraction}}{\\subtext{V}{sw, available}}\n\\] This fraction is applied to the remaining available surface water of each river cell (including lake and reservoir locations) to compute surface water abstraction at each river cell and to update the local surface water abstraction.\nThe fraction of water demand that can be satisfied by available surface water \\(\\SIb{\\subtext{f}{sw, allocation}}{-}\\) at the allocation area level is then:\n\\[\n    \\subtext{f}{sw, allocation} = \\frac{\\subtext{V}{sw, abstraction}}{\\subtext{V}{sw, demand}}\n\\] This fraction is applied to the remaining surface water demand of each land cell to compute the allocated surface water to each land cell.\nThen groundwater abstraction is computed to satisfy the remaining local water demand, where groundwater abstraction is limited by a fixed scaling factor of \\(0.75\\) applied to the groundwater volume. Finally, for allocation areas the water demand \\(\\SIb{\\subtext{V}{gw,demand}}{m^3}\\) and availability \\(\\SIb{\\subtext{V}{gw, availabilty}}{m^3}\\) are summed, and the total groundwater abstraction is then:\n\\[\n    \\subtext{V}{gw, abstraction} = \\min(\\subtext{V}{gw, demand}, \\subtext{V}{gw, availabilty})\n\\] The fraction of available groundwater that can be abstracted at allocation area level \\(\\SIb{\\subtext{f}{gw, abstraction}}{-}\\) at the allocation area level is then:\n\\[\n    \\subtext{f}{gw, abstraction} = \\frac{\\subtext{V}{gw, abstraction}}{\\subtext{V}{gw, available}}\n\\] This fraction is applied to the remaining available groundwater of each land cell to compute groundwater abstraction and to update the local groundwater abstraction.\nThe fraction of water demand that can be satisfied by available groundwater \\(\\SIb{\\subtext{f}{gw,allocation}}{-}\\) at the allocation area level is then:\n\\[\n    \\subtext{f}{gw, allocation} = \\frac{\\subtext{V}{gw, abstraction}}{\\subtext{V}{gw, demand}}\n\\] This fraction is applied to the remaining groundwater demand of each land cell to compute the allocated groundwater to each land cell.\n\n\nAbstractions\nGroundwater abstraction is implemented by subtracting this amount from the recharge variable of the lateral subsurface flow component (kinematic wave) or the recharge rate of the groundwater flow module. Surface water abstraction \\(\\SIb{}{m^3 s^{-1}}\\) is divided by the flow length dl \\(\\SIb{}{m}\\) and subtracted from the lateral inflow of kinematic wave routing scheme for river flow. For the local inertial routing scheme (river and optional floodplain routing), the surface water abstraction \\(\\SIb{}{m^3 s^{-1}}\\) is subtracted as part of the continuity equation of the local inertial model. For reservoir and lake locations surface water is abstracted (act_surfacewater_abst_vol \\(\\SIb{}{m^3 s^{-1}}\\)) from the reservoir volume \\(\\SIb{}{m^3}\\) and lake storage \\(\\SIb{}{m^3}\\) respectively, with a subsequent update of the lake waterlevel \\(\\SIb{}{m}\\).",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/sbm.html#references",
    "href": "model_docs/vertical/sbm.html#references",
    "title": "SBM",
    "section": "References",
    "text": "References\n\nBrooks, R. H., and Corey, A. T., 1964, Hydraulic properties of porous media, Hydrology Papers 3, Colorado State University, Fort Collins, 27 p.\nFeddes, R.A., Kowalik, P.J. and Zaradny, H., 1978, Simulation of field water use and crop yield, Pudoc, Wageningen, Simulation Monographs.\nGash, J. H. C., 1979, An analytical model of rainfall interception by forests, Q. J. Roy. Meteor. Soc., 105, 43–55, doi:1026 10.1002/qj.497105443041027.\nLiu, S., 1998, Estimation of rainfall storage capacity in the canopies of cypress wetlands and slash pine uplands in North-Central Florida, J. Hydr., 207, 32–41, doi: 10.1016/S0022-1694(98)00115-2.\nPitman, J., 1989, Rainfall interception by bracken in open habitats—relations between leaf area, canopy storage and drainage rate, J. Hydr. 105, 317–334, doi: 10.1016/0022-1694(89)90111-X.\nVan Dijk, A. I. J. M., and Bruijnzeel, L. A., 2001, Modelling rainfall interception by vegetation of variable density using an adapted analytical model, Part 2, Model validation for a tropical upland mixed cropping system, J. Hydr., 247, 239–262.\nVertessy, R., and Elsenbeer, H., 1999, Distributed modeling of storm ﬂow generation in an amazonian rain forest catchment: effects of model parameterization, Water Resour. Res., 35, 2173–2187. doi: 10.1029/1999WR9000511257.\nWigmosta, M. S., Lane, L. J., Tagestad, J. D., and Coleman A. M., 2009, Hydrologic and erosion models to assess land use and management practices affecting soil erosion, J. Hydrol. Eng., 14, 27-41.\nXie, X. and Cui, Y., 2011, Development and test of SWAT for modeling hydrological processes in irrigation districts with paddy rice, J. Hydrol., 396, pp. 61-71.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "SBM"
    ]
  },
  {
    "objectID": "model_docs/vertical/shared_processes.html",
    "href": "model_docs/vertical/shared_processes.html",
    "title": "Shared processes",
    "section": "",
    "text": "If the air temperature, \\(T_a\\), is below a user-defined threshold tt \\(\\SIb{}{\\degree C}\\) precipitation occurs as snowfall, whereas it occurs as rainfall if \\(T_a ≥ \\mathrm{tt}\\). Another parameter tti defines how precipitation can occur partly as rain or snowfall.\n\n\n\nDivision between snow and precipitation based on the threshold temperature\n\n\n\nIf precipitation occurs as snowfall, it is added to the dry snow component within the snow pack. Otherwise it ends up in the free water reservoir, which represents the liquid water content of the snow pack. Between the two components of the snow pack, interactions take place, either through snow melt (if temperatures are above a threshold ttm) or through snow refreezing (if temperatures are below threshold ttm).\nThe respective rates of snow melt and refreezing are:\n\\[\n\\begin{align*}\n    Q_m &=& \\subtext{\\mathrm{cf}}{max}(T_a−\\mathrm{ttm})\\, &&T_a &gt; \\mathrm{ttm} \\\\\n    Q_r &=& \\subtext{\\mathrm{cf}}{max} \\, \\mathrm{cf}_r(\\mathrm{ttm}−T_a) &&T_a &lt; \\mathrm{ttm}\n\\end{align*}\n\\]\nwhere \\(Q_m\\) is the rate of snow melt, \\(Q_r\\) is the rate of snow refreezing, and \\(\\SIb{\\subtext{\\mathrm{cf}}{max}}{mm\\;(\\degree C)^{-1} day^{-1}}\\) and \\(\\mathrm{cf}_r\\) are user defined model parameters (the melting factor and the refreezing factor respectively).\nThe fraction of liquid water in the snow pack is at most equal to a user defined fraction, whc, of the water equivalent of the dry snow content. If the liquid water concentration exceeds whc, either through snow melt or incoming rainfall, the surplus water (rainfall) becomes available for infiltration into the soil:\nsnowwater = snowwater - refreezing  # free water content in snow\nmaxsnowwater = snow * whc  # max water in the snow\nsnowwater = snowwater + snowmelt + rainfall  # add all water and potentially supersaturate the snowpack\nrainfall = max(snowwater - maxsnowwater, 0.0)  # rain + surplus snowwater\n\n\n\nSnowmelt and refreezing rates as a function of temperature (for set melting and refreezing factors)\n\n\n\n\n\n\nGlacier processes can be modelled if the snow model is enabled. Glacier modelling is very similar to snow modelling and considers two main processes: glacier build-up from snow turning into firn/ice (using the HBV-light model) and glacier melt (using a temperature degree-day model).\nThe definition of glacier boundaries and initial volume is defined by two parameters. The parameter glacierfrac gives the fraction of each grid cell covered by a glacier as a number between zero and one. The state parameter glacierstore gives the amount of water (in mm w.e.) within the glaciers at each grid cell. Because the glacier store (glacierstore) cannot be initialized by running the model for a couple of years, a default initial state should be supplied by adding this parameter to the input static file. The required glacier data can be prepared from available glacier datasets.\nFirst, a fixed fraction of the snowpack on top of the glacier is converted into ice for each timestep and added to the glacierstore using the HBV-light model (Seibert et al., 2018). This fraction g_sifrac typically ranges from \\(0.001\\) to \\(0.006\\).\nThen, when the snowpack on top of the glacier is almost all melted (snow cover \\(&lt;\n\\SI{10}{mm}\\)), glacier melt is enabled and estimated with a degree-day model. If the air temperature, \\(T_a\\), is above a certain threshold g_ttm (\\(\\SIb{}{\\degree C}\\)) glacier melt occurs.\nWith this the rate of glacier melt in mm is estimated as:\n\\[\nQ_m = \\subtext{g}{cfmax}(T_a − \\subtext{g}{ttm})\\, ; \\, T_a &gt; \\subtext{g}{ttm}\n\\]\nwhere \\(Q_m\\) is the rate of glacier melt and \\(\\SIb{\\subtext{g}{cfmax}}{mm (\\degree\nC)^{-1}day^{-1}}\\) is the melting factor. Parameter g_ttm can be taken as equal to the snow ttm parameter. Values of the melting factor g_cfmax normally varies from one glacier to another and some values are reported in the literature. g_cfmax can also be estimated by multiplying snow cfmax by a factor between 1 and 2, to take into account the higher albedo of ice compared to snow.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Shared processes"
    ]
  },
  {
    "objectID": "model_docs/vertical/shared_processes.html#snow-and-glaciers",
    "href": "model_docs/vertical/shared_processes.html#snow-and-glaciers",
    "title": "Shared processes",
    "section": "",
    "text": "If the air temperature, \\(T_a\\), is below a user-defined threshold tt \\(\\SIb{}{\\degree C}\\) precipitation occurs as snowfall, whereas it occurs as rainfall if \\(T_a ≥ \\mathrm{tt}\\). Another parameter tti defines how precipitation can occur partly as rain or snowfall.\n\n\n\nDivision between snow and precipitation based on the threshold temperature\n\n\n\nIf precipitation occurs as snowfall, it is added to the dry snow component within the snow pack. Otherwise it ends up in the free water reservoir, which represents the liquid water content of the snow pack. Between the two components of the snow pack, interactions take place, either through snow melt (if temperatures are above a threshold ttm) or through snow refreezing (if temperatures are below threshold ttm).\nThe respective rates of snow melt and refreezing are:\n\\[\n\\begin{align*}\n    Q_m &=& \\subtext{\\mathrm{cf}}{max}(T_a−\\mathrm{ttm})\\, &&T_a &gt; \\mathrm{ttm} \\\\\n    Q_r &=& \\subtext{\\mathrm{cf}}{max} \\, \\mathrm{cf}_r(\\mathrm{ttm}−T_a) &&T_a &lt; \\mathrm{ttm}\n\\end{align*}\n\\]\nwhere \\(Q_m\\) is the rate of snow melt, \\(Q_r\\) is the rate of snow refreezing, and \\(\\SIb{\\subtext{\\mathrm{cf}}{max}}{mm\\;(\\degree C)^{-1} day^{-1}}\\) and \\(\\mathrm{cf}_r\\) are user defined model parameters (the melting factor and the refreezing factor respectively).\nThe fraction of liquid water in the snow pack is at most equal to a user defined fraction, whc, of the water equivalent of the dry snow content. If the liquid water concentration exceeds whc, either through snow melt or incoming rainfall, the surplus water (rainfall) becomes available for infiltration into the soil:\nsnowwater = snowwater - refreezing  # free water content in snow\nmaxsnowwater = snow * whc  # max water in the snow\nsnowwater = snowwater + snowmelt + rainfall  # add all water and potentially supersaturate the snowpack\nrainfall = max(snowwater - maxsnowwater, 0.0)  # rain + surplus snowwater\n\n\n\nSnowmelt and refreezing rates as a function of temperature (for set melting and refreezing factors)\n\n\n\n\n\n\nGlacier processes can be modelled if the snow model is enabled. Glacier modelling is very similar to snow modelling and considers two main processes: glacier build-up from snow turning into firn/ice (using the HBV-light model) and glacier melt (using a temperature degree-day model).\nThe definition of glacier boundaries and initial volume is defined by two parameters. The parameter glacierfrac gives the fraction of each grid cell covered by a glacier as a number between zero and one. The state parameter glacierstore gives the amount of water (in mm w.e.) within the glaciers at each grid cell. Because the glacier store (glacierstore) cannot be initialized by running the model for a couple of years, a default initial state should be supplied by adding this parameter to the input static file. The required glacier data can be prepared from available glacier datasets.\nFirst, a fixed fraction of the snowpack on top of the glacier is converted into ice for each timestep and added to the glacierstore using the HBV-light model (Seibert et al., 2018). This fraction g_sifrac typically ranges from \\(0.001\\) to \\(0.006\\).\nThen, when the snowpack on top of the glacier is almost all melted (snow cover \\(&lt;\n\\SI{10}{mm}\\)), glacier melt is enabled and estimated with a degree-day model. If the air temperature, \\(T_a\\), is above a certain threshold g_ttm (\\(\\SIb{}{\\degree C}\\)) glacier melt occurs.\nWith this the rate of glacier melt in mm is estimated as:\n\\[\nQ_m = \\subtext{g}{cfmax}(T_a − \\subtext{g}{ttm})\\, ; \\, T_a &gt; \\subtext{g}{ttm}\n\\]\nwhere \\(Q_m\\) is the rate of glacier melt and \\(\\SIb{\\subtext{g}{cfmax}}{mm (\\degree\nC)^{-1}day^{-1}}\\) is the melting factor. Parameter g_ttm can be taken as equal to the snow ttm parameter. Values of the melting factor g_cfmax normally varies from one glacier to another and some values are reported in the literature. g_cfmax can also be estimated by multiplying snow cfmax by a factor between 1 and 2, to take into account the higher albedo of ice compared to snow.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Shared processes"
    ]
  },
  {
    "objectID": "model_docs/vertical/shared_processes.html#rainfall-interception",
    "href": "model_docs/vertical/shared_processes.html#rainfall-interception",
    "title": "Shared processes",
    "section": "Rainfall interception",
    "text": "Rainfall interception\nBoth the Gash and Rutter models are available to estimate rainfall interception by the vegetation. The selection of an interception model depends on the simulation timestep.\n\nThe analytical (Gash) model\nThe analytical model of rainfall interception is based on Rutter’s numerical model. The simplifications that introduced allow the model to be applied on a daily basis, although a storm-based approach will yield better results in situations with more than one storm per day. The amount of water needed to completely saturate the canopy is defined as:\n\\[\nP'=\\frac{-\\overline{R}S}{\\overline{E}_w}\\log\\left[1-\\frac{\\overline{E}_w}{\\overline{R}}(1-p-p_t)^{-1}\\right]\n\\]\nwhere \\(\\overline{R}\\) is the average precipitation intensity on a saturated canopy and \\(\\overline{E}_{w}\\) the average evaporation from the wet canopy and with the vegetation parameters \\(S\\), \\(p\\) and \\(p_t\\) as defined previously. The model uses a series of expressions to calculate the interception loss during different phases of a storm. An analytical integration of the total evaporation and rainfall under saturated canopy conditions is then done for each storm to determine average values of \\(\\overline{E}_{w}\\) and \\(\\overline{R}\\). The total evaporation from the canopy (the total interception loss) is calculated as the sum of the components listed in the table below. Interception losses from the stems are calculated for days with \\(P\\geq S_{t}/p_{t}\\). \\(p_t\\) and \\(S_t\\) are small and neglected.\n\nFormulation of the components of interception loss according to Gash:\n\n\n\n\n\n\nComponents\nInterception loss\n\n\n\n\nFor \\(m\\) small storms (\\(P_g&lt;{P'}_g\\))\n\\((1-p-p_t)\\sum_{j=1}^m P_{g,j}\\)\n\n\nWetting up the canopy in \\(n\\) large storms (\\(P_g\\geq{P'}_g\\))\n\\(n(1-p-p_{t}){P'}_g-nS\\)\n\n\nEvaporation from saturated canopy during rainfall\n\\(\\overline{E}/\\overline{R}\\sum_{j=1}^n(P_{g,j}-{P'}_g)\\)\n\n\nEvaporation after rainfall ceases for \\(n\\) large storms\n\\(nS\\)\n\n\nEvaporation from trunks in \\(q\\) storms that fill the trunk storage\n\\(qS_t\\)\n\n\nEvaporation from trunks in \\(m+n-q\\) storms that do not fill the trunk storage\n\\(p_t\\sum_{j=1}^{m+n-q}P_{g,j}\\)\n\n\n\nIn applying the analytical model, saturated conditions are assumed to occur when the hourly rainfall exceeds a certain threshold. Often a threshold of 0.5 mm/hr is used. \\(\\overline{R}\\) is calculated for all hours when the rainfall exceeds the threshold to give an estimate of the mean rainfall rate onto a saturated canopy.\nGash (1979) has shown that in a regression of interception loss on rainfall (on a storm basis) the regression coefficient should equal to \\(\\overline{E}_w/\\overline{R}\\). Assuming that neither \\(\\overline{E}_w\\) nor \\(\\overline{R}\\) vary considerably in time, \\(\\overline{E}_w\\) can be estimated in this way from \\(\\overline{R}\\) in the absence of above-canopy climatic observations. Values derived in this way generally tend to be (much) higher than those calculated with the penman-monteith equation.\n\n\nThe modified rutter model\nFor sub daily timesteps the interception is calculated using a simplification of the Rutter model. The simplified model is solved explicitly and does not take drainage from the canopy into account.\nWflow.rainfall_interception_modrut\n\n\nInterception parameters from LAI\nThe SBM concept can determine the interception parameters from leaf area index (LAI) climatology. In order to switch this on you must define this cyclic parameter in the TOML file, the parameter is read from path_static, as follows:\n[input]\npath_forcing = \"data/forcing-moselle.nc\"\npath_static = \"data/staticmaps-moselle.nc\"\n\ncyclic = [\"vertical.leaf_area_index\"]\nFurthermore these additional parameters are required: + Specific leaf storage (sl \\(\\SIb{}{mm}\\)) + Storage woody part of vegetation (swood \\(\\SIb{}{mm}\\)) + Extinction coefficient (kext \\(\\SIb{}{-}\\))\nHere it is assumed that cmax \\(\\SIb{}{mm}\\) (leaves) (canopy storage capacity for the leaves only) relates linearly with LAI (c.f. Van Dijk and Bruijnzeel 2001). This done via the sl. sl can be determined through a lookup table with land cover based on literature (Pitman 1989, Lui 1998). Next the cmax (leaves) is determined using:\n\\[\n    \\mathrm{cmax}(\\mathrm{leaves})  = \\mathrm{sl} \\cdot \\mathrm{LAI}\n\\]\nTo get to total storage (cmax) the woody part of the vegetation also needs to be added. As for sl, the storage of the woody part swood can also be related to land cover (lookup table).\nThe canopy gap fraction is determined using the extinction coefficient kext (van Dijk and Bruijnzeel 2001):\n\\[\n    \\mathrm{canopygapfraction} = \\exp(-\\subtext{k}{ext} \\cdot \\mathrm{LAI})\n\\]\nThe extinction coefficient kext can be related to land cover.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Shared processes"
    ]
  },
  {
    "objectID": "model_docs/vertical/shared_processes.html#references",
    "href": "model_docs/vertical/shared_processes.html#references",
    "title": "Shared processes",
    "section": "References",
    "text": "References\n\nSeibert, J., Vis, M. J. P., Kohn, I., Weiler, M., and Stahl, K., 2018, Technical note: Representing glacier geometry changes in a semi-distributed hydrological model, Hydrol. Earth Syst. Sci., 22, 2211–2224, https://doi.org/10.5194/hess-22-2211-2018.",
    "crumbs": [
      "Model documentation",
      "Vertical processes",
      "Shared processes"
    ]
  },
  {
    "objectID": "user_guide/faq.html",
    "href": "user_guide/faq.html",
    "title": "Frequently asked questions",
    "section": "",
    "text": "How do I easily modify input parameters?\nSee this section on how to adjust maps, and this section on how to directly pass uniform values. Note that both options work for any parameter.\n\n\nHow do I start wflow with initial conditions from a previous run?\nSee here\n\n\nHow do I add external inflows and/or abstractions?\nlateral.river.inflow: positive for inflows, negative for abstraction. If parameter is time varying, add it to the correct section, see below.\n\n\nHow do I add time-varying parameters?\nEither through cyclic (add parameter to cyclic list in the toml), or to the forcing section.\n\n\nHow do I add different output?\nSee here for csv output, here for scalar netcdf data, and here for gridded output.\n\n\n\n\n Back to top",
    "crumbs": [
      "User guide",
      "Frequently asked questions"
    ]
  },
  {
    "objectID": "user_guide/index.html",
    "href": "user_guide/index.html",
    "title": "User guide",
    "section": "",
    "text": "Use the buttons below to quickly navigate to the most visited pages. Note that more pages are available in the sidebar.\n\n\n\n\n  \n    \n      Required files\n    \n  \n  \n    \n      Explanation .toml file\n    \n  \n  \n    \n      Frequently asked questions\n    \n  \n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "User guide"
    ]
  },
  {
    "objectID": "user_guide/multi_threading.html",
    "href": "user_guide/multi_threading.html",
    "title": "Multithreading",
    "section": "",
    "text": "Wflow supports multi-threading execution of the wflow_sbm model that uses the kinematic wave approach for river, overland and lateral subsurface flow. Both the vertical SBM concept and the kinematic wave components of this model can run on multiple threads. The optional local inertial model for river flow and the optional local inertial model for river (1D) and land (2D), both part of wflow_sbm, can also run on multiple threads. The threading functionality for the kinematic wave may also be useful for the wflow_sbm model SBM + Groundwater flow. The multi-threading functionality in wflow is considered experimental, see also the following issue, where an error was not thrown running code multi-threaded. Because of this we advise to start with running a wflow model single-threaded (for example during the testing phase of setting up an new wflow model).\nFor information on how to start Julia with multiple threads we refer to How to start Julia with multiple threads.\nAdditionally, when running Julia + wflow via the command line (note that this is different from the wflow_cli), it is possible to define the number of threads via the -t flag. An example where we start Julia with three threads:\njulia -t 3 -e 'using Wflow; Wflow.run()' path/to/config.toml",
    "crumbs": [
      "User guide",
      "Supported options",
      "Multithreading"
    ]
  },
  {
    "objectID": "user_guide/multi_threading.html#using-wflow-in-julia",
    "href": "user_guide/multi_threading.html#using-wflow-in-julia",
    "title": "Multithreading",
    "section": "",
    "text": "Wflow supports multi-threading execution of the wflow_sbm model that uses the kinematic wave approach for river, overland and lateral subsurface flow. Both the vertical SBM concept and the kinematic wave components of this model can run on multiple threads. The optional local inertial model for river flow and the optional local inertial model for river (1D) and land (2D), both part of wflow_sbm, can also run on multiple threads. The threading functionality for the kinematic wave may also be useful for the wflow_sbm model SBM + Groundwater flow. The multi-threading functionality in wflow is considered experimental, see also the following issue, where an error was not thrown running code multi-threaded. Because of this we advise to start with running a wflow model single-threaded (for example during the testing phase of setting up an new wflow model).\nFor information on how to start Julia with multiple threads we refer to How to start Julia with multiple threads.\nAdditionally, when running Julia + wflow via the command line (note that this is different from the wflow_cli), it is possible to define the number of threads via the -t flag. An example where we start Julia with three threads:\njulia -t 3 -e 'using Wflow; Wflow.run()' path/to/config.toml",
    "crumbs": [
      "User guide",
      "Supported options",
      "Multithreading"
    ]
  },
  {
    "objectID": "user_guide/multi_threading.html#using-the-command-line-interface",
    "href": "user_guide/multi_threading.html#using-the-command-line-interface",
    "title": "Multithreading",
    "section": "Using the command line interface",
    "text": "Using the command line interface\nAs explained above, we need to start julia with multiple threads to make use of this speedup. For wflow_cli, the only way to do this is by setting the JULIA_NUM_THREADS environment variable, as explained in these julia docs.\nWhen a model run starts, among the run information the number of threads that are used is printed, so nthreads() = 4 means 4 threads are used, because JULIA_NUM_THREADS has been set to 4.",
    "crumbs": [
      "User guide",
      "Supported options",
      "Multithreading"
    ]
  },
  {
    "objectID": "user_guide/required_files.html",
    "href": "user_guide/required_files.html",
    "title": "Required files",
    "section": "",
    "text": "To run wflow, several files are required. These include a settings file and input data. The input data is typically separated into static maps and forcing data, and both are provided in netCDF files, except for lake storage and rating curves that are supplied via CSV files. Below is a brief overview of the different files:",
    "crumbs": [
      "User guide",
      "Required files"
    ]
  },
  {
    "objectID": "user_guide/required_files.html#the-configuration-file-settings.toml",
    "href": "user_guide/required_files.html#the-configuration-file-settings.toml",
    "title": "Required files",
    "section": "The configuration file (settings.toml)",
    "text": "The configuration file (settings.toml)\nThe configuration file contains all relevant settings for running wflow, such as the simulation period, the model settings, the mapping between input files and (internal) model parameters. More details and explanations can be found here. An example configuration file is presented below.\n\n\nClick to show example .toml file\n\n\n# This is a TOML configuration file for Wflow.\n# Relative file paths are interpreted as being relative to this TOML file.\n# Wflow documentation https://deltares.github.io/Wflow.jl/dev/\n# TOML documentation: https://github.com/toml-lang/toml\n\ndir_input = \"data/input\"\ndir_output = \"data/output\"\n\n[time]\nendtime = 2000-01-10T00:00:00\n\n[logging]\nloglevel = \"info\"\n\n[input]\npath_forcing = \"forcing-moselle.nc\"\npath_static = \"staticmaps-moselle.nc\"\n\n# these are not directly part of the model\nlocal_drain_direction = \"wflow_ldd\"\nriver_location__mask = \"wflow_river\"\nreservoir_area__count = \"wflow_reservoirareas\"\nreservoir_location__count = \"wflow_reservoirlocs\"\nsubcatchment_location__count = \"wflow_subcatch\"\n\n[input.forcing]\natmosphere_water__precipitation_volume_flux = \"precip\"\nland_surface_water__potential_evaporation_volume_flux = \"pet\"\natmosphere_air__temperature = \"temp\"\n\n[input.static]\natmosphere_air__snowfall_temperature_threshold = \"TT\"\natmosphere_air__snowfall_temperature_interval = \"TTI\"\n\n\"land~water-covered__area_fraction\" = \"WaterFrac\"\n\nsnowpack__melting_temperature_threshold = \"TTM\"\nsnowpack__degree-day_coefficient = \"Cfmax\"\n\nsoil_layer_water__brooks-corey_epsilon_parameter = \"c\"\nsoil_surface_water__infiltration_reduction_parameter = \"cf_soil\"\nsoil_surface_water__vertical_saturated_hydraulic_conductivity = \"KsatVer\"\nsoil_water__vertical_saturated_hydraulic_conductivity_scale_parameter = \"f\"\n\"soil~compacted_surface_water__infiltration_capacity\" = \"InfiltCapPath\"\n\"soil~non-compacted_surface_water__infiltration_capacity\" = \"InfiltCapSoil\"\nsoil_water__residual_volume_fraction = \"thetaR\"\nsoil_water__saturated_volume_fraction = \"thetaS\"\nsoil_water_sat-zone_bottom__max_leakage_volume_flux = \"MaxLeakage\"\n\"soil~compacted__area_fraction\" = \"PathFrac\"\n\"soil_root~wet__sigmoid_function_shape_parameter\" = \"rootdistpar\"\nsoil__thickness = \"SoilThickness\"\n\nvegetation_canopy_water__mean_evaporation-to-mean_precipitation_ratio = \"EoverR\"\nvegetation_canopy__light-extinction_coefficient = \"Kext\"\nvegetation__specific-leaf_storage = \"Sl\"\nvegetation_wood_water__storage_capacity = \"Swood\"\nvegetation_root__depth = \"RootingDepth\"\n\nriver__length = \"wflow_riverlength\"\nriver_water_flow__manning_n_parameter = \"N_River\"\nriver__slope = \"RiverSlope\"\nriver__width = \"wflow_riverwidth\"\n\nland_surface_water_flow__manning_n_parameter = \"N\"\nland_surface__slope = \"Slope\"\n\nreservoir_surface__area = \"ResSimpleArea\"\n\"reservoir_water_demand~required~downstream__volume_flow_rate\" = \"ResDemand\"\nreservoir_water_release-below-spillway__max_volume_flow_rate = \"ResMaxRelease\"\nreservoir_water__max_volume = \"ResMaxVolume\"\n\"reservoir_water~full-target__volume_fraction\" = \"ResTargetFullFrac\"\n\"reservoir_water~min-target__volume_fraction\" = \"ResTargetMinFrac\"\n\nsubsurface_water__horizontal-to-vertical_saturated_hydraulic_conductivity_ratio = \"KsatHorFrac\"\n\n[input.cyclic]\nvegetation__leaf-area_index = \"LAI\"\n\n[model]\nthicknesslayers = [100, 300, 800]\ntype = \"sbm\"\n\n[output.csv]\npath = \"output_moselle_simple.csv\"\n\n[[output.csv.column]]\ncoordinate.x = 7.378\ncoordinate.y = 50.204\nheader = \"Q\"\nparameter = \"river_water__volume_flow_rate\"\n\n[[output.csv.column]]\nheader = \"recharge\"\nparameter = \"soil_water_sat-zone_top__recharge_volume_flux\"\nreducer = \"mean\"",
    "crumbs": [
      "User guide",
      "Required files"
    ]
  },
  {
    "objectID": "user_guide/required_files.html#the-static-input-data-staticmaps.nc",
    "href": "user_guide/required_files.html#the-static-input-data-staticmaps.nc",
    "title": "Required files",
    "section": "The static input data (staticmaps.nc)",
    "text": "The static input data (staticmaps.nc)\nThe list below contains a brief overview of several essential static maps required to run wflow. These NC variables names refer to the example data of the wflow_sbm + kinematic wave model (see here). Example data for the other model configurations can be found here.\n\n\n\nDescription\nNC variable name\nunit\n\n\n\n\nFlow direction (1-9)\nwflow_ldd\n-\n\n\nMap indicating the river cells (0-1)\nwflow_river\n-\n\n\nThe length of the river\nwflow_riverlength\nm\n\n\nThe width of the river\nwflow_riverwidth\nm\n\n\nMask of the basin\nwflow_subcatch\n-\n\n\nLand slope\nSlope\nm m\\(^{-1}\\)\n\n\nRiver slope\nRiverSlope\nm m\\(^{-1}\\)\n\n\n\nAs mentioned before, the model parameters can also be defined as spatial maps. They can be included in the same netCDF file, as long as their variable names are correctly mapped in the TOML settings file. See the section on example models on how to use this functionality.\n\n\n\n\n\n\nImportant\n\n\n\nWhen using cyclic data, three different options are supported: - 12 (monthly) - 365 (daily, where Feb. 29 is not present, so the value for Feb. 28 is taken. Dec. 31 is represented by DOY 365) - 366 (where Feb. 29 represents DOY 60, and Dec. 31 DOY 366)\nIn contrast to the right-labelling of the forcing data (see below), the DOY/month of the current time step is used. For example: to simulate 2023-06-14 00:00:00 (with a daily time step), the DOY value at position 6 (when 12 values are provided), 165 (when 365 values are provided) or 166 (when 366 values are provided).",
    "crumbs": [
      "User guide",
      "Required files"
    ]
  },
  {
    "objectID": "user_guide/required_files.html#the-forcing-data-forcing.nc",
    "href": "user_guide/required_files.html#the-forcing-data-forcing.nc",
    "title": "Required files",
    "section": "The forcing data (forcing.nc)",
    "text": "The forcing data (forcing.nc)\nThe forcing data typically contains the meteorological boundary conditions. This data is provided as a single netCDF file, with several variables containing the forcing data for precipitation, temperature and potential evaporation. The code snippet below shows the contents of the example file (downloaded here), and displaying the content with NCDatasets in Julia. As can be seen, each forcing variable (precip, pet and temp) consists of a three-dimensional dataset (x, y, and time), and each timestep consists of a two-dimensional map with values at each grid cell. Only values within the basin are required.\n\n\n\n\n\n\nImportant\n\n\n\nWflow expects the forcing to be “right-labelled”. This means that e.g. daily precipitation at 2023-06-15 00:00:00 is the accumulated total precipitation between 2023-06-14 00:00:00 and 2023-06-15 00:00:00.\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor optimal computational performance, it is recommended to have chunks in the time dimension. This way, only part of the forcing file needs to be read and kept in memory. We recommend using a chunk size in the time dimension with size 1. Using larger chunks can largely degrade computational performance.\n\n\n\n\nClick to show example forcing.nc file\n\nGroup: /\n\nDimensions\n  time = 366\n  y = 313\n  x = 291\n\nVariables\n  time   (366)\n    Datatype:    Int64\n    Dimensions:  time\n    Attributes:\n    units                = days since 2000-01-02 00:00:00\n    calendar             = proleptic_gregorian\n\n  y   (313)\n    Datatype:    Float64\n    Dimensions:  y\n    Attributes:\n    _FillValue           = NaN\n\n  x   (291)\n    Datatype:    Float64\n    Dimensions:  x\n    Attributes:\n    _FillValue           = NaN\n\n  spatial_ref\n    Attributes:\n    crs_wkt              = GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]\n    x_dim                = x\n    y_dim                = y\n    dim0                 = time\n\n  precip   (291 × 313 × 366)\n    Datatype:    Float32\n    Dimensions:  x × y × time\n    Attributes:\n    _FillValue           = NaN\n    unit                 = mm\n    precip_fn            = era5\n    coordinates          = idx_out spatial_ref mask\n\n  idx_out   (291 × 313)\n    Datatype:    Int32\n    Dimensions:  x × y\n\n  mask   (291 × 313)\n    Datatype:    UInt8\n    Dimensions:  x × y\n\n  pet   (291 × 313 × 366)\n    Datatype:    Float32\n    Dimensions:  x × y × time\n    Attributes:\n    _FillValue           = NaN\n    unit                 = mm\n    pet_fn               = era5\n    pet_method           = debruin\n    coordinates          = idx_out spatial_ref mask\n\n  temp   (291 × 313 × 366)\n    Datatype:    Float32\n    Dimensions:  x × y × time\n    Attributes:\n    _FillValue           = NaN\n    unit                 = degree C.\n    temp_fn              = era5\n    temp_correction      = True\n    coordinates          = idx_out spatial_ref mask\n\nGlobal attributes\n  unit                 = mm\n  precip_fn            = era5",
    "crumbs": [
      "User guide",
      "Required files"
    ]
  },
  {
    "objectID": "user_guide/warm_states.html",
    "href": "user_guide/warm_states.html",
    "title": "Starting with “warm” states",
    "section": "",
    "text": "The state section in the TOML file provides information on the input file if the model is initialized with a warm state (path_input) and to what file the states are written at the end of the model run (path_output). Please note that the model setting reinit needs to be set to false in order to initialize the model with states from the file located at path_input. A mapping between external state names and internal model states is required. This information is specified for each model component, the vertical model and lateral model components. In the example below the vertical component represents the SBM concept, and for the lateral components there is a river (including optional reservoir, lake and floodplain components), land and subsurface domain. The internal model states are listed on the left side, and the external state names are listed on the right side. Note that path_input is only required when reinit is set to false. path_output is optional, an output state file is only written when it is defined. If neither is set, the entire state section can be left out.\n[model]\nreinit = false # cold (reinit = true) or warm state (reinit = false), default is true\n\n[state]\npath_input = \"data/instates-moselle.nc\"     # Location of the file with the input states\npath_output = \"data/outstates-moselle.nc\"   # Output location of the states after the model run\n\n[state.vertical]\nsatwaterdepth = \"satwaterdepth\"\nsnow = \"snow\"\ntsoil = \"tsoil\"\nustorelayerdepth = \"ustorelayerdepth\"\ncanopystorage = \"canopystorage\"\nsnowwater = \"snowwater\"\nglacierstore =\"glacierstore\"\n\n[state.lateral.river]\nq = \"q_river\"\nh = \"h_river\"\nh_av = \"h_av_river\"\n\n[state.lateral.river.floodplain]\nq = \"q_floodplain\"\nh = \"h_floodplain\"\n\n[state.lateral.river.reservoir]\nvolume = \"volume_reservoir\"\n\n[state.lateral.river.lake]\nwaterlevel = \"waterlevel_lake\"\n\n[state.lateral.subsurface]\nssf = \"ssf\"\n\n[state.lateral.land]\nq = \"q_land\"\nh = \"h_land\"\nh_av = \"h_av_land\"\n\n\n\n Back to top",
    "crumbs": [
      "User guide",
      "Supported options",
      "Starting with \"warm\" states"
    ]
  }
]