using Setfield

# TODO review and expand public names, use CF where applicable
const paramap = Dict{String,Lens}(
    "nlayers" => @lens(_.vertical.nlayers),
    "y_length" => @lens(_.vertical.yl),
    "x_length" => @lens(_.vertical.xl),
    "river_fraction" => @lens(_.vertical.riverfrac),
    "θₛ" => @lens(_.vertical.θₛ),
    "θᵣ" => @lens(_.vertical.θᵣ),
    "kv₀" => @lens(_.vertical.kv₀),
    "kvfrac" => @lens(_.vertical.kvfrac),
    "m" => @lens(_.vertical.m),
    "hb" => @lens(_.vertical.hb),
    "soilthickness" => @lens(_.vertical.soilthickness),
    "act_thickl" => @lens(_.vertical.act_thickl),
    "sumlayers" => @lens(_.vertical.sumlayers),
    "infiltcappath" => @lens(_.vertical.infiltcappath),
    "infiltcapsoil" => @lens(_.vertical.infiltcapsoil),
    "maxleakage" => @lens(_.vertical.maxleakage),
    "waterfrac" => @lens(_.vertical.waterfrac),
    "pathfrac" => @lens(_.vertical.pathfrac),
    "altitude" => @lens(_.vertical.altitude),
    "rootingdepth" => @lens(_.vertical.rootingdepth),
    "rootdistpar" => @lens(_.vertical.rootdistpar),
    "capscale" => @lens(_.vertical.capscale),
    "et_reftopot" => @lens(_.vertical.et_reftopot),
    "c" => @lens(_.vertical.c),
    "stemflow" => @lens(_.vertical.stemflow),
    "throughfall" => @lens(_.vertical.throughfall),
    "f" => @lens(_.vertical.f),
    "ustorelayerdepth" => @lens(_.vertical.ustorelayerdepth),
    "satwaterdepth" => @lens(_.vertical.satwaterdepth),
    "zi" => @lens(_.vertical.zi),
    "soilwatercapacity" => @lens(_.vertical.soilwatercapacity),
    "canopystorage" => @lens(_.vertical.canopystorage),
    "cmax" => @lens(_.vertical.cmax),
    "canopygapfraction" => @lens(_.vertical.canopygapfraction),
    "e_r" => @lens(_.vertical.e_r),
    "precipitation" => @lens(_.vertical.precipitation),
    "temperature" => @lens(_.vertical.temperature),
    "potential_evaporation" => @lens(_.vertical.potevap),
    "pottrans_soil" => @lens(_.vertical.pottrans_soil),
    "transpiration" => @lens(_.vertical.transpiration),
    "ae_ustore" => @lens(_.vertical.ae_ustore),
    "ae_sat" => @lens(_.vertical.ae_sat),
    "interception" => @lens(_.vertical.interception),
    "soilevap" => @lens(_.vertical.soilevap),
    "actevapsat" => @lens(_.vertical.actevapsat),
    "actevap" => @lens(_.vertical.actevap),
    "runoff_river" => @lens(_.vertical.runoff_river),
    "runoff_land" => @lens(_.vertical.runoff_land),
    "ae_openw_l" => @lens(_.vertical.ae_openw_l),
    "ae_openw_r" => @lens(_.vertical.ae_openw_r),
    "avail_forinfilt" => @lens(_.vertical.avail_forinfilt),
    "actinfilt" => @lens(_.vertical.actinfilt),
    "actinfiltsoil" => @lens(_.vertical.actinfiltsoil),
    "actinfiltpath" => @lens(_.vertical.actinfiltpath),
    "infiltexcess" => @lens(_.vertical.infiltexcess),
    "excesswater" => @lens(_.vertical.excesswater),
    "exfiltsatwater" => @lens(_.vertical.exfiltsatwater),
    "exfiltustore" => @lens(_.vertical.exfiltustore),
    "excesswatersoil" => @lens(_.vertical.excesswatersoil),
    "excesswaterpath" => @lens(_.vertical.excesswaterpath),
    "runoff" => @lens(_.vertical.runoff),
    "vwc" => @lens(_.vertical.vwc),
    "vwc_perc" => @lens(_.vertical.vwc_perc),
    "rootstore" => @lens(_.vertical.rootstore),
    "vwc_root" => @lens(_.vertical.vwc_root),
    "vwc_percroot" => @lens(_.vertical.vwc_percroot),
    "ustoredepth" => @lens(_.vertical.ustoredepth),
    "transfer" => @lens(_.vertical.transfer),
    "capflux" => @lens(_.vertical.capflux),
    "recharge" => @lens(_.vertical.recharge),
    "cfmax" => @lens(_.vertical.cfmax),
    "tt" => @lens(_.vertical.tt),
    "tti" => @lens(_.vertical.tti),
    "ttm" => @lens(_.vertical.ttm),
    "whc" => @lens(_.vertical.whc),
    "w_soil" => @lens(_.vertical.w_soil),
    "cf_soil" => @lens(_.vertical.cf_soil),
    "snow" => @lens(_.vertical.snow),
    "snowwater" => @lens(_.vertical.snowwater),
    "rainfallplusmelt" => @lens(_.vertical.rainfallplusmelt),
    "tsoil" => @lens(_.vertical.tsoil),
    "storage_wood" => @lens(_.vertical.swood),
    "kext" => @lens(_.vertical.kext),
    "leaf_area_index" => @lens(_.vertical.lai),

    # example of dealing with conflicting names
    "specific_leaf" => @lens(_.vertical.sl),
    "slope_land" => @lens(_.lateral.land.sl),
    "slope_river" => @lens(_.lateral.river.sl),

    # SurfaceFlow land
    "β_land" => @lens(_.lateral.land.β),
    "n_land" => @lens(_.lateral.land.n),
    "dl_land" => @lens(_.lateral.land.dl),
    "q_land" => @lens(_.lateral.land.q),
    "q_av_land" => @lens(_.lateral.land.q_av),
    "qlat_land" => @lens(_.lateral.land.qlat),
    "h_land" => @lens(_.lateral.land.h),
    "h_av_land" => @lens(_.lateral.land.h_av),
    "Δt_land" => @lens(_.lateral.land.Δt),
    "width_land" => @lens(_.lateral.land.width),
    "alpha_term_land" => @lens(_.lateral.land.alpha_term),
    "alpha_pow_land" => @lens(_.lateral.land.alpha_pow),
    "α_land" => @lens(_.lateral.land.α),
    "eps_land" => @lens(_.lateral.land.eps),
    "cel_land" => @lens(_.lateral.land.cel),
    "to_river_land" => @lens(_.lateral.land.to_river),
    "rivercells_land" => @lens(_.lateral.land.rivercells),
    "wb_pit_land" => @lens(_.lateral.land.wb_pit),
    "reservoir_land" => @lens(_.lateral.land.reservoir),
    "lake_land" => @lens(_.lateral.land.lake),

    # SurfaceFlow river
    "β_river" => @lens(_.lateral.river.β),
    "n_river" => @lens(_.lateral.river.n),
    "dl_river" => @lens(_.lateral.river.dl),
    "q_river" => @lens(_.lateral.river.q),
    "q_av_river" => @lens(_.lateral.river.q_av),
    "qlat_river" => @lens(_.lateral.river.qlat),
    "h_river" => @lens(_.lateral.river.h),
    "h_av_river" => @lens(_.lateral.rive.ha_av),
    "Δt_river" => @lens(_.lateral.river.Δt),
    "width_river" => @lens(_.lateral.river.width),
    "alpha_term_river" => @lens(_.lateral.river.alpha_term),
    "alpha_pow_river" => @lens(_.lateral.river.alpha_pow),
    "α_river" => @lens(_.lateral.river),
    "eps_river" => @lens(_.lateral.river.α),
    "cel_river" => @lens(_.lateral.river.cel),
    "to_river_river" => @lens(_.lateral.river.to_river),
    "rivercells_river" => @lens(_.lateral.river.rivercells),
    "wb_pit_river" => @lens(_.lateral.river.wb_pit),
    "reservoir_river" => @lens(_.lateral.river.reservoir),
    "lake_river" => @lens(_.lateral.river.lake),

    # LateralSSF
    "kh₀" => @lens(_.lateral.subsurface.kh₀),
    "f" => @lens(_.lateral.subsurface.f),
    "θₑ" => @lens(_.lateral.subsurface.θₑ),
    "Δt" => @lens(_.lateral.subsurface.Δt),
    "βₗ" => @lens(_.lateral.subsurface.βₗ),
    "dl" => @lens(_.lateral.subsurface.dl),
    "dw" => @lens(_.lateral.subsurface.dw),
    "zi" => @lens(_.lateral.subsurface.zi),
    "exfiltwater" => @lens(_.lateral.subsurface.exfiltwater),
    "recharge" => @lens(_.lateral.subsurface.recharge),
    "ssf" => @lens(_.lateral.subsurface.ssf),
    "ssfmax" => @lens(_.lateral.subsurface.ssfmax),
    "to_river" => @lens(_.lateral.subsurface.to_river),
    "wb_pit" => @lens(_.lateral.subsurface.wb_pit),

    # SimpleReservoir
    "maxvolume_reservoir" => @lens(_.lateral.river.reservoir.maxvolume),
    "area_reservoir" => @lens(_.lateral.river.reservoir.area),
    "maxrelease_reservoir" => @lens(_.lateral.river.reservoir.maxrelease),
    "demand_reservoir" => @lens(_.lateral.river.reservoir.demand),
    "targetminfrac_reservoir" => @lens(_.lateral.river.reservoir.targetminfrac),
    "targetfullfrac_reservoir" => @lens(_.lateral.river.reservoir.targetfullfrac),
    "volume_reservoir" => @lens(_.lateral.river.reservoir.volume),
    "inflow_reservoir" => @lens(_.lateral.river.reservoir.inflow),
    "outflow_reservoir" => @lens(_.lateral.river.outflow_reservoir),
    "percfull_reservoir" => @lens(_.lateral.river.reservoir.percfull),
    "demandrelease_reservoir" => @lens(_.lateral.river.reservoir.demandrelease),
    "precipitation_reservoir" => @lens(_.lateral.river.reservoir.precipitation),
    "evaporation_reservoir" => @lens(_.lateral.river.reservoir.evaporation),

    # NaturalLake
    "area_lake" => @lens(_.lateral.river.lake.area),
    "threshold_lake" => @lens(_.lateral.river.lake.threshold),
    "storfunc_lake" => @lens(_.lateral.river.lake.storfunc),
    "outflowfunc_lake" => @lens(_.lateral.river.lake.outflowfunc),
    "b_lake" => @lens(_.lateral.river.lake.b),
    "e_lake" => @lens(_.lateral.river.lake.e),
    # "sh_lake" => @lens(_.lateral.river.sh_lake),
    # "hq_lake" => @lens(_.lateral.river.hq_lake),
    "mean_waterlevel_lake" => @lens(_.lateral.river.lake.avg_waterlevel),
    "waterlevel_lake" => @lens(_.lateral.river.lake.waterlevel),
    "inflow_lake" => @lens(_.lateral.river.lake.inflow),
    "storage_lake" => @lens(_.lateral.river.lake.storage),
    "outflow_lake" => @lens(_.lateral.river.lake.outflow),
    "precipitation_lake" => @lens(_.lateral.river.lake.precipitation),
    "evaporation_lake" => @lens(_.lateral.river.lake.evaporation),
)
