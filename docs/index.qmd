---
title: "Wflow.jl"
toc: false
include-in-header:
  - text: |
      <style>figure { padding: 3em 0 0em 0; }</style>
engine: julia
format:
  html
---

[![Build Status](https://github.com/Deltares/Wflow.jl/workflows/CI/badge.svg)](https://github.com/Deltares/Wflow.jl/actions)
[![Coverage](https://codecov.io/gh/Deltares/Wflow.jl/branch/master/graph/badge.svg)](https://codecov.io/gh/Deltares/Wflow.jl)
[![Dev](https://img.shields.io/badge/docs-dev-blue.svg)](https://deltares.github.io/Wflow.jl/dev)
[![Stable](https://img.shields.io/badge/docs-stable-blue.svg)](https://deltares.github.io/Wflow.jl/stable)
[![DOI](https://zenodo.org/badge/246787232.svg)](https://zenodo.org/badge/latestdoi/246787232)
[![ColPrac: Contributor's Guide on Collaborative Practices for Community Packages](https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet)](https://github.com/SciML/ColPrac)

# About wflow

Wflow is Deltares' solution for modelling hydrological processes, allowing users to account for
precipitation, interception, snow accumulation and melt, evapotranspiration, soil water,
surface water, groundwater recharge, and water demand and allocation in a fully distributed
environment. Successfully applied worldwide for analyzing flood hazards, drought, climate
change impacts and land use changes, wflow is growing to be a leader in hydrology solutions.
Wflow is conceived as a framework, within which multiple distributed model concepts are
available, which maximizes the use of open earth observation data, making it the hydrological
model of choice for data scarce environments. Based on gridded topography, soil, land use and
climate data, wflow calculates all hydrological fluxes at any given grid cell in the model at a
given time step.

Wflow was born out of the creation of Deltares in 2008, when a strategic review identified the
need for a distributed hydrological model to allow the simulation of flows at the catchment
scale. With the intention being to encourage greater scientific collaboration. For this reason:

   * Wflow is free and open source software.
   * Wflow is easily coupled with other models and software applications.
   * Contribution to the wflow code development is encouraged.

From 2021 the [wflow code](https://github.com/Deltares/Wflow.jl) is distributed under the [MIT
License](https://github.com/Deltares/Wflow.jl/blob/master/LICENSE). Wflow is also available as
a [compiled executable](https://download.deltares.nl/en/download/wflow/) under the Deltares
terms and conditions. The wflow computational engine is built in the
[Julia](https://julialang.org/) language, a high-performance computing language. Wflow does not
include a graphical user interface and is designed for maximum user flexibility. Prior to 2021,
wflow was developed in Python on top of the PCRaster Python extension. The Python version is
[still available](https://github.com/openstreams/wflow), but not actively developed.


## Quick overview

::: column-page-inset-right
{{< include /_static/listing_code_medium.html >}}
```{=html}

<ul id="index-chooser" class="nav nav-tabs" role="tablist">
  <li class="nav-item" role="presentation">
    <a class="nav-link" href="getting_started/install.html">
      <i class="bi bi-gear"></i>Installation guide
    </a>
  </li>
  <li class="nav-item" role="presentation">
    <a class="nav-link" href="user_guide/index.html">
      <i class="bi bi-laptop"></i>How do I use Wflow.jl?
    </a>
  </li>
  <li class="nav-item" role="presentation">
    <a class="nav-link" href="user_guide/faq.html">
      <i class="bi bi-question-octagon"></i>Frequently asked questions
    </a>
  </li>
  <li class="nav-item" role="presentation">
    <a class="nav-link" href="model_docs/index.html">
      <i class="bi bi-book"></i>Model documentation
    </a>
  </li>
  <li class="nav-item" role="presentation">
    <a class="nav-link" href="changelog.html">
      <i class="bi bi-code-slash"></i>Changelog
    </a>
  </li>
</ul>

```
:::

## Attribution


```{julia}
# | code-fold: true
# | output: asis
using TOML

# Load the Project.toml file from Wflow.jl to extract dependencies
project = TOML.parsefile("../Wflow/Project.toml")

# Extract and print dependencies (sorted by name)
println("This project relies on the following (direct) Julia dependencies:\n")
for name in sort(collect(keys(project["deps"])))
    println("- $name")
end
```
