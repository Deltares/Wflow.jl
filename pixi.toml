[project]
name = "Wflow.jl"
authors = [
    "Joost Buitink <joost.buitink@deltares.nl",
    "Willem van Verseveld <willem.vanVerseveld@deltares.nl",
    "Hofer-Julian <julian.hofer@deltares.nl>",
]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64"]

[tasks]
# Installation
install-julia = "juliaup add 1.10.0 && juliaup default 1.10.0"
# Julia
update-registry-julia = "julia --eval='using Pkg; Registry.update()'"
instantiate-julia = "julia --project --eval='using Pkg; Pkg.instantiate()'"
initialize-julia = { depends_on = [
    "update-registry-julia",
    "instantiate-julia",
] }
# Build
instantiate-create-binaries = { cmd = "julia --project --eval='using Pkg; Pkg.instantiate()'", cwd = "build/create_binaries" }
instantiate-wflow-cli = { cmd = "julia --project --eval='using Pkg; Pkg.instantiate()'", cwd = "build/wflow_cli" }
download-test-data = { cmd = "julia --project download_test_data.jl", cwd = "build/create_binaries", depends_on = [
    "initialize-julia",
    "instantiate-create-binaries",
] }
build-wflow-cli = { cmd = "julia --project create_app.jl", cwd = "build/create_binaries", depends_on = [
    "download-test-data",
    "instantiate-wflow-cli",
] }
# Test
test-wflow-cli = { cmd = "julia --project --eval 'using Pkg; Pkg.test()'", cwd = "build/wflow_cli", depends_on = [
    "download-test-data",
] }
test-wflow-cov = { cmd = "julia --project --eval 'using Pkg; Pkg.test(coverage=true, julia_args=[\"--check-bounds=yes\"])'", depends_on = [
    "initialize-julia",
] }
# Server
test-wflow-server = { cmd = "julia --project=server --eval 'using Pkg; Pkg.test(\"WflowServer\", coverage=true)'", depends_on = [
    "instantiate-wflow-server",
] }
instantiate-wflow-server = "julia --project=server --eval 'using Pkg; Pkg.instantiate(); Pkg.develop(path=\"./\")'"

[dependencies]
juliaup = "*"

[activation]
scripts = ["utils/env_setup.sh"]

[target.win-64.activation]
scripts = ["utils/env_setup.bat"]

[system-requirements]
linux = "3.10.0"
