#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING


mutable struct ModelException <: Thrift.TMsg # Exception
  meta::ThriftMeta
  values::Dict{Symbol,Any}
  
  function ModelException(; kwargs...)
    obj = new(__meta__ModelException, Dict{Symbol,Any}())
    values = obj.values
    symdict = obj.meta.symdict
    for nv in kwargs
      fldname, fldval = nv
      fldtype = symdict[fldname].jtype
      (fldname in keys(symdict)) || error(string(typeof(obj), " has no field with name ", fldname))
      values[fldname] = isa(fldval, fldtype) ? fldval : convert(fldtype, fldval)
    end
    Thrift.setdefaultproperties!(obj)
    obj
  end
end # mutable struct ModelException

const __meta__ModelException = meta(ModelException,
  Symbol[:message],
  Type[String],
  Symbol[],
  Int[],
  Dict{Symbol,Any}(:message => "")
)

function Base.getproperty(obj::ModelException, name::Symbol)
  if name === :message
    return (obj.values[name])::String
  else
    getfield(obj, name)
  end
end

meta(::Type{ModelException}) = __meta__ModelException


abstract type BMIServiceClientBase end
